<jmeterTestPlan jmeter="5.0 r1840935" properties="5.0" version="1.2">
  <hashTree>
    <TestPlan enabled="true" guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <stringProp name="TestPlan.comments" />
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp elementType="Arguments" enabled="true" guiclass="ArgumentsPanel" name="TestPlan.user_defined_variables" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments" />
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath" />
    </TestPlan>
    <hashTree>
      <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="host and proxy">
        <collectionProp name="Arguments.arguments">
          <elementProp elementType="Argument" name="PROXY_HOST">
            <stringProp name="Argument.name">PROXY_HOST</stringProp>
            <stringProp name="Argument.value">${__P(proxyServer,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">${__P(proxyServer)}</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="PROXY_PORT">
            <stringProp name="Argument.name">PROXY_PORT</stringProp>
            <stringProp name="Argument.value">${__P(proxyPort,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">${__P(proxyPort)}</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="serverName">
            <stringProp name="Argument.name">serverName</stringProp>
            <stringProp name="Argument.value">${__P(server,host.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="serverPort">
            <stringProp name="Argument.name">serverPort</stringProp>
            <stringProp name="Argument.value">${__P(port,9300)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="url_base">
            <stringProp name="Argument.name">url_base</stringProp>
            <stringProp name="Argument.value">http://${__P(server,server)}:${__P(port,9300)}/bi</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="urlPath">
            <stringProp name="Argument.name">urlPath</stringProp>
            <stringProp name="Argument.value">${__P(urlPath,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">gateway base urlPath</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="protocol">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__P(protocol,http)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree />
      <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="test parameters">
        <collectionProp name="Arguments.arguments">
          <elementProp elementType="Argument" name="USERS">
            <stringProp name="Argument.name">USERS</stringProp>
            <stringProp name="Argument.value">${__P(users,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="advanced_viewer">
            <stringProp name="Argument.name">advanced_viewer</stringProp>
            <stringProp name="Argument.value">${__P(advancedViewer,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="ITERATION">
            <stringProp name="Argument.name">ITERATION</stringProp>
            <stringProp name="Argument.value">${__P(iteration,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">supply a default value here if you want to run iteration_mode from jmeter GUI</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="DURATION">
            <stringProp name="Argument.name">DURATION</stringProp>
            <stringProp name="Argument.value">${__P(duration,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">supply a default value here if you want to run duration_mode from jmeter GUI</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="iteration_supplied_in_cmdline">
            <stringProp name="Argument.name">iteration_supplied_in_cmdline</stringProp>
            <stringProp name="Argument.value">${__P(iteration,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">this variable controls test mode, default should always be false, do not modify</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="duration_supplied_in_cmdline">
            <stringProp name="Argument.name">duration_supplied_in_cmdline</stringProp>
            <stringProp name="Argument.value">${__P(duration,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">this variable controls test mode, default should always be false, do not modify</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="data_dir">
            <stringProp name="Argument.name">data_dir</stringProp>
            <stringProp name="Argument.value">${__P(recordingDir,${__P(includecontroller.prefix)}data)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">directory containing file that has one widget request per line and the file name is the dashboard store id</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="dashboard_load_time">
            <stringProp name="Argument.name">dashboard_load_time</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.desc">Time in seconds the longest dashboard takes to load</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="tr_prefix">
            <stringProp name="Argument.name">tr_prefix</stringProp>
            <stringProp name="Argument.value">first_</stringProp>
            <stringProp name="Argument.desc">keeps track of transaction prefixes, do not modify</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="namespace">
            <stringProp name="Argument.name">namespace</stringProp>
            <stringProp name="Argument.value">${__P(namespace,LDAP)}</stringProp>
            <stringProp name="Argument.desc">supply a default value here if you want to run in a different Namespace from jmeter GUI</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="credentialFile">
            <stringProp name="Argument.name">credentialFile</stringProp>
            <stringProp name="Argument.value">${__P(credentialFile,)}</stringProp>
            <stringProp name="Argument.desc">location of csv using alternate username</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="smartAnnotations">
            <stringProp name="Argument.name">smartAnnotations</stringProp>
            <stringProp name="Argument.value">${__P(smartAnnotations,)}</stringProp>
            <stringProp name="Argument.desc">enabled or disabled (default)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="recordingEnabled">
            <stringProp name="Argument.name">recordingEnabled</stringProp>
            <stringProp name="Argument.value">${__P(recordingEnabled,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="healthPing">
            <stringProp name="Argument.name">healthPing</stringProp>
            <stringProp name="Argument.value">${__P(healthPing,0)}</stringProp>
            <stringProp name="Argument.desc">enabled or disable pinging the dispatchers /bi/health URL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="healthDisp">
            <stringProp name="Argument.name">healthDisp</stringProp>
            <stringProp name="Argument.value">${__P(healthDisp,)}</stringProp>
            <stringProp name="Argument.desc">location of csv defining dispatchers</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="ICP4D">
            <stringProp name="Argument.name">ICP4D</stringProp>
            <stringProp name="Argument.value">${__P(icp4d,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree />
      <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="scenarioGroupInfo">
        <collectionProp name="Arguments.arguments">
          <elementProp elementType="Argument" name="scenarioGroupName">
            <stringProp name="Argument.name">scenarioGroupName</stringProp>
            <stringProp name="Argument.value">${__P(scenario,1widget_bubble_chart_csv_1000rows100cols_2tabs)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp elementType="Argument" name="scenarioGroupFile">
            <stringProp name="Argument.name">scenarioGroupFile</stringProp>
            <stringProp name="Argument.value">${__P(scenarioFile,test-jmeter-base/testPlans/scenarios.json)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree />
      <SetupThreadGroup enabled="true" guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp elementType="LoopController" enabled="true" guiclass="LoopControlPanel" name="ThreadGroup.main_controller" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1507127150000</longProp>
        <longProp name="ThreadGroup.end_time">1507127150000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration" />
        <stringProp name="ThreadGroup.delay" />
      </SetupThreadGroup>
      <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="get test details" />
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set test mode (duration_mode or iteration_mode)">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put("iteration_mode", "false");
vars.put("duration_mode", "false");

// iteration or duration supplied by commandline controls execution mode (iteration_mode or duration_mode)
if (vars.get("iteration_supplied_in_cmdline") != "false") vars.put("iteration_mode", "true");
if (vars.get("duration_supplied_in_cmdline") != "false") vars.put("duration_mode", "true");

// if iteration and duration were not supplied by commandline, then use the User Defined Variables to choose mode
if (vars.get("iteration_mode") != "true" || vars.get("duration_mode") != "true") {
	if (vars.get("ITERATION") != "0") {
		props.put("iteration_mode", "true");
	} else {
		// defaults to duration_mode
		props.put("duration_mode", "true");
	}
}
</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ read scenarioGroup from file: ${scenarioGroupFile}">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol">file</stringProp>
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${scenarioGroupFile}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get scenarioGroup">
              <stringProp name="JSONPostProcessor.referenceNames">scenarioGroup</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.scenarioGroups[?(@.scenarioGroup=="${scenarioGroupName}")]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">SCENARIO_GROUP_NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get scenarios">
              <stringProp name="JSONPostProcessor.referenceNames">scenarios</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.scenarios[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">scenarioGroup</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="does scenarioGroup=${scenarioGroupName} exists in ${scenarioGroupFile}?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1761248839">SCENARIO_GROUP_NOT_FOUND</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">scenarioGroup</stringProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="${USERS} is not enough users. Need at least ${scenarios_matchNr}">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">if (Integer.parseInt("${scenarios_matchNr}") &gt; Integer.parseInt("${USERS}")) {
	AssertionResult.setError(true)
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage("${USERS} is not enough users. Need at least ${scenarios_matchNr}")
}
</stringProp>
            </JSR223Assertion>
            <hashTree />
            <ResultAction enabled="true" guiclass="ResultActionGui" testclass="ResultAction" testname="stop the test now on failure">
              <intProp name="OnError.action">3</intProp>
            </ResultAction>
            <hashTree />
          </hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get scenario from scenarios">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("scenarioGroup");</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="is there a dashboard or story or explore to run-har-recording for?">
              <stringProp name="JSONPostProcessor.referenceNames">run-har-recording</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.scenarios[*].items[?(@.type=~/dashboard|story|explore/)].type</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="set run-har-recording">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">if (vars.get("run-har-recording") == "false") {
	props.put("run-har-recording", "false")
} else {
	props.put("run-har-recording", "true")
}
log.debug(Label + " -- set run-har-recording=" + props.get("run-har-recording"))
</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ populate global properties">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">varsToPopulate = ["scenarioGroup"]
for (varToPopulate in varsToPopulate) {
	props.put(varToPopulate, vars.get(varToPopulate))
}

props.put("scenarioCount", vars.get("scenarios_matchNr"))
</stringProp>
          </JSR223Sampler>
          <hashTree />
        </hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set driver">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.lang.System
osFamilyName = System.getProperty("os.name").toLowerCase()
chromedriver = props.get("chromedriver")

if (vars.get("recordingEnabled")) {
	if (chromedriver != null &amp;&amp; new File(chromedriver).exists()) {
		// assume value provided is correct
	} else {
		// guess which chromedriver we need
		if (osFamilyName.contains("linux")) {
			chromedriverFileName = "chromedriver.linux"
		} else if (osFamilyName.contains("osx")) {
			chromedriverFileName =  "chromedriver.osx"
		} else {
			chromedriverFileName =  "chromedriver.exe"
		}
		// first look relative to root
		rootDriverLocation = "test-jmeter-base/engine/default/lib/"
		chromedriver = rootDriverLocation + chromedriverFileName
		if (!new File(chromedriver).exists()) {
			// assume we are launching from bin
			chromedriverAltPath = "../lib/" + chromedriverFileName
			if (!new File(chromedriverAltPath).exists()) {
				// can't find chromedriver
				SampleResult.setSuccessful(false)
				SampleResult.setResponseMessage("chromedriver not found: " + chromedriverAltPath)
			} else {
				// use the alternate path
				chromedriver = chromedriverAltPath
			}
		}
		props.put("chromedriver", chromedriver)
	}
	if (!new File(chromedriver).exists()){
		SampleResult.setSuccessful(false)
		SampleResult.setResponseMessage("chromedriver not set or does not exist: " + chromedriver)
	}
}
log.info("chromedriver="+chromedriver)</stringProp>
        </JSR223Sampler>
        <hashTree />
      </hashTree>
      <SetupThreadGroup enabled="true" guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="[Setup - Record] Open dashboards to get querySpecs">
        <stringProp name="TestPlan.comments">This must be executed sequentially (before launch, after setUp) so that chrome driver config can read the dynamically generated proxy file created by setup</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp elementType="LoopController" enabled="true" guiclass="LoopControlPanel" name="ThreadGroup.main_controller" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${recordingEnabled}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration" />
        <stringProp name="ThreadGroup.delay" />
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set local run-har-recording">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">vars.put("run-har-recording", props.get("run-har-recording"))
log.debug(Label + " -- run-har-recording=" + vars.get("run-har-recording"))</stringProp>
        </JSR223Sampler>
        <hashTree />
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If ${run-har-recording}">
          <stringProp name="IfController.condition">"${run-har-recording}"=="true"</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Baseline last modified dates of files in queryspec dir">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.File;

File folder = new File(vars.get("data_dir"));
File[] listOfFiles = folder.listFiles();

for(File f : listOfFiles){
	vars.put(f.getName(), String.valueOf(f.lastModified()));
}</stringProp>
          </JSR223Sampler>
          <hashTree />
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include common/recorder.jmx">
            </GenericController>
          <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="WebDriver" />
        <hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If default users">
            <stringProp name="IfController.condition">${__groovy("${credentialFile}"=="")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set credentials">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__P(usernamePrefix,user)}${__threadNum} cognos ${namespace}</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("username", args[0])
vars.put("password", args[1])
vars.put("namespace", args[2])</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If NOT default users">
            <stringProp name="IfController.condition">${__groovy("${credentialFile}"!="")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <CSVDataSet enabled="true" guiclass="TestBeanGUI" testclass="CSVDataSet" testname="/ set credentials">
              <stringProp name="delimiter">\t</stringProp>
              <stringProp name="fileEncoding" />
              <stringProp name="filename">${credentialFile}</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">username,password,namespace</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
            </CSVDataSet>
            <hashTree />
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include common/bi_connect.jmx">
            </GenericController>
          <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="connect" />
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="XSRF-TOKEN Extractor">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">XSRF-TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">XSRF-TOKEN=(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productVersion">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productVersion</stringProp>
              <stringProp name="RegexExtractor.regex">\.productVersion":"([^"]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="format product version">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">productVersion = vars.get("productVersion")
indexOf_R = productVersion.indexOf("R")
vars.put("productVersion", productVersion.toString())

if (productVersion.contains("R")) {
	versionMajorMinor = productVersion.substring(0,indexOf_R).trim()// remove whitespace
	// some versions come with extras like the (LTS) in '11.1 R7 (LTS)' ... ingore bits after release for now
	releaseVersion = Integer.parseInt(productVersion.substring(indexOf_R + 1).find("[0-9]+"))

	vars.put("productVerFormatted", versionMajorMinor.toString() +"."+ releaseVersion.toString())
	
} else {
	vars.put("productVerFormatted", productVersion.toString())
}
//removing . from product number to create an integer value
productVersionKey=vars.get("productVerFormatted").minus(".").minus(".")
vars.put("productVerKey", productVersionKey.toString())
</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
          <ConfigTestElement enabled="true" guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path" />
            <stringProp name="TestPlan.comments">copied from top of test plan</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">8</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">nothingshouldmatchthis</stringProp>
            <stringProp name="HTTPSampler.proxyHost">${PROXY_HOST}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${PROXY_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </ConfigTestElement>
          <hashTree />
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ read scenarioGroup from global">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return props.get("scenarioGroup")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract scenarios array">
              <stringProp name="JSONPostProcessor.referenceNames">scenarios</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.scenarios[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach scenario in scenarios">
            <stringProp name="ForeachController.inputVal">scenarios</stringProp>
            <stringProp name="ForeachController.returnVal">scenario</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
            <stringProp name="ForeachController.startIndex">0</stringProp>
            <stringProp name="ForeachController.endIndex">${__javaScript(parseInt(${scenarios_matchNr}))}</stringProp>
          </ForeachController>
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ return scenario">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return vars.get("scenario");</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get navigation base path for this scenario">
                <stringProp name="TestPlan.comments">One to one mapping of scenario name value to navigation path value</stringProp>
                <stringProp name="JSONPostProcessor.referenceNames">scenario_navigation</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.navigation</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">scenario</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get items in this scenario">
                <stringProp name="JSONPostProcessor.referenceNames">items</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.items[*]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">scenario</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
            <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach item in this scenario">
              <stringProp name="ForeachController.inputVal">items</stringProp>
              <stringProp name="ForeachController.returnVal">item</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">${__javaScript(parseInt(${items_matchNr}))}</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ return item">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get("item");</stringProp>
              </JSR223Sampler>
              <hashTree>
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get type">
                  <stringProp name="JSONPostProcessor.referenceNames">type</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.type</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="JSONPostProcessor.defaultValues">NONE</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If dashboard or story">
                <stringProp name="IfController.condition">${__groovy("${type}"=="dashboard" || "${type}"=="story")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ return item">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">return vars.get("item");</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get dashboards in this item">
                    <stringProp name="JSONPostProcessor.referenceNames">dashboardNames</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                    <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get suggestions count for this item">
                    <stringProp name="JSONPostProcessor.referenceNames">suggestions</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.suggestions</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NONE</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get executionsDatacheck for this item">
                    <stringProp name="JSONPostProcessor.referenceNames">executionsDatacheck</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$..executionsDatacheck[*]</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                    <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NONE</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ get datachecks in this item">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters">item datacheck datachecks</stringProp>
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper

itemVarName = args[0]
itemDatacheckKeyName = args[1]
datacheckVariableName = args[2]

item = new JsonSlurper().parseText(vars.get(itemVarName))
datachecks = item[itemDatacheckKeyName]

// if it's a map then we have specific datachecks per version of product
if (datachecks instanceof groovy.json.internal.LazyMap) {

	// must treat datachecks as a multiversion map
     datachecks_mv = datachecks

     // sort the release versions available but skip "default"
	sortedListOfDefinedVersions = []
	for(key in datachecks_mv.keySet()) {
		if ("default".equals(key)) continue // skip
		
		// only care about release version
		key_releaseVersion = key
		sortedListOfDefinedVersions.add(Integer.parseInt(key_releaseVersion.minus(".").minus(".")))
	}
	sortedListOfDefinedVersions = sortedListOfDefinedVersions.sort()

	currentCandidate = 0
	// iterate over sorted list
	for(key in sortedListOfDefinedVersions) {
		
		// looking for lowest key that's &gt;= the release
		if (Integer.parseInt(vars.get("productVerKey").toString()) &gt;= key &amp;&amp; key &gt; currentCandidate) {
			currentCandidate = key
			datachecks = datachecks_mv[key_releaseVersion.toString()]
			//log.info("PRODUCT COMPARISON " + vars.get("productVerKey").toString() + " : " + key.toString() + " : " + currentCandidate.toString() + " : " + key_releaseVersion.toString())
		} else {
			// since it's a sorted list, no point in searching further
			break;
		}
	}
	if (currentCandidate == 0) {
		// no newer candidate found use default
		datachecks = datachecks_mv["default"]
	}
}

// create jmeter friendly array variable
datacheckCount = 0
for(datacheck in datachecks) {
	datacheckCount++
	vars.put(datacheckVariableName + "_" + datacheckCount, datacheck.toString())
	vars.put(datacheckVariableName + "_matchNr", String.valueOf(datacheckCount))
}
</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get action names in this item">
                    <stringProp name="JSONPostProcessor.referenceNames">actionNames</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions..name</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                    <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get navigation base path for this item">
                    <stringProp name="JSONPostProcessor.referenceNames">navigation</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.navigation</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="TestPlan.comments">One to one mapping of scenario name value to navigation path value</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">${scenario_navigation}</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ get expectedRequestCount">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">datasetsRequestCount = Integer.parseInt(vars.get("datachecks_matchNr"));

// default use the datacheck count as the expected request count
expectedRequestCount = datasetsRequestCount;

// endor has suggestions requests for most widgets that affects the overall request count
suggestions = vars.get("suggestions");

if ("NONE".equals(suggestions)) {
	// if there isn't a count defined in the scenarios file, assume # of suggestsions call == # widgets
	expectedRequestCount = expectedRequestCount * 2;
} else {
	// if a suggestions count is provided then use it
	expectedRequestCount = expectedRequestCount + Integer.parseInt(suggestions);	
}

executionsDatacheck_matchNr = vars.get("executionsDatacheck_matchNr");
if (executionsDatacheck_matchNr != null &amp;&amp; !"0".equals(executionsDatacheck_matchNr)) {
	// if a executionsDatacheck_matchNr is provided then use it
	expectedRequestCount = expectedRequestCount + Integer.parseInt(executionsDatacheck_matchNr);
}

vars.put("expectedRequestCount", String.valueOf(expectedRequestCount));</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                </hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Initialize below loop's counter">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">props.put("navigationIteration",1); </stringProp>
                </JSR223Sampler>
                <hashTree />
                <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach dashboard in this item">
                  <stringProp name="ForeachController.inputVal">dashboardNames</stringProp>
                  <stringProp name="ForeachController.returnVal">dashboardName</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                  <stringProp name="ForeachController.startIndex">0</stringProp>
                </ForeachController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ recording exists?">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import org.apache.jorphan.io.TextFile;

vars.put("dashboardRecordingExists", "false");

String[] navPath = vars.get("navigation").split(",");
String relDashboardDir = vars.get("data_dir") + "/";
for(i = 1; i &lt; navPath.length+1; i ++){
	relDashboardDir = relDashboardDir + "/" + navPath[i-1]; 
}
relDashboardDir = relDashboardDir + "/" + vars.get("dashboardName"); 
vars.put("relDashboardDir", relDashboardDir);
vars.put("relDashboardDir_enc", relDashboardDir.replaceAll(" ","%20"));

queryspecFile = relDashboardDir + "/" + ("tab_000");
log.info(Label + " queryspecFile = " + queryspecFile);
queryspec = new TextFile(queryspecFile);
response = ""

// define common logging function
def loginfo = {
	String msg -&gt;
	log.info(msg);
	response = response + msg + "\n"
}

if (queryspec.exists()) {
	loginfo Label + ": file exists"
	

	linesInRecordedFile = queryspec.getText().split(System.getProperty("line.separator"));
	numberOfWidgetRecordings = linesInRecordedFile.length;

	// in endor there is suggestion call per widget, must ignore these when counting widget calls
	
	numberOfWidgetRecordings = 0;
	for (line in linesInRecordedFile) {
		if (line.contains("/datasets/")) {
			numberOfWidgetRecordings = numberOfWidgetRecordings + 1;
		}
	}
	loginfo Label + ": numberOfWidgetRecordings=" + numberOfWidgetRecordings


	expectedNumberOfWidgetRecordings = Integer.parseInt(vars.get("datachecks_matchNr"));
	loginfo Label + ": expectedNumberOfWidgetRecordings=" + expectedNumberOfWidgetRecordings
	if (numberOfWidgetRecordings == expectedNumberOfWidgetRecordings) {
		loginfo Label + ": numberOfWidgetRecordings == expectedNumberOfWidgetRecordings"
		vars.put("dashboardRecordingExists", "true");	
	}
} else {
	loginfo Label + ": file does not exist: " + queryspec.getAbsolutePath()
}
	  
return response</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                  <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If not dashboardRecordingExists">
                    <stringProp name="IfController.condition">${__groovy("${dashboardRecordingExists}"=="false")}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig enabled="true" guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config">
                      <stringProp name="WebDriverConfig.proxy_type">DIRECT</stringProp>
                      <stringProp name="WebDriverConfig.proxy_pac_url">${pac_loc}</stringProp>
                      <stringProp name="WebDriverConfig.http_host">vottilt01</stringProp>
                      <intProp name="WebDriverConfig.http_port">52230</intProp>
                      <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
                      <stringProp name="WebDriverConfig.https_host" />
                      <intProp name="WebDriverConfig.https_port">8080</intProp>
                      <stringProp name="WebDriverConfig.ftp_host" />
                      <intProp name="WebDriverConfig.ftp_port">8080</intProp>
                      <stringProp name="WebDriverConfig.socks_host" />
                      <intProp name="WebDriverConfig.socks_port">8080</intProp>
                      <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
                      <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
                      <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
                      <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
                      <stringProp name="ChromeDriverConfig.chromedriver_path">${__P(chromedriver)}</stringProp>
                      <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
                      <boolProp name="ChromeDriverConfig.headless_enabled">true</boolProp>
                      <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
                    </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
                    <hashTree />
                    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Create encoded versions of variables used in webdriver sampler">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">//vars may not contain spaces
//${navigation} ${scenarioName} ${usernameHAR}
log.debug("navigation="+vars.get("navigation"))
vars.put("navigation_enc", vars.get("navigation").replaceAll(" ","%20"));
vars.put("dashboardName_enc", vars.get("dashboardName").replaceAll(" ","%20"));
vars.put("username_enc", vars.get("username").replaceAll(" ","%20"));</stringProp>
                    </JSR223Sampler>
                    <hashTree />
                    <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler enabled="true" guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="/ Log in and open team content">
                      <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var wait = new support_ui.WebDriverWait(WDS.browser, 20)
var timeunit = java.util.concurrent.TimeUnit
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS)
WDS.browser.manage().timeouts().implicitlyWait(1, timeunit.SECONDS)

var cp4d = WDS.args[9]
var productVersion = WDS.args[10]
try{
  if (cp4d == "true") {
    WDS.browser.get(WDS.args[8] + "://"+WDS.args[0]+":"+WDS.args[1]+WDS.args[6] + "/bi/")
  } else {
    WDS.browser.get(WDS.args[8] + "://"+WDS.args[0]+":"+WDS.args[1]+WDS.args[6])
  }
}catch(err){
    WDS.log.info("Gateway url path was not provided. Defaulting to /")
    WDS.browser.get("http://"+WDS.args[0]+":"+WDS.args[1])
}

var namespace = "'"+ WDS.args[7]+"'" 

// 11.2 has different login page
var regex112 = RegExp('^11\.2.*')
if (regex112.test(productVersion)) {
	//CSS selector definitions for login and navigation
	var userIDTextFieldSelector = "#CAMUsername"
	var userPwdFieldSelector = "#CAMPassword"
	var signInBtnSelector = "#signInBtn"
	var slideoutSelector = "[class='appview paneColumn'] [id='com.ibm.bi.contentApps.teamFoldersSlideout']"
	var namespaceIDTextFieldSelector = "#CAMNamespace button"

	// wait for namespace selection OR username field to appear
	var cssNamespaceOrUser = namespaceIDTextFieldSelector + "," + userIDTextFieldSelector
	wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.cssSelector(cssNamespaceOrUser)))

	var camNamespaceElements = WDS.browser.findElements(pkg.By.cssSelector(namespaceIDTextFieldSelector))
	if (camNamespaceElements.size() &gt; 0 ) {

	    // the namespace selection is present, first click to open options list
	    camNamespaceElements[0].click()

	    // find and click the namespace option
	    var namespaceSelector = "div[role='option'][title=" + namespace + "]"
	    wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.cssSelector(namespaceSelector)))
	    WDS.browser.findElement(pkg.By.cssSelector(namespaceSelector)).click()
	}
	
} else {

	//CSS selector definitions for login and navigation
	var userIDTextFieldSelector = ".authInput.userPromptInput[name='CAMUsername']"
	var userPwdFieldSelector = ".authInput.userPromptInput[name='CAMPassword']"
	var signInBtnSelector = ".signInBtn"
	var slideoutSelector = "[class='appview paneColumn'] [id='com.ibm.bi.contentApps.teamFoldersSlideout']"
	var namespaceIDTextFieldSelector = ".authInput.userPromptInput[name='CAMNamespace']"
	
	// icp4d has custom login page
	if (cp4d == "true") {
		userIDTextFieldSelector = "[id='username-textinput']"
		userPwdFieldSelector = "[id='password-textinput']"
		signInBtnSelector = "[id='signInButton']"
		slideoutSelector = "[class='appview paneColumn'] [id='com.ibm.bi.contentApps.teamFoldersSlideout']"
		namespaceIDTextFieldSelector = "#main select.authInput.userPromptInput[name='CAMNamespace']"
	}

	var cssNamespaceOrUser = namespaceIDTextFieldSelector + "," + userIDTextFieldSelector

	wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.cssSelector(cssNamespaceOrUser)))

	var camNamespaceElements = WDS.browser.findElements(pkg.By.cssSelector(namespaceIDTextFieldSelector + " option[value=" + namespace + "]"))
	if (camNamespaceElements.size() &gt; 0 ) {
	  
	    camNamespaceElements[0].click()
	}
}

//Enter username
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.cssSelector(userIDTextFieldSelector)))
var userIDTextField = WDS.browser.findElement(pkg.By.cssSelector(userIDTextFieldSelector))
userIDTextField.sendKeys([WDS.args[4].replace(/%20/g, ' ')])

//Enter password
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.cssSelector(userPwdFieldSelector)))
var userPwdField = WDS.browser.findElement(pkg.By.cssSelector(userPwdFieldSelector))
userPwdField.sendKeys([WDS.args[5]])

//Click Sign in
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.cssSelector(signInBtnSelector)))
var signInBtn = WDS.browser.findElement(pkg.By.cssSelector(signInBtnSelector))
signInBtn.click()

var waitSlideout = new support_ui.WebDriverWait(WDS.browser, 60)
waitSlideout.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.cssSelector(slideoutSelector)))
var slideoutSelector = WDS.browser.findElement(pkg.By.cssSelector(slideoutSelector))
// wait until loadingIndicatorContainer is not visible
waitSlideout.until(pkg.ExpectedConditions.invisibilityOfElementLocated(pkg.By.cssSelector(".loadingIndicatorContainer")))

//Click on team folder
waitSlideout.until(pkg.ExpectedConditions.visibilityOf(slideoutSelector))
slideoutSelector.click()</stringProp>
                      <stringProp name="WebDriverSampler.parameters">${serverName} ${serverPort} ${navigation_enc} ${dashboardName_enc} ${username_enc} ${password} ${__P(urlPath,/)} ${namespace} ${protocol} ${ICP4D} ${productVerFormatted}</stringProp>
                      <stringProp name="WebDriverSampler.language">javascript</stringProp>
                    </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
                    <hashTree />
                    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Create vars for each step in navigation">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">//first go through the tedious process of clearing old nav values. 
//Big TODO: do this better...
boolean endOfSuffix = false;
int i=1;
while(endOfSuffix == false){
	if(vars.get("navigationForEach_" + i)==null){
		endOfSuffix = true;
	}else{
		vars.remove("navigationForEach_"+i);
		i=i+1;
	}
}

String[] navPath = vars.get("navigation").split(",");
for(i = 1; i &lt; navPath.length+1; i ++){
	vars.put("navigationForEach_" + i, navPath[i-1]); 
}

//assign current dashboard name for when its time to click the dashboard
vars.put("currentDashboardName", vars.get("dashboardName"));</stringProp>
                    </JSR223Sampler>
                    <hashTree />
                    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Encoded current dashboard name">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">//vars may not contain spaces
vars.put("currentDashboardName_enc", vars.get("currentDashboardName").replaceAll(" ","%20"));
</stringProp>
                    </JSR223Sampler>
                    <hashTree />
                    <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach nav step to reach the dashboard">
                      <stringProp name="ForeachController.inputVal">navigationForEach</stringProp>
                      <stringProp name="ForeachController.returnVal">navOutput</stringProp>
                      <boolProp name="ForeachController.useSeparator">true</boolProp>
                      <stringProp name="ForeachController.startIndex">0</stringProp>
                    </ForeachController>
                    <hashTree>
                      <CounterConfig enabled="true" guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter">
                        <stringProp name="CounterConfig.start">0</stringProp>
                        <stringProp name="CounterConfig.end" />
                        <stringProp name="CounterConfig.incr">1</stringProp>
                        <stringProp name="CounterConfig.name">dashboardNavCounter</stringProp>
                        <stringProp name="CounterConfig.format" />
                        <boolProp name="CounterConfig.per_user">true</boolProp>
                        <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                      </CounterConfig>
                      <hashTree />
                      <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler enabled="true" guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="/ navigate 1 step to dashboard">
                        <stringProp name="WebDriverSampler.script">var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var keys = JavaImporter(org.openqa.selenium.Keys)
var wait = new support_ui.WebDriverWait(WDS.browser, 1000)
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
WDS.sampleResult.sampleStart()

// decode the nav
var path = WDS.args[2].replace(/%20/g, ' ')
var navPathSelector = ".pane-content tr div[title='" + path + "']"
WDS.log.info("navPathSelector " + navPathSelector)
//wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.cssSelector(navPathSelector)))
var maxTryCount = 10;
var elementFound = false;
java.lang.Thread.sleep(3000);
var results = WDS.browser.findElements(pkg.By.cssSelector(navPathSelector));

// make sure scroll is available before we use it
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.cssSelector(".dataTables_scrollBody")))
var scrollCount = 0;

try {
WDS.log.info("result tried 1 " + (results.length))
while(maxTryCount &gt; 0 &amp;&amp; results.length == 0) {
    scrollCount = scrollCount + 400;
    
    WDS.browser.executeScript("document.querySelector('.dataTables_scrollBody').scrollTop = "+ scrollCount)
    
    java.lang.Thread.sleep(1000);
    results = WDS.browser.findElements(pkg.By.cssSelector(navPathSelector));
    maxTryCount = maxTryCount - 1;
}
WDS.log.info("clicking " + path)
if (results.length == 0) {
	throw new Error("path not found: " + path);
}
results[0].click();
}catch(e){
    WDS.log.error("error " + e.message);
    WDS.sampleResult.setSuccessful(false);
    WDS.sampleResult.setResponseMessage(e.message);
}


WDS.sampleResult.sampleEnd()
</stringProp>
                        <stringProp name="WebDriverSampler.parameters">${serverName} ${serverPort} ${navOutput_enc}</stringProp>
                        <stringProp name="WebDriverSampler.language">javascript</stringProp>
                      </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
                      <hashTree>
                        <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="encode navOutput">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters" />
                          <stringProp name="filename" />
                          <stringProp name="cacheKey">true</stringProp>
                          <stringProp name="script">import org.apache.commons.io.FileUtils;

//vars may not contain spaces
vars.put("navOutput_enc", vars.get("navOutput").replaceAll(" ","%20"));
</stringProp>
                        </JSR223PreProcessor>
                        <hashTree />
                      </hashTree>
                      <BeanShellPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="wait for resource load">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="script">Thread.sleep(1000);</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree />
                    </hashTree>
                    <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler enabled="true" guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="/ Click dashboard_${actionNames_matchNr}">
                      <stringProp name="WebDriverSampler.script">var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var wait = new support_ui.WebDriverWait(WDS.browser, 10)
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var javaLang= JavaImporter(java.lang.Thread);

WDS.sampleResult.sampleStart()

dashboardName = WDS.args[2].replace(/%20/g, ' ')
var navPathSelector = '.pane-content tr div[title="' + dashboardName + '"]'

try{
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.cssSelector(navPathSelector))) 
}
catch(e){
    WDS.log.error("********************************error on waiting for dashboard element" + e);  
}
  
WDS.log.info("clicking " + WDS.args[2])
var dashboard;
var driver= WDS.browser
var n = WDS.args[3]

try{
    WDS.browser.executeScript( 'delete sessionStorage.datasetCalls;')
    
    WDS.log.info("step 1")
    // define a function for identifying requests to be recorded
    recordFunc_onOpen = function(open) {
       XMLHttpRequest.prototype.open = function(method, url) {
            if (url.indexOf("datasets")&gt;0 
            		|| url.indexOf("predict/annotations")&gt;0 
            		|| url.indexOf("smarts/explore/annotation")&gt;0) {
              this.method = method;
              this.url = url;
            }
            open.call(this, method, url);
        };
    };
    WDS.log.info("step 2")
    // override the open function in the browser
    WDS.browser.executeScript("(" + recordFunc_onOpen.toLocaleString() + ")(XMLHttpRequest.prototype.open);")
    
    WDS.log.info("step 3")
    // define a function for capturing the data in the requests
    recordFunc_onSend = function(send) {
        XMLHttpRequest.prototype.send = function(data) {
            if (this.method){
                
                var datasetCalls = [];
                if (sessionStorage.datasetCalls) {
                    datasetCalls = JSON.parse(sessionStorage.datasetCalls)
                }
                
                // if this is a post then we need to handle it differently
                if (this.method.indexOf("POST")&gt;-1){
                    if (typeof data === "string" ) {
                        // regular post with a simple body
                        datasetCalls.push({
                                "method":this.method,
                                "url":this.url,
                                "data":data, 
                                "type": "string"
                                });
                    } else {
                        // assume multiplart
                        it = data.entries();
					multiPData = [];
					var result = it.next();
					while (!result.done) {
						 multiPData.push(result.value);
						 result = it.next();
					}
                        datasetCalls.push({
                                "method":this.method,
                                "url":this.url,
                                "data":multiPData,
                                "type":"multipart"
                                });
                    }
                }else {
                    // simple GET without data
                    datasetCalls.push({
                        "method":this.method,
                        "url":this.url,
                        "data":""
                        });
                }
                sessionStorage.datasetCalls = JSON.stringify(datasetCalls);
            }
            send.call(this, data);
        };
    };
    WDS.log.info("step 4")
    // override the send function in the browser
    WDS.browser.executeScript("(" + recordFunc_onSend.toLocaleString() + ")(XMLHttpRequest.prototype.send);")
    
    WDS.log.info("step 5")
    // click the dashboard
    dashboard = driver.findElement(pkg.By.cssSelector(navPathSelector))
    dashboard.click()
    
    WDS.log.info("************begin of Loading dashboard after click");
    for (var i =0;i&lt;240;i++) {
    	// exit when we have our expected recordings
    	var dcSet = WDS.browser.executeScript( 'return typeof sessionStorage.datasetCalls != "undefined"');
    	WDS.log.info("**************************************datasetCalls typeof " + dcSet);
    	if (dcSet) {
    		WDS.log.info("**************************************datasetCalls not undefined");
    		var requestsRecorded = WDS.browser.executeScript( 'return JSON.parse(sessionStorage.datasetCalls).length');
    		WDS.log.info("**************************************datasetCalls.length is " + requestsRecorded + " expected is " + WDS.args[5]);
    		if (requestsRecorded == WDS.args[5]) {
    			WDS.log.info("**************************************request calls match expected, exiting");
    			break;
		}
	}
	javaLang.Thread.sleep(1000);
	WDS.log.info("**************************************Tabs count outside of loop " +n ); 
    }
    
    WDS.log.info("step 6")
    fileDir = WDS.args[4].replace(/%20/g, ' ')
    urlPrefix = "/bi/";
    
    // retreive the recorded dataset calls from the browser
    var array = WDS.browser.executeScript( 'return JSON.parse(sessionStorage.datasetCalls);')
    WDS.log.info("array is " + array);
    
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    for (var index = 0; index&lt;array.length;index++) {
        WDS.log.info("open object returned: " + array[index].method)
        WDS.log.info("open object returned: " + array[index].url)
        WDS.log.info("open object returned: " + array[index].data)
        urlToWrite = urlPrefix + array[index].url.replace(/i[0-9A-F]{32}/i, '@@dataset_id@@')
        //urlToWrite = urlPrefix + array[index].url.replace(/[0-9a-f]{40}_sessionTemp/, '@@sessionTemp@@')
        
        // if it's a POST we need to store the data in a separate file
        if (array[index].method.indexOf("POST")!=-1) {
            contentDisposition = array[index].data[0];
        	
            // generate random header
            var text = "WebKitFormBoundary";
            for (var i = 0; i &lt; 16; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            WDS.log.info("boundary name: " + text);
            
            // generate a post file
            contentTypeShort = text;
            postFile = new java.io.File(fileDir + "/" + contentTypeShort);
            WDS.log.info("writing post data to: " + postFile.getAbsolutePath());
            if (array[index].type === "string") {
                data = array[index].data;
                WDS.log.info("post data: " + data);
                lineAsList = new java.util.ArrayList();
        		 lineAsList.add(data);
       		 org.apache.commons.io.FileUtils.writeLines(postFile, lineAsList, false);
            } else {
            	if (array[index].data.length &gt; 2) {
            		WDS.log.info("complex multipart");
            	 	// complex multipart
            	 	for(var dIndex = 0; dIndex&lt;array[index].data.length; dIndex++) {
            	 		 dataType = array[index].data[dIndex][0];
            	 		 dataValue = array[index].data[dIndex][1];
		                WDS.log.info("post data: " + dataValue);
		                org.apache.commons.io.FileUtils.write(postFile, "------"+text+"\r\n", "UTF-8", true);
		                org.apache.commons.io.FileUtils.write(postFile,"Content-Disposition: form-data; name=\""+dataType+"\"\r\n\r\n", "UTF-8", true);
		                org.apache.commons.io.FileUtils.write(postFile, dataValue + "\r\n", "UTF-8", true);
            	 	}
	                org.apache.commons.io.FileUtils.write(postFile, "------"+text+"--\r\n", "UTF-8", true);
            	 } else {
            	 	 WDS.log.info("simple multipart");
	                contentDisposition = array[index].data[0][0];
	                data = array[index].data[0][1];
	                WDS.log.info("post data: " + data);
	                org.apache.commons.io.FileUtils.write(postFile, "------"+text+"\r\n", "UTF-8", false);
	                org.apache.commons.io.FileUtils.write(postFile,"Content-Disposition: form-data; name=\""+contentDisposition+"\"\r\n\r\n", "UTF-8", true);
	                org.apache.commons.io.FileUtils.write(postFile, data + "\r\n", "UTF-8", true);
	                org.apache.commons.io.FileUtils.write(postFile, "------"+text+"--\r\n", "UTF-8", true);
            	 }
            }
        	// write tab file
        	urlToWrite = "post_file=" + text + ";" + urlToWrite;
        	
        }
        //WDS.vars.put("requests_" + (index-1),array[index])
        dashboardIdFile = new java.io.File(fileDir + "/" + "tab_000");
        WDS.log.info("writing to file: " + dashboardIdFile.getAbsolutePath())
        lineAsList = new java.util.ArrayList();
        lineAsList.add(urlToWrite);
        org.apache.commons.io.FileUtils.writeLines(dashboardIdFile, lineAsList, index&gt;0);
    }
    
    WDS.log.info("step 7")
    WDS.browser.executeScript( 'delete sessionStorage.datasetCalls;')
}catch(e){
    WDS.log.error("error " + e);  
    WDS.sampleResult.setSuccessful(false);
    WDS.sampleResult.setResponseMessage(e.message);
}

WDS.log.info("************end of Loading dashboard")


WDS.sampleResult.sampleEnd()</stringProp>
                      <stringProp name="WebDriverSampler.parameters">${serverName} ${serverPort} ${currentDashboardName_enc} ${actionNames_matchNr} ${relDashboardDir_enc} ${expectedRequestCount}</stringProp>
                      <stringProp name="WebDriverSampler.language">javascript</stringProp>
                    </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
                    <hashTree />
                    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Reset actionCount">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put("actionCount","0");</stringProp>
                    </JSR223Sampler>
                    <hashTree />
                    <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname=" ForEach action in actions (tabs)">
                      <stringProp name="ForeachController.inputVal">actionNames</stringProp>
                      <stringProp name="ForeachController.returnVal">actionName</stringProp>
                      <boolProp name="ForeachController.useSeparator">true</boolProp>
                      <stringProp name="ForeachController.startIndex">0</stringProp>
                      <stringProp name="ForeachController.endIndex">${actionNames_matchNr}</stringProp>
                    </ForeachController>
                    <hashTree>
                      <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ return item">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">return vars.get("item");</stringProp>
                      </JSR223Sampler>
                      <hashTree>
                        <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get tabDetails">
                          <stringProp name="JSONPostProcessor.referenceNames">tabDetails</stringProp>
                          <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[${actionCount}]</stringProp>
                          <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                        </JSONPostProcessor>
                        <hashTree />
                        <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ get tabDatachecks">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters">tabDetails datachecks tabDatachecks</stringProp>
                          <stringProp name="filename" />
                          <stringProp name="cacheKey">true</stringProp>
                          <stringProp name="script">import groovy.json.JsonSlurper

itemVarName = args[0]
itemDatacheckKeyName = args[1]
datacheckVariableName = args[2]

item = new JsonSlurper().parseText(vars.get(itemVarName))
datachecks = item[itemDatacheckKeyName]

// if it's a map then we have specific datachecks per version of product
if (datachecks instanceof groovy.json.internal.LazyMap) {

	// must treat datachecks as a multiversion map
     datachecks_mv = datachecks

     // sort the release versions available but skip "default"
	sortedListOfDefinedVersions = []
	for(key in datachecks_mv.keySet()) {
		if ("default".equals(key)) continue // skip
		
		// only care about release version
		key_releaseVersion = key
		sortedListOfDefinedVersions.add(Integer.parseInt(key_releaseVersion.minus(".").minus(".")))
	}
	sortedListOfDefinedVersions = sortedListOfDefinedVersions.sort()

	currentCandidate = 0
	// iterate over sorted list
	for(key in sortedListOfDefinedVersions) {
		
		// looking for lowest key that's &gt;= the release
		if (Integer.parseInt(vars.get("productVerKey").toString()) &gt;= key &amp;&amp; key &gt; currentCandidate) {
			currentCandidate = key
			datachecks = datachecks_mv[key_releaseVersion.toString()]
			//log.info("PRODUCT COMPARISON " + vars.get("productVerKey").toString() + " : " + key.toString() + " : " + currentCandidate.toString() + " : " + key_releaseVersion.toString())
		} else {
			// since it's a sorted list, no point in searching further
			break;
		}
	}
	if (currentCandidate == 0) {
		// no newer candidate found use default
		datachecks = datachecks_mv["default"]
	}
}

// create jmeter friendly array variable
datacheckCount = 0
for(datacheck in datachecks) {
	datacheckCount++
	vars.put(datacheckVariableName + "_" + datacheckCount, datacheck.toString())
	vars.put(datacheckVariableName + "_matchNr", String.valueOf(datacheckCount))
}
</stringProp>
                        </JSR223PostProcessor>
                        <hashTree />
                        <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get suggestions count for this tab">
                          <stringProp name="JSONPostProcessor.referenceNames">suggestions</stringProp>
                          <stringProp name="JSONPostProcessor.jsonPathExprs">$.suggestions</stringProp>
                          <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                          <stringProp name="JSONPostProcessor.defaultValues">NONE</stringProp>
                          <stringProp name="Sample.scope">variable</stringProp>
                          <stringProp name="Scope.variable">tabDetails</stringProp>
                        </JSONPostProcessor>
                        <hashTree />
                        <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ get expectedRequestCount">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters" />
                          <stringProp name="filename" />
                          <stringProp name="cacheKey">true</stringProp>
                          <stringProp name="script">datasetsRequestCount = Integer.parseInt(vars.get("tabDatachecks_matchNr"));

// default use the datacheck count as the expected request count
expectedRequestCount = datasetsRequestCount;

// endor has suggestions requests for most widgets that affects the overall request count	
suggestions = vars.get("suggestions");

if ("NONE".equals(suggestions)) {
	// if there isn't a count defined in the scenarios file, assume # of suggestsions call == # widgets
	expectedRequestCount = expectedRequestCount * 2;
} else {
	// if a suggestions count is provided then use it
	expectedRequestCount = expectedRequestCount + Integer.parseInt(suggestions);	
}

vars.put("expectedRequestCount", String.valueOf(expectedRequestCount));</stringProp>
                        </JSR223PostProcessor>
                        <hashTree />
                      </hashTree>
                      <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ encode action name vars">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">//vars may not contain spaces when used in webdriver
vars.put("actionName_enc", vars.get("actionName").replaceAll(" ","%20"));</stringProp>
                      </JSR223Sampler>
                      <hashTree />
                      <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ counter">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">actionCount = Integer.parseInt(vars.get("actionCount"));
actionCount = actionCount + 1;
vars.put("actionCount", String.valueOf(actionCount));</stringProp>
                      </JSR223Sampler>
                      <hashTree />
                      <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler enabled="true" guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="/ Click tab_${actionNames_matchNr}_${actionCount}">
                        <stringProp name="WebDriverSampler.script">var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var wait = new support_ui.WebDriverWait(WDS.browser, 10)
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var javaLang= JavaImporter(java.lang.Thread);


WDS.sampleResult.sampleStart()
var actionName = WDS.args[3].replace(/%20/g, ' ')

var selector;
var xpathSelector = '//div[@data-tid][. = "'+ actionName +'"]'
selector = pkg.By.xpath(xpathSelector);

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(selector))
   
WDS.log.info("clicking on tab '" + actionName + "'")
var tab;
var driver= WDS.browser
var tabsCount = WDS.args[4]
var currentTabNumber = WDS.args[5]

try{

    tab = driver.findElement(selector)
}catch(e){
    WDS.log.error("error locating element" + e);  
}

try{
//tab.click()
WDS.browser.executeScript('document.evaluate(".//div[@class=\'ba-common-tabList__label\']/span[text()=\'' + actionName + '\']", document).iterateNext().click()')
WDS.log.info ("***********************************_clicked on tab");
WDS.log.info ("***********************************_number of tabs in the dashboard" + tabsCount );
 

for (var i =0;i&lt;12;i++) {
     // exit when we have our expected recordings
     if (WDS.browser.executeScript( 'return typeof sessionStorage.datasetCalls != "undefined"')) {
       WDS.log.info("**************************************datasetCalls not undefined");
       javaLang.Thread.sleep(500)
       var requestsRecorded = WDS.browser.executeScript( 'return JSON.parse(sessionStorage.datasetCalls).length');
       WDS.log.info("**************************************datasetCalls.length is " + requestsRecorded + " expected is " + WDS.args[7]);
       if (requestsRecorded == WDS.args[7]) {
           WDS.log.info("**************************************request calls match expected, exiting");
           break;
       }
     }
     javaLang.Thread.sleep(5000);
	WDS.log.info("**************************************current Tab clicking outside of the loop " +currentTabNumber );
}

 WDS.log.info("step 6")
    fileDir = WDS.args[6].replace(/%20/g, ' ')
    urlPrefix = "/bi/";
    
    var array = WDS.browser.executeScript( 'return JSON.parse(sessionStorage.datasetCalls);')
    WDS.log.info("array is " + array);
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    for (var index = 0; index&lt;array.length;index++) {
        WDS.log.info("open object returned: " + array[index].method)
        WDS.log.info("open object returned: " + array[index].url)
        WDS.log.info("open object returned: " + array[index].data)
        urlToWrite = urlPrefix + array[index].url.replace(/i[0-9A-F]{32}/i, '@@dataset_id@@')
        //urlToWrite = urlPrefix + array[index].url.replace(/[0-9a-f]{40}_sessionTemp/, '@@sessionTemp@@')
        
        if (array[index].method.indexOf("POST")!=-1) {
            contentDisposition = array[index].data[0];
            
            // generate random header
            var text = "WebKitFormBoundary";
            for (var i = 0; i &lt; 16; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            WDS.log.info("boundary name: " + text);
            
            // generate a post file
            contentTypeShort = text;
            postFile = new java.io.File(fileDir + "/" + contentTypeShort);
            WDS.log.info("writing post data to: " + postFile.getAbsolutePath());
            if (array[index].type === "string") {
                data = array[index].data;
                WDS.log.info("post data: " + data);
                lineAsList = new java.util.ArrayList();
        		 lineAsList.add(data);
       		 org.apache.commons.io.FileUtils.writeLines(postFile, lineAsList, false);
            } else {
            	if (array[index].data.length &gt; 2) {
            		WDS.log.info("complex multipart");
            	 	// complex multipart
            	 	for(var dIndex = 0; dIndex&lt;array[index].data.length; dIndex++) {
            	 		 dataType = array[index].data[dIndex][0];
            	 		 dataValue = array[index].data[dIndex][1];
		                WDS.log.info("post data: " + dataValue);
		                org.apache.commons.io.FileUtils.write(postFile, "------"+text+"\r\n", "UTF-8", true);
		                org.apache.commons.io.FileUtils.write(postFile,"Content-Disposition: form-data; name=\""+dataType+"\"\r\n\r\n", "UTF-8", true);
		                org.apache.commons.io.FileUtils.write(postFile, dataValue + "\r\n", "UTF-8", true);
            	 	}
	                org.apache.commons.io.FileUtils.write(postFile, "------"+text+"--\r\n", "UTF-8", true);
            	 } else {
            	 	 WDS.log.info("simple multipart");
	                contentDisposition = array[index].data[0][0];
	                data = array[index].data[0][1];
	                WDS.log.info("post data: " + data);
	                org.apache.commons.io.FileUtils.write(postFile, "------"+text+"\r\n", "UTF-8", false);
	                org.apache.commons.io.FileUtils.write(postFile,"Content-Disposition: form-data; name=\""+contentDisposition+"\"\r\n\r\n", "UTF-8", true);
	                org.apache.commons.io.FileUtils.write(postFile, data + "\r\n", "UTF-8", true);
	                org.apache.commons.io.FileUtils.write(postFile, "------"+text+"--\r\n", "UTF-8", true);
            	 }
            }
        	// write tab file
        	urlToWrite = "post_file=" + text + ";" + urlToWrite;
        	
        }
        //WDS.vars.put("requests_" + (index-1),array[index])
        dashboardIdFile = new java.io.File(fileDir + "/" + actionName);
        WDS.log.info("writing to file: " + dashboardIdFile.getAbsolutePath())
        lineAsList = new java.util.ArrayList();
        lineAsList.add(urlToWrite);
        org.apache.commons.io.FileUtils.writeLines(dashboardIdFile, lineAsList, index&gt;0);
    }
    
    WDS.log.info("step 7")
    // clear the recorded calls in the browser
    WDS.browser.executeScript( 'delete sessionStorage.datasetCalls;')
}catch(e){
    WDS.log.error("error " + e);
    WDS.sampleResult.setSuccessful(false);
    WDS.sampleResult.setResponseMessage(e.message);
}

WDS.sampleResult.sampleEnd()
</stringProp>
                        <stringProp name="WebDriverSampler.parameters">${serverName} ${serverPort} ${currentDashboardName_enc} ${actionName_enc} ${actionNames_matchNr} ${actionCount} ${relDashboardDir_enc} ${expectedRequestCount}</stringProp>
                        <stringProp name="WebDriverSampler.language">javascript</stringProp>
                      </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
                      <hashTree />
                    </hashTree>
                    <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler enabled="true" guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="/ click save">
                      <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var navPathSelector = 'button[id="com.ibm.bi.dashboard.saveMenu.default"]'

WDS.log.info("save dashboard")
// click the save button
dashboard = WDS.browser.findElement(pkg.By.cssSelector(navPathSelector))
dashboard.click()</stringProp>
                      <stringProp name="WebDriverSampler.parameters" />
                      <stringProp name="WebDriverSampler.language">javascript</stringProp>
                    </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
                    <hashTree />
                    <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler enabled="true" guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="/ Log out">
                      <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)

WDS.sampleResult.sampleStart()
WDS.log.info("logging out")
WDS.browser.findElement(pkg.By.cssSelector("[class='appview paneColumn'] [id='com.ibm.bi.glass.common.personalMenu']")).click()
WDS.browser.findElement(pkg.By.cssSelector("[class*='com.ibm.bi.glass.common.logout']")).click()
WDS.sampleResult.sampleEnd()
</stringProp>
                      <stringProp name="WebDriverSampler.parameters" />
                      <stringProp name="WebDriverSampler.language">javascript</stringProp>
                    </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
                    <hashTree>
                      <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion (ignore failureS)">
                        <collectionProp name="Asserion.test_strings" />
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">true</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.custom_message" />
                      </ResponseAssertion>
                      <hashTree />
                      <BeanShellPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="wait for logout">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="script">Thread.sleep(2000);</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree />
                    </hashTree>
                  </hashTree>
                </hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Clear dashboardNames var">
                  <stringProp name="TestPlan.comments">Otherwise, if the next scenario has fewer items than the present one, the remaining items from this scenairo will be used in the next scenario</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">for(int i = 0; i &lt; Integer.valueOf(vars.get("dashboardNames_matchNr")); i ++){
	vars.remove("dashboardNames_" + (i + 1));	
}
vars.remove("previousDashboardID")</stringProp>
                </JSR223Sampler>
                <hashTree />
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Compare new or changed files to queryspec file baselines">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.File;

File folder = new File(vars.get("data_dir"));
File[] listOfFiles = folder.listFiles();
boolean pass = false;

for(File f : listOfFiles){
	//consider any new files a pass
	if(vars.get(f.getName()) == null){
		pass = true;
	}
	//consider any modified queryspec files a pass	
	 if(vars.get(f.getName()) != String.valueOf(f.lastModified())){
		pass = true;
	}
}

if(!pass){
	log.warn("HAR generation step was run but no changes were noticed in the queryspec directory");
}
</stringProp>
          </JSR223Sampler>
          <hashTree />
        </hashTree>
      </hashTree>
      <ThreadGroup enabled="true" guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="launch objects">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp elementType="LoopController" enabled="true" guiclass="LoopControlPanel" name="ThreadGroup.main_controller" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${USERS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${USERS}/5</stringProp>
        <longProp name="ThreadGroup.start_time">1453146790000</longProp>
        <longProp name="ThreadGroup.end_time">1453146790000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration" />
        <stringProp name="ThreadGroup.delay" />
        <stringProp name="TestPlan.comments" />
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController enabled="true" guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="get test details once only" />
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="get test details" />
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get scenarioGroup">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return props.get("scenarioGroup")</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set scenario_user_index">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//scenarios_matchNr is ???
// ???This sampler selects a scenario if multiple are listed to distribute the load evenly amoung dashboards???
// ???Ie, if 9 user load and 3 scenarios (dashboards), 3 threads (users) should each run 1 of the 3 dashboards???
// ???If 3 user load and 2 scenarios, the first scenario gets run twice, but this effect should even out over large userloads???

vars.put("scenario_user_index", String.valueOf(
							ctx.getThreadNum()
							% 
							Integer.parseInt(props.get("scenarioCount"))
							)
						);
log.debug(Label + " -- scenario_user_index = " + vars.get("scenario_user_index"))</stringProp>
              </JSR223PreProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get scenario">
                <stringProp name="JSONPostProcessor.referenceNames">scenario</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.scenarios[${scenario_user_index}]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get items from scenario">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return vars.get("scenario"); //this is a bit awkward since the scenarios element being returned makes sense to be called scenario, but there is an object in the scenarios array called scenario</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get scenarioName">
                <stringProp name="JSONPostProcessor.referenceNames">scenarioName</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.scenario</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get navigation">
                <stringProp name="JSONPostProcessor.referenceNames">navigation</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.navigation</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get items">
                <stringProp name="JSONPostProcessor.referenceNames">items</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.items[*]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
            <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="isLoggedOn">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="Argument" name="loggedOn">
                  <stringProp name="Argument.name">loggedOn</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree />
          </hashTree>
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If logged on already then log off">
          <stringProp name="IfController.condition">${__groovy("${loggedOn}"=="true")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If advanced viewer">
            <stringProp name="IfController.condition">${__groovy("${type}"=="report" &amp;&amp; "${advanced_viewer}"=="true" &amp;&amp; ("${report_output_format}"=="HTML" || "${report_output_format}"=="PDF" || "${report_output_format}"=="EXCEL"))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ soap release">
              </GenericController>
            <hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/release">
          <stringProp name="IfController.condition">${__groovy("${report_release}"=="true")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="release">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="release">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:release&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;/bus:conversation&gt;&lt;/rns1:release&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="SOAPAction">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">${soapAction_rs}.session</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-UseRsConsumerMode">
                    <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Cache-Control">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Pragma">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="clear release flag">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("report_release", "false")</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If classic viewer">
            <stringProp name="IfController.condition">${__groovy("${type}"=="report" &amp;&amp; "${advanced_viewer}"=="false" &amp;&amp; ("${report_output_format}"=="interactiveReport" || !"${report_output_format}".contains("savedOutput") ))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ classic release">
              </GenericController>
            <hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/release">
          <stringProp name="IfController.condition">${__groovy("${m_sStatus}"!="fault")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="release">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ release">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="b_action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">b_action</stringProp>
                    <stringProp name="Argument.value">cognosViewer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.catchLogOnFault">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.catchLogOnFault</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.objectPermissions">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">cv.objectPermissions</stringProp>
                    <stringProp name="Argument.value">execute read setPolicy traverse write </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.responseFormat">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.responseFormat</stringProp>
                    <stringProp name="Argument.value">successfulRequest</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="m_tracking">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">m_tracking</stringProp>
                    <stringProp name="Argument.value">${m_tracking}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.action</stringProp>
                    <stringProp name="Argument.value">release</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.objectClass">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.objectClass</stringProp>
                    <stringProp name="Argument.value">report</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.primaryAction">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.primaryAction</stringProp>
                    <stringProp name="Argument.value">run</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=true&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ logoff">
            </GenericController>
          <hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="logoff">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/users/~/mrus">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/users/~/mrus</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/users/~/mrus/data">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{"id":"data","list":[{"formatedPath":"null","id":"null","defaultName":"Dummy Tile - Ignore","type":"null","owner":"null","selfUrl":"/bi/v1/objects/null","permissions":["execute","read","setPolicy","traverse","write"],"hidden":false,"disabled":false,"_timestamp":-1,"timestamp":"9999-99-99T99:99:99.999Z"}],"url":"/bi/v1/users/~/mrus/data","timestamp":"9999-99-99T99:99:99.999Z"}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/users/~/mrus/data</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/login">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/login</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="set loggedOn false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("loggedOn", "false");</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If not anonymous">
            <stringProp name="IfController.condition">${__groovy("${sessionType}"!="anonymous")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/login">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/login</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="expect 441 when auth required">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="443265130">441|401</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/ui/sso">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/ui/sso</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/perspectives/login">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ login">
          </GenericController>
        <hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="login">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include common/icp4d_login.jmx">
            </GenericController>
          <hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If ICP4D">
          <stringProp name="IfController.condition">${ICP4D}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If credentialFile">
            <stringProp name="IfController.condition">${__groovy(new File("${credentialFile}").exists())}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <CSVDataSet enabled="true" guiclass="TestBeanGUI" testclass="CSVDataSet" testname="set credentials from file">
              <stringProp name="delimiter">\t</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="filename">${credentialFile}</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">username,password</stringProp>
            </CSVDataSet>
            <hashTree />
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="login ICP4D" />
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="icp4d_connect">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"username":"${username}","password":"${password}"}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">v1/preauth/signin?context=zen</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion enabled="true" guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="message=success">
                <stringProp name="JSON_PATH">$.message</stringProp>
                <stringProp name="EXPECTED_VALUE">success</stringProp>
                <boolProp name="JSONVALIDATION">false</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get privateCloudCookie">
                <stringProp name="JSONPostProcessor.referenceNames">privateCloudCookie</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.privateCloudCookie</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set default credentials if no credentialFile">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename" />
                <stringProp name="parameters">${credentialFile}</stringProp>
                <stringProp name="script">if (args.length == 0 || !new File(args[0]).exists()) {
	vars.put("username", ${__P(username,"user${__threadNum}")})
	vars.put("password", ${__P(password,"cognos")})
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree />
            </hashTree>
            <CookieManager enabled="true" guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager">
              <collectionProp name="CookieManager.cookies">
                <elementProp elementType="Cookie" name="preloginurl" testname="preloginurl">
                  <stringProp name="Cookie.value">/</stringProp>
                  <stringProp name="Cookie.domain" />
                  <stringProp name="Cookie.path" />
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            </CookieManager>
            <hashTree />
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="log on" />
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include common/bi_connect.jmx">
              </GenericController>
            <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="connect" />
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="XSRF-TOKEN Extractor">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">XSRF-TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">XSRF-TOKEN=(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get productVersion">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productVersion</stringProp>
              <stringProp name="RegexExtractor.regex">\.productVersion":"([^"]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="format product version">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">productVersion = vars.get("productVersion")
indexOf_R = productVersion.indexOf("R")
vars.put("productVersion", productVersion.toString())

if (productVersion.contains("R")) {
	versionMajorMinor = productVersion.substring(0,indexOf_R).trim()// remove whitespace
	// some versions come with extras like the (LTS) in '11.1 R7 (LTS)' ... ingore bits after release for now
	releaseVersion = Integer.parseInt(productVersion.substring(indexOf_R + 1).find("[0-9]+"))

	vars.put("productVerFormatted", versionMajorMinor.toString() +"."+ releaseVersion.toString())
	
} else {
	vars.put("productVerFormatted", productVersion.toString())
}
//removing . from product number to create an integer value
productVersionKey=vars.get("productVerFormatted").minus(".").minus(".")
vars.put("productVerKey", productVersionKey.toString())
</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
          <ConfigTestElement enabled="true" guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path" />
            <stringProp name="TestPlan.comments">copied from top of test plan</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">8</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">nothingshouldmatchthis</stringProp>
            <stringProp name="HTTPSampler.proxyHost">${PROXY_HOST}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${PROXY_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </ConfigTestElement>
          <hashTree />
        </hashTree>
      </hashTree>
    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/login">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/login</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="either 441 or 200 expected">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="961021088">441|200|401</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get cafContextId">
                <stringProp name="JSONPostProcessor.referenceNames">cafContextId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.cafContextId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
                <stringProp name="JSONPostProcessor.defaultValues">auth_required</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="set sessionType">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${cafContextId}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if ("auth_required" == args[0]) {
	vars.put("sessionType", "auth")
} else {
	vars.put("sessionType", "anonymous")
}
</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If auth_required">
              <stringProp name="IfController.condition">${__groovy("${cafContextId}"=="auth_required")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include common/credential.jmx">
                </GenericController>
              <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="credential" />
        <hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If default users">
            <stringProp name="IfController.condition">${__groovy("${credentialFile}"=="")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set credentials">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__P(usernamePrefix,user)}${__threadNum} cognos ${namespace}</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("username", args[0])
vars.put("password", args[1])
vars.put("namespace", args[2])</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If NOT default users">
            <stringProp name="IfController.condition">${__groovy("${credentialFile}"!="")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <CSVDataSet enabled="true" guiclass="TestBeanGUI" testclass="CSVDataSet" testname="/ set credentials">
              <stringProp name="delimiter">\t</stringProp>
              <stringProp name="fileEncoding" />
              <stringProp name="filename">${credentialFile}</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">username,password,namespace,groupTypes</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
            </CSVDataSet>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/login">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{"parameters":[{"name":"h_CAM_action","value":"logonAs"}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/login</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="either 441 or 200 expected">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="961021088">441|200|401</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/login">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{"parameters":[{"name":"CAMNamespace","value":"${namespace}" },{"name":"h_CAM_action","value":"logonAs"},{"name":"CAMUsername","value":"${username}"},{"name":"CAMPassword","value":"${password}"}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/login</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Cache-Control">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Pragma">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get cafContextId">
                  <stringProp name="JSONPostProcessor.referenceNames">cafContextId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.cafContextId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/perspectives/home">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/home</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/?perspective=home">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/?perspective=home</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="set loggedOn true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("loggedOn", "true");</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/users/~/mrus">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/users/~/mrus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/notifications">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="unread-only">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">unread-only</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="max">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">max</stringProp>
                    <stringProp name="Argument.value">20</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="offset">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">offset</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/notifications</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ nav">
          </GenericController>
        <hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}navigate">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ prepare folder variables">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// reset the folder_counter
vars.put("folder_counter", "1");

navFromJson = vars.get("navigation")
return navFromJson;

//if (navFromJson.length() &gt; 0) {
//	String [] navigation = navFromJson.split(",");
//	String fullNavigation = "";
//	int navCount = 1;
//	for(String nav: navigation) {
//		fullNavigation += nav +" ";
//		vars.put("folders_" + navCount, nav);
//		navCount = navCount + 1;
//	}
//	log.debug("full navigation is: " + fullNavigation + " with length of " + navigation.length);
//}


</stringProp>
          </JSR223Sampler>
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get folders">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">folders</stringProp>
              <stringProp name="RegexExtractor.regex">([^,]{1,})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If folders to nav">
            <stringProp name="IfController.condition">${__groovy(${folders_matchNr} &gt; 0)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="get public folders once only" />
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get permissions on public folders">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">permissions</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.public_folders</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get public_folders">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.public_folders/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get folder_id">
                  <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${folders_1}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each folder in navigation">
              <stringProp name="ForeachController.inputVal">folders</stringProp>
              <stringProp name="ForeachController.returnVal">folder</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increase folder_counter">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${__V(folder_${folder_counter})}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">folder_counter = Integer.parseInt(vars.get("folder_counter")) + 1
vars.put("folder_counter", String.valueOf(folder_counter))
log.debug(Label + " folder is ${folder} and folder_counter is " + vars.get("folder_counter") + " next is " + args[0])
</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">permissions</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ navigate">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set last_folder_id">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">folder_id = vars.get("folder_id")
if (folder_id != null) {
	vars.put("last_folder_id", folder_id)
}
</stringProp>
                </JSR223PreProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get folder_id">
                  <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${__V(folders_${folder_counter})}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ save navigation_response">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">vars.put("navigation_response",prev.getResponseDataAsString());</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set durationStartTime and threadIterationCount if not set">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">durationStartTime = vars.get("durationStartTime")
if (durationStartTime == null) {
	vars.put("durationStartTime", Long.toString(System.currentTimeMillis()))
	log.info("initiated durationStartTime as " + vars.get("durationStartTime"))
}

threadIterationCount = vars.get("threadIterationCount")
if (threadIterationCount == null) {
	vars.put("threadIterationCount", "0")
	log.info("initiated threadIterationCount as 0")
}
</stringProp>
        </JSR223Sampler>
        <hashTree />
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="main loop">
          <stringProp name="WhileController.condition">${__groovy(("${__P(duration_mode)}"=="true" &amp;&amp; (System.currentTimeMillis() - Long.parseLong(vars.get("durationStartTime")) &lt; Long.parseLong(vars.get("DURATION")) * 1000 )) || ("${__P(iteration_mode)}"=="true" &amp;&amp; (Long.parseLong(vars.get("threadIterationCount")) &lt; Long.parseLong(vars.get("ITERATION")))) )}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increase threadIterationCount">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">threadIterationCount = Long.parseLong(vars.get("threadIterationCount"))
vars.put("threadIterationCount", Long.toString(threadIterationCount + 1))</stringProp>
          </JSR223Sampler>
          <hashTree />
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ launch">
            </GenericController>
          <hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each item in scenario">
          <stringProp name="ForeachController.inputVal">items</stringProp>
          <stringProp name="ForeachController.returnVal">item</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
          <stringProp name="ForeachController.startIndex">0</stringProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item type">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("item");</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get type">
              <stringProp name="JSONPostProcessor.referenceNames">type</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.type</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get setup">
              <stringProp name="JSONPostProcessor.referenceNames">setup</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.setup</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get item_navigation">
              <stringProp name="JSONPostProcessor.referenceNames">item_navigation</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.navigation</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="JSONPostProcessor.defaultValues">NO_NAVIGATION</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="if non-setup step or setup step and first">
            <stringProp name="IfController.condition">${__groovy((!${setup}) || (${setup} &amp;&amp; "${tr_prefix}" == "first_"))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If nav for item">
              <stringProp name="IfController.condition">${__groovy("${item_navigation}"!="NO_NAVIGATION")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set navigation">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("navigation", vars.get("item_navigation"))</stringProp>
              </JSR223Sampler>
              <hashTree />
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ nav">
                </GenericController>
              <hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}navigate">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ prepare folder variables">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// reset the folder_counter
vars.put("folder_counter", "1");

navFromJson = vars.get("navigation")
return navFromJson;

//if (navFromJson.length() &gt; 0) {
//	String [] navigation = navFromJson.split(",");
//	String fullNavigation = "";
//	int navCount = 1;
//	for(String nav: navigation) {
//		fullNavigation += nav +" ";
//		vars.put("folders_" + navCount, nav);
//		navCount = navCount + 1;
//	}
//	log.debug("full navigation is: " + fullNavigation + " with length of " + navigation.length);
//}


</stringProp>
          </JSR223Sampler>
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get folders">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">folders</stringProp>
              <stringProp name="RegexExtractor.regex">([^,]{1,})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If folders to nav">
            <stringProp name="IfController.condition">${__groovy(${folders_matchNr} &gt; 0)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="get public folders once only" />
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get permissions on public folders">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">permissions</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.public_folders</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get public_folders">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.public_folders/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get folder_id">
                  <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${folders_1}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each folder in navigation">
              <stringProp name="ForeachController.inputVal">folders</stringProp>
              <stringProp name="ForeachController.returnVal">folder</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increase folder_counter">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${__V(folder_${folder_counter})}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">folder_counter = Integer.parseInt(vars.get("folder_counter")) + 1
vars.put("folder_counter", String.valueOf(folder_counter))
log.debug(Label + " folder is ${folder} and folder_counter is " + vars.get("folder_counter") + " next is " + args[0])
</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">permissions</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ navigate">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set last_folder_id">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">folder_id = vars.get("folder_id")
if (folder_id != null) {
	vars.put("last_folder_id", folder_id)
}
</stringProp>
                </JSR223PreProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get folder_id">
                  <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${__V(folders_${folder_counter})}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ save navigation_response">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">vars.put("navigation_response",prev.getResponseDataAsString());</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If report">
              <stringProp name="IfController.condition">${__groovy("${type}"=="report")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include authoring/runReport/run_reports.jmx">
                </GenericController>
              <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ remove previous report_actions">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">actionCountStr = vars.get("report_actions_matchNr");
if (actionCountStr != null ) {
	int actionCount = Integer.parseInt(actionCountStr);
	while(actionCount &gt; 0) {
		vars.remove("report_actions_" + actionCount);
		vars.remove("report_actions_datacheck_" + actionCount);
		vars.remove("report_actions_expected_chart_count_" + actionCount);
		actionCount = actionCount - 1;
	}
	vars.remove("report_actions");
	vars.remove("report_actions_matchNr");
}
</stringProp>
        </JSR223Sampler>
        <hashTree />
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get report details">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">return vars.get("item");</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_name">
            <stringProp name="JSONPostProcessor.referenceNames">report_name</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_prompt">
            <stringProp name="JSONPostProcessor.referenceNames">report_prompt</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.prompt</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers" />
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_datacheck">
            <stringProp name="JSONPostProcessor.referenceNames">report_datacheck</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.datacheck</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers" />
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_expected_chart_count">
            <stringProp name="JSONPostProcessor.referenceNames">report_expected_chart_count</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.chartcount</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get authoring_perspective">
            <stringProp name="JSONPostProcessor.referenceNames">authoring_perspective</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.advancedViewer</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers" />
            <stringProp name="JSONPostProcessor.defaultValues">${advanced_viewer}</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_id from navigation_response varilable">
            <stringProp name="JSONPostProcessor.referenceNames">report_id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${report_name}")].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">navigation_response</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_actions">
            <stringProp name="JSONPostProcessor.referenceNames">report_actions</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[*].type</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_actions_prompt">
            <stringProp name="JSONPostProcessor.referenceNames">report_actions_prompt</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[*].prompt</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_actions_datacheck">
            <stringProp name="JSONPostProcessor.referenceNames">report_actions_datacheck</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[*].datacheck</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_actions_expected_chart_count">
            <stringProp name="JSONPostProcessor.referenceNames">report_actions_expected_chart_count</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[*].chartcount</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="has prompt?">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
if(vars.get("report_prompt").isEmpty()) {
	vars.put("hasPrompt", "false");
} else {
	vars.put("hasPrompt", "true");
}
log.debug("hasPrompt: " + vars.get("hasPrompt"));</stringProp>
          </JSR223PostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_output_format">
            <stringProp name="JSONPostProcessor.referenceNames">report_output_format</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.report_output_format</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="TestPlan.comments">defaults to HTML</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">HTML</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get prompt_mode">
            <stringProp name="JSONPostProcessor.referenceNames">prompt_mode</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.mode</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get prompt_type">
            <stringProp name="JSONPostProcessor.referenceNames">prompt_type</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.prompt[0].type</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_actions_drill-item">
            <stringProp name="JSONPostProcessor.referenceNames">report_action_drill-item</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].drill-item</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_actions_data-column">
            <stringProp name="JSONPostProcessor.referenceNames">report_action_data-column</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].data-column</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_actions_report_name">
            <stringProp name="JSONPostProcessor.referenceNames">report_action_report_name</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[0].name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree />
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="if advanced_viewer">
          <stringProp name="IfController.condition">${__groovy("${authoring_perspective}"=="true")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If HTML">
            <stringProp name="IfController.condition">${__groovy("${report_output_format}"=="HTML")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ runReport">
              </GenericController>
            <hashTree>
        <Arguments enabled="false" guiclass="ArgumentsPanel" testclass="Arguments" testname="manual inputs for debugging - normally disabled, do not delete">
          <collectionProp name="Arguments.arguments">
            <elementProp elementType="Argument" name="url_base">
              <stringProp name="Argument.name">url_base</stringProp>
              <stringProp name="Argument.value">http://${serverName}:${serverPort}${urlPath}/bi</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">mostly for the referer header value</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_id">
              <stringProp name="Argument.name">report_id</stringProp>
              <stringProp name="Argument.value">iB8B0EDF0EDCA442D86FF534AE66CA5B6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">ID from the properties of the report</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_name">
              <stringProp name="Argument.name">report_name</stringProp>
              <stringProp name="Argument.value">master_detail</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_output_format">
              <stringProp name="Argument.name">report_output_format</stringProp>
              <stringProp name="Argument.value">HTML</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_datacheck">
              <stringProp name="Argument.name">report_datacheck</stringProp>
              <stringProp name="Argument.value">14,111,228.67</stringProp>
              <stringProp name="Argument.desc">something that only appears in the report output, indicating a successful run</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_expected_chart_count">
              <stringProp name="Argument.name">report_expected_chart_count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">total number of expected charts in the report output</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_actions_1">
              <stringProp name="Argument.name">report_actions_1</stringProp>
              <stringProp name="Argument.value">nextPage</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_actions_datacheck_1">
              <stringProp name="Argument.name">report_actions_datacheck_1</stringProp>
              <stringProp name="Argument.value">1,969,460.13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_actions_2">
              <stringProp name="Argument.name">report_actions_2</stringProp>
              <stringProp name="Argument.value">nextPage</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_actions_datacheck_2">
              <stringProp name="Argument.name">report_actions_datacheck_2</stringProp>
              <stringProp name="Argument.value">516,972.39</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="tr_prefix">
              <stringProp name="Argument.name">tr_prefix</stringProp>
              <stringProp name="Argument.value" />
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">used for things like "first_" for identifying cold cache requests</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">This "User Defined Variables" test element should be disabled for normal test execution. It contains a list of all inputs required to run this fragment. </stringProp>
        </Arguments>
        <hashTree />
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="run report in full interactivity" />
        <hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}run_${report_name}">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="report execution config">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="Argument" name="asyncTimeout">
                  <stringProp name="Argument.name">asyncTimeout</stringProp>
                  <stringProp name="Argument.value">300</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp elementType="Argument" name="attachmentOption">
                  <stringProp name="Argument.name">attachmentOption</stringProp>
                  <stringProp name="Argument.value">&lt;item xsi:type="bus:asynchOptionEncoding"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;&lt;/item&gt;</stringProp>
                  <stringProp name="Argument.desc">this param is used to enable the report output to be a multipart attachment to the runspec response</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp elementType="Argument" name="attachmentOption_orig">
                  <stringProp name="Argument.name">attachmentOption_orig</stringProp>
                  <stringProp name="Argument.value">&lt;item xsi:type="bus:asynchOptionEncoding"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;&lt;/item&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp elementType="Argument" name="soapAction_rs">
                  <stringProp name="Argument.name">soapAction_rs</stringProp>
                  <stringProp name="Argument.value">http://host.com/xmlns/prod/cognos/reportService/${__P(reportServiceSoapVersion,201703)}/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree />
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ generate AuthToken">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.auth.AuthenticityToken;
import com.ibm.bi.auth.BiBase64;
import java.io.ByteArrayOutputStream;
log.debug("usersessionid=" + vars.get("COOKIE_usersessionid"));	
authToken = AuthenticityToken.generateToken(vars.get("COOKIE_usersessionid"));
log.debug("authToken=" + authToken);
vars.put("authToken", authToken);</stringProp>
            </JSR223Sampler>
            <hashTree />
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report_search path from field properties">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                    <stringProp name="Argument.value">defaultOutputFormat</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">defaultName,type,ancestors,permissions,disabled,hidden,owner,base,defaultScreenTip,iconURI,tags</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=authoring&amp;context=%7B%22perspective%22%3A%22authoring%22%2C%22content%22%3A%7B%22module%22%3A%22bi%2Fauthoring%2FrsContentView%22%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22isViewer%22%3Atrue%2C%22isNewFromModule%22%3Afalse%2C%22isNewFromPackage%22%3Afalse%2C%22cmProperties%22%3A%7B%22runInAdvancedViewer%22%3Atrue%2C%22executionPrompt%22%3Atrue%2C%22permissions%22%3A%5B%22execute%22%2C%22read%22%2C%22setPolicy%22%2C%22traverse%22%2C%22write%22%5D%2C%22modificationTime%22%3A%222016-01-05T19%3A47%3A58.420Z%22%2C%22options%22%3Anull%2C%22_meta%22%3A%7B%22links%22%3A%7B%22versions%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fversions%22%7D%2C%22self%22%3A%7B%22mimeType%22%3A%22application%2Fvnd.ibm.bi.report%2Bjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%22%7D%2C%22histories%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fhistories%22%7D%7D%7D%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22type%22%3A%22report%22%2C%22defaultName%22%3A%22small_nonMeasureList_html_av%22%2C%22version%22%3A2%7D%2C%22rsFinalRunOptions%22%3A%7B%22format%22%3A%22HTML%22%2C%22runInAdvancedViewer%22%3Atrue%2C%22prompt%22%3Atrue%7D%7D%7D</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_searchpath">
                <stringProp name="JSONPostProcessor.referenceNames">report_searchpath</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].searchPath</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                    <stringProp name="Argument.value">defaultDescription,executionPrompt,options,parent,routingServerGroup</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=authoring&amp;context=%7B%22perspective%22%3A%22authoring%22%2C%22content%22%3A%7B%22module%22%3A%22bi%2Fauthoring%2FrsContentView%22%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22isViewer%22%3Atrue%2C%22isNewFromModule%22%3Afalse%2C%22isNewFromPackage%22%3Afalse%2C%22cmProperties%22%3A%7B%22runInAdvancedViewer%22%3Atrue%2C%22executionPrompt%22%3Atrue%2C%22permissions%22%3A%5B%22execute%22%2C%22read%22%2C%22setPolicy%22%2C%22traverse%22%2C%22write%22%5D%2C%22modificationTime%22%3A%222016-01-05T19%3A47%3A58.420Z%22%2C%22options%22%3Anull%2C%22_meta%22%3A%7B%22links%22%3A%7B%22versions%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fversions%22%7D%2C%22self%22%3A%7B%22mimeType%22%3A%22application%2Fvnd.ibm.bi.report%2Bjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%22%7D%2C%22histories%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fhistories%22%7D%7D%7D%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22type%22%3A%22report%22%2C%22defaultName%22%3A%22small_nonMeasureList_html_av%22%2C%22version%22%3A2%7D%2C%22rsFinalRunOptions%22%3A%7B%22format%22%3A%22HTML%22%2C%22runInAdvancedViewer%22%3Atrue%2C%22prompt%22%3Atrue%7D%7D%7D</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get executionPrompt">
                <stringProp name="JSONPostProcessor.referenceNames">executionPrompt</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].executionPrompt</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
                <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If first_open">
              <stringProp name="IfController.condition">${__groovy("${tr_prefix}"=="first_")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="TestPlan.comments">Only run the perspectives request for the first opens</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ open authoring perspective">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/authoring</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset asyncTimer">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("asyncTimer", "0");
vars.put("asyncTimeNotReached", "true");
vars.put("report_sendAsync", "true");</stringProp>
            </JSR223Sampler>
            <hashTree />
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="/ ${tr_prefix}rs_runSpec_${report_name}">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="initial run request" />
              <hashTree>
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
status = status.substring(status.indexOf("&gt;") + 1)
vars.put("report_conversationStatus", status);</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="SOAPAction">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">${soapAction_rs}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-UseRsConsumerMode">
                      <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-RsCMStoreID">
                      <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                      <stringProp name="Header.value">${report_id}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If report ouput is HTML">
                  <stringProp name="IfController.condition">${__groovy("${report_output_format}"=="HTML")}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post runspecification ">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp elementType="HTTPArgument" name="">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:run&gt;&lt;bus:objectPath xsi:type="bus:searchPathSingleObject"&gt;storeID(&amp;quot;${report_id}&amp;quot;)&lt;/bus:objectPath&gt;&lt;bus:parameterValues xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"&gt;&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:genericOptionAnyURI"&gt;&lt;bus:name xsi:type="xsd:string"&gt;runOptionEnum#globalParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;&amp;lt;parameterValues xsi:type=&amp;quot;SOAP-ENC:Array&amp;quot; SOAP-ENC:arrayType=&amp;quot;bus:parameterValue[]&amp;quot; xmlns:SOAP-ENC=&amp;quot;http://schemas.xmlsoap.org/soap/encoding/&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:xs=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:bus=&amp;quot;http://developer.cognos.com/schemas/bibus/3/&amp;quot; xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&amp;gt;&amp;lt;/parameterValues&amp;gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionStringArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xsd:string[1]"&gt;&lt;item&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;${attachmentOption}&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionString"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;${executionPrompt}&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocation&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionData"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;data&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:dataEnum"&gt;runWithAllData&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionNameValueArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[]"&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;CVGateway&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:run&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree />
                </hashTree>
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ asyncLoop">
                </GenericController>
              <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="asyncLoop">
          <stringProp name="WhileController.condition">${__groovy("${report_sendAsync}"=="true")}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update asyncTimer">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int asyncTimer = Integer.parseInt(vars.get("asyncTimer"));
asyncTimer = asyncTimer + 1;
if (asyncTimer &gt;= 300) {
	log.error("async attempt limit reached");
	vars.put("report_sendAsync", "false");
	vars.put("report_asyncTimeoutReached", "true");
}
vars.put("asyncTimer", "" + asyncTimer);
</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ async wait">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:rns1="http://developer.cognos.com/schemas/reportService/1"&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:wait&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;/rns1:wait&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
status = status.substring(status.indexOf("&gt;") + 1)
vars.put("report_conversationStatus", status);</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="SOAPAction">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">${soapAction_rs}.absolute</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-UseRsConsumerMode">
                  <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-RsCMStoreID">
                  <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                  <stringProp name="Header.value">${report_id}</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ process the report output">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get("reportResponse");</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get pdf_url ">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">pdf_url</stringProp>
                  <stringProp name="RegexExtractor.regex">(\?b_action=.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">\.\.\/v1\/disp(\?[^)]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get reports_chart_urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">reports_chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">\.\.\/v1\/reports([^)]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datastore chart_urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datastore_chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">src="(\?b_action=rc.*)" name="dataStore</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">src="  ...  " name=</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get report_spec_encoded">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">report_spec_encoded</stringProp>
                  <stringProp name="RegexExtractor.regex">xsi:type="bus:specification"&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get stateData">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">stateData</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;bus:stateData xsi:type="bus:xmlEncodedXML"&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get raw_report_model_info">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">raw_report_model_info</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;modelPath ([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get report_model_path">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">report_model_path</stringProp>
                  <stringProp name="RegexExtractor.regex">&gt;(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">raw_report_model_info</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get report_model_type">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">report_model_type</stringProp>
                  <stringProp name="RegexExtractor.regex">type="([^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">package</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">raw_report_model_info</stringProp>
                </RegexExtractor>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get_drill_path">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.ibm.bi.util.ContentUtil;

drillPathStartTag = "path=\"";
drillPathEndTag = "\"&gt;&lt;bus:parameters";
drillPathInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), drillPathStartTag, drillPathEndTag);
log.debug("drillPath is: " + drillPathInnerContent);
drillPathFull = drillPathStartTag + drillPathInnerContent + drillPathEndTag;
// debug vars.put("report_DrillPath", trackingFull);
vars.put("report_DrillPath", drillPathInnerContent);
//status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
//status = status.substring(status.indexOf("&gt;") + 1)
//vars.put("report_conversationStatus", status);</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get report_searchpathID">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.ibm.bi.util.ContentUtil;

pathStartTag = "&lt;item xsi:type=\"bus:searchPathSingleObject\"&gt;storeID(\"";
pathEndTag = "\")&lt;/item&gt;&lt;item";
pathInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), pathStartTag, pathEndTag);
log.debug("searchParhID is: " + pathInnerContent);
pathFull = pathStartTag + pathInnerContent + pathEndTag;
// debug vars.put("report_DrillPath", pathFull);
vars.put("report_searchpathID", pathInnerContent);
</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get report_searchModelID">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.ibm.bi.util.ContentUtil;


report_searchpathID = vars.get("report_searchpathID");
if (report_searchpathID != null) {
	pathModelStartTag = "&lt;item xsi:type=\"bus:searchPathSingleObject\"&gt;storeID(\""+report_searchpathID+"\")&lt;/item&gt;&lt;item xsi:type=\"bus:searchPathSingleObject\"&gt;storeID(\"";
	pathModelEndTag = "\")/model[last()]";
	pathModelInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), pathModelStartTag, pathModelEndTag);
	log.debug("searchParhModelID is: " + pathModelInnerContent);
	pathModelFull = pathModelStartTag + pathModelInnerContent + pathModelEndTag;
	//debug vars.put("report_searchParhModelID", pathModelFull);
	vars.put("report_searchParhModelID", pathModelInnerContent);
}</stringProp>
                </JSR223PostProcessor>
                <hashTree />
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/datacheck and chart if no prompts">
                <stringProp name="IfController.condition">${__groovy("${hasPrompt}" == "false")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ check data and chart count">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">// log.info("Report " + vars.get("report_name") + " does not contain prompts.");
return vars.get("reportResponse");</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-505831277">${report_datacheck}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                  <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="number of charts in response is expected?">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename" />
                    <stringProp name="parameters" />
                    <stringProp name="script">def all_chart_urls = vars.get("chart_urls_matchNr").toInteger() + vars.get("reports_chart_urls_matchNr").toInteger() + vars.get("datastore_chart_urls_matchNr").toInteger();
vars.put ("all_chart_urls", all_chart_urls.toString());

if ((vars.get("report_expected_chart_count") != vars.get("all_chart_urls"))) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage("expected chart count " + vars.get("report_expected_chart_count") + " doest not match total chart count " + vars.get("all_chart_urls") + " ( png charts: " + vars.get("chart_urls_matchNr") + ", datastore charts: " + vars.get("datastore_chart_urls_matchNr") + " rc png charts: " + vars.get("reports_chart_urls_matchNr") + " )");
}</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree />
                </hashTree>
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ getCharts">
                </GenericController>
              <hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each chart_url in chart_urls">
          <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

String url = vars.get("chart_url");
if(url.endsWith(");")) {
	url = url.substring(0, url.length() - 2);
	vars.put("chart_url", url);
}

vars.put("chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1654885887">Content-Type: image/png</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each datastore_chart_url in datastore_chart_urls">
          <stringProp name="ForeachController.inputVal">datastore_chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">datastore_chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

vars.put("datastore_chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("datastore_chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${datastore_chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an application/json?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2066544187">Content-Type: application/json</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains columns?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-237625581">"columns":</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains rows?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-814722413">"rows":</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each reports_chart_url in reports_chart_urls ">
          <stringProp name="ForeachController.inputVal">reports_chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">reports_chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode reports chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

vars.put("reports_chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("reports_chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports${reports_chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1654885887">Content-Type: image/png</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ tidy variables for soap requests">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//sp = vars.get("report_searchpath");
//vars.put("report_searchpath_tidy", sp.replaceAll("'", "&amp;apos;"));

//spec = vars.get("report_spec");
//spec = spec.replaceAll("&amp;", "&amp;amp;").replaceAll("&lt;", "&amp;lt;").replaceAll("&gt;", "&amp;gt;");
//vars.put("report_spec", spec);

def tidyPath = { path -&gt; 
	log.debug(Label + " tidyPath: entry")
	new_path = vars.get(path);
	log.debug(Label + " tidyPath: path=" + new_path)
	if (new_path != null) {
		new_path = new_path.replaceAll("&amp;apos;", "'");
		log.debug(Label + " tidyPath: new_path=" + new_path)
		vars.put(path + "_tidy", new_path);
	}
}

//tidyPath("report_searchpath")
tidyPath("report_model_path")
log.debug(Label + " tidy report_model_path = '" + vars.get("report_model_path_tidy") + "'")

report_model_path_tidy = vars.get("report_model_path_tidy")
if (report_model_path_tidy.contains("model[")) {
	report_model_path_tidy = report_model_path_tidy.substring(0, report_model_path_tidy.indexOf("model["))
	
	vars.put("report_package_base_path", report_model_path_tidy)
	report_model_path_tidy = report_model_path_tidy + "model[last()]"
	vars.put("report_model_path_tidy", report_model_path_tidy)
}

</stringProp>
            </JSR223Sampler>
            <hashTree />
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="/ ${tr_prefix}getModels">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="package based">
                <stringProp name="IfController.condition">${__groovy("${report_model_type}" == "package")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get model properties">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;bus:query&gt;&lt;requests&gt;&lt;queryRequest&gt;&lt;search&gt;${report_model_path_tidy}&lt;/search&gt;&lt;options&gt;&lt;refProps xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:refProp[]"&gt;&lt;item xsi:type="bus:refProp"&gt;&lt;refPropName&gt;parent&lt;/refPropName&gt;&lt;properties xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:propEnum[]"&gt;&lt;item&gt;defaultName&lt;/item&gt;&lt;item&gt;searchPath&lt;/item&gt;&lt;item&gt;routingServerGroup&lt;/item&gt;&lt;item&gt;effectiveUserCapabilities&lt;/item&gt;&lt;item&gt;permissions&lt;/item&gt;&lt;/properties&gt;&lt;/item&gt;&lt;/refProps&gt;&lt;/options&gt;&lt;properties xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:propEnum[]"&gt;&lt;item&gt;searchPath&lt;/item&gt;&lt;item&gt;modificationTime&lt;/item&gt;&lt;item xsi:type="cm:propEnum"&gt;parent&lt;/item&gt;&lt;item xsi:type="cm:propEnum"&gt;options&lt;/item&gt;&lt;item&gt;storeID&lt;/item&gt;&lt;/properties&gt;&lt;/queryRequest&gt;&lt;queryRequest&gt;&lt;search&gt;${report_package_base_path}packageConfiguration&lt;/search&gt;&lt;properties xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:propEnum[]"&gt;&lt;item&gt;memberDisplayCountLimit&lt;/item&gt;&lt;/properties&gt;&lt;/queryRequest&gt;&lt;/requests&gt;&lt;/bus:query&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="SOAPAction">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/contentManagerService/201703/</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <CookieManager enabled="false" guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager">
                    <collectionProp name="CookieManager.cookies">
                      <elementProp elementType="Cookie" name="X-RsCMStoreID" testname="X-RsCMStoreID">
                        <stringProp name="Cookie.value">${report_id}</stringProp>
                        <stringProp name="Cookie.domain" />
                        <stringProp name="Cookie.path" />
                        <boolProp name="Cookie.secure">false</boolProp>
                        <longProp name="Cookie.expires">0</longProp>
                        <boolProp name="Cookie.path_specified">true</boolProp>
                        <boolProp name="Cookie.domain_specified">true</boolProp>
                      </elementProp>
                    </collectionProp>
                    <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                  </CookieManager>
                  <hashTree />
                </hashTree>
                <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="updateHeaderWithModelsEtags">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

if (vars.get("tr_prefix") != "first_") {	
	sampler.getHeaderManager().removeHeaderNamed("If-None-Match");
	sampler.getHeaderManager().add(new Header("If-None-Match", "\"" + vars.get("etag_info") + "\""));
}

//${__BeanShell(vars.get("metadataPaths_" + vars.get("metadataPaths_index")))}
//${__V(metadataPaths_${metadataPaths_index})}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree />
                <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="get Models" />
                <hashTree>
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getModelsEtags">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">etag_info</stringProp>
                    <stringProp name="RegexExtractor.regex">ETag: "(.*?)"</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/search_path?searchPath default package">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp elementType="HTTPArgument" name="searchPath">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${report_model_path_tidy}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">searchPath</stringProp>
                        </elementProp>
                        <elementProp elementType="HTTPArgument" name="fields">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">fields</stringProp>
                          <stringProp name="Argument.value">id,searchPath,modificationTime,defaultName,options,parent.id,parent.searchPath,parent.defaultName,parent.effectiveUserCapabilities,parent.permissions,parent.routingServerGroup</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/search_path</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="reset restAsyncLoopCount">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put("restAsyncLoopCount", "0")</stringProp>
                    </JSR223PreProcessor>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responseCode">
                      <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                      <stringProp name="RegexExtractor.refname">responseCode</stringProp>
                      <stringProp name="RegexExtractor.regex">20[02]|304</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">ERROR</stringProp>
                      <stringProp name="RegexExtractor.match_number" />
                    </RegexExtractor>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 or 304 received">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1240665063">20[02]|304</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/search_path?searchPath packageConfiguration">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp elementType="HTTPArgument" name="searchPath">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${report_package_base_path}packageConfiguration</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">searchPath</stringProp>
                        </elementProp>
                        <elementProp elementType="HTTPArgument" name="fields">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">fields</stringProp>
                          <stringProp name="Argument.value">memberDisplayCountLimit</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/search_path</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="reset restAsyncLoopCount">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put("restAsyncLoopCount", "0")</stringProp>
                    </JSR223PreProcessor>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responseCode">
                      <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                      <stringProp name="RegexExtractor.refname">responseCode</stringProp>
                      <stringProp name="RegexExtractor.regex">20[02]|304</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">ERROR</stringProp>
                      <stringProp name="RegexExtractor.match_number" />
                    </RegexExtractor>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 or 304 received">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1240665063">20[02]|304</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                  <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If responseCode==202">
                    <stringProp name="IfController.condition">${__groovy("${responseCode}"=="202")}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ restAsyncLoop">
                      </GenericController>
                    <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="While responseCode==202">
          <stringProp name="WhileController.condition">${__groovy("${responseCode}"=="202" &amp;&amp; "${responseCode}"!="ERROR")}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get conversation update">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${conversationUrl}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="get conversation details from previous response">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//pattern_loc = java.util.regex.Pattern.compile("Location: (.*)")
//pattern_xcaa = java.util.regex.Pattern.compile("X-CA-Affinity: (.*)")
prevRH = prev.getResponseHeaders()

//pattern.matcher(prevRH).find()
log.debug(Label + " -- " + prevRH)
log.debug(Label + " -- " + "responseCode: ${responseCode}")

if (prevRH.contains("X-CA-Affinity")) {
	// extract using regex match on group 0 item 0
	conversationUrl = (prevRH =~ /Location: (.*)/)[0][1]
	XCAAffinity = (prevRH =~ /X-CA-Affinity: (.*)/)[0][1]

	vars.put("conversationUrl", conversationUrl)
	vars.put("X-CA-Affinity", XCAAffinity)
	
	log.debug(Label + " -- conv: "+conversationUrl)
	log.debug(Label + " -- xcaa: "+XCAAffinity)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responsdeCode">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responseCode</stringProp>
              <stringProp name="RegexExtractor.regex">20[02]</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">ERROR</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 received">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1478545310">20[02]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="check restAsyncLoopCount">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">if ("${responseCode}" != 200) {
	loopCount = Integer.parseInt("${restAsyncLoopCount}")
	if (loopCount &gt;= 100) {
		log.error("rest async max 100 iterations reached")
		prev.setSuccessful(false)
		prev.setResponseMessage("rest async max 100 iterations reached")
	} 
	vars.put("restAsyncLoopCount", loopCount.toString())
}</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
                </hashTree>
                <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each Extra Models">
                  <stringProp name="ForeachController.inputVal">metadataPaths</stringProp>
                  <stringProp name="ForeachController.returnVal">metadataPath</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getModelsEtags">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">etag_metadataPaths_${metadataPaths_index}</stringProp>
                    <stringProp name="RegexExtractor.regex">ETag: "(.*?)"</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/search_path?searchPath default package">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp elementType="HTTPArgument" name="searchPath">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${report_model_path_tidy}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">searchPath</stringProp>
                        </elementProp>
                        <elementProp elementType="HTTPArgument" name="fields">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">fields</stringProp>
                          <stringProp name="Argument.value">id,searchPath,modificationTime,defaultName,options,parent.id,parent.searchPath,parent.defaultName,parent.effectiveUserCapabilities,parent.permissions,parent.routingServerGroup</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/search_path</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="reset restAsyncLoopCount">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put("restAsyncLoopCount", "0")</stringProp>
                    </JSR223PreProcessor>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responseCode">
                      <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                      <stringProp name="RegexExtractor.refname">responseCode</stringProp>
                      <stringProp name="RegexExtractor.regex">20[02]|304</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">ERROR</stringProp>
                      <stringProp name="RegexExtractor.match_number" />
                    </RegexExtractor>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 or 304 received">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1240665063">20[02]|304</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/search_path?searchPath default package">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp elementType="HTTPArgument" name="searchPath">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${report_package_base_path}packageConfiguration</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">searchPath</stringProp>
                        </elementProp>
                        <elementProp elementType="HTTPArgument" name="fields">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">fields</stringProp>
                          <stringProp name="Argument.value">memberDisplayCountLimit</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/search_path</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="reset restAsyncLoopCount">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put("restAsyncLoopCount", "0")</stringProp>
                    </JSR223PreProcessor>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responseCode">
                      <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                      <stringProp name="RegexExtractor.refname">responseCode</stringProp>
                      <stringProp name="RegexExtractor.regex">20[02]|304</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">ERROR</stringProp>
                      <stringProp name="RegexExtractor.match_number" />
                    </RegexExtractor>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 or 304 received">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1240665063">20[02]|304</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                  <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If responseCode==202">
                    <stringProp name="IfController.condition">${__groovy("${responseCode}"=="202")}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ restAsyncLoop">
                      </GenericController>
                    <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="While responseCode==202">
          <stringProp name="WhileController.condition">${__groovy("${responseCode}"=="202" &amp;&amp; "${responseCode}"!="ERROR")}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get conversation update">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${conversationUrl}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="get conversation details from previous response">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//pattern_loc = java.util.regex.Pattern.compile("Location: (.*)")
//pattern_xcaa = java.util.regex.Pattern.compile("X-CA-Affinity: (.*)")
prevRH = prev.getResponseHeaders()

//pattern.matcher(prevRH).find()
log.debug(Label + " -- " + prevRH)
log.debug(Label + " -- " + "responseCode: ${responseCode}")

if (prevRH.contains("X-CA-Affinity")) {
	// extract using regex match on group 0 item 0
	conversationUrl = (prevRH =~ /Location: (.*)/)[0][1]
	XCAAffinity = (prevRH =~ /X-CA-Affinity: (.*)/)[0][1]

	vars.put("conversationUrl", conversationUrl)
	vars.put("X-CA-Affinity", XCAAffinity)
	
	log.debug(Label + " -- conv: "+conversationUrl)
	log.debug(Label + " -- xcaa: "+XCAAffinity)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responsdeCode">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responseCode</stringProp>
              <stringProp name="RegexExtractor.regex">20[02]</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">ERROR</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 received">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1478545310">20[02]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="check restAsyncLoopCount">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">if ("${responseCode}" != 200) {
	loopCount = Integer.parseInt("${restAsyncLoopCount}")
	if (loopCount &gt;= 100) {
		log.error("rest async max 100 iterations reached")
		prev.setSuccessful(false)
		prev.setResponseMessage("rest async max 100 iterations reached")
	} 
	vars.put("restAsyncLoopCount", loopCount.toString())
}</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
                  <CacheManager enabled="true" guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager">
                    <boolProp name="clearEachIteration">false</boolProp>
                    <boolProp name="useExpires">true</boolProp>
                  </CacheManager>
                  <hashTree />
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="cafContextId">
                        <stringProp name="Header.name">cafContextId</stringProp>
                        <stringProp name="Header.value">${cafContextId}</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="User-Agent">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="authenticityToken">
                        <stringProp name="Header.name">authenticityToken</stringProp>
                        <stringProp name="Header.value">${authToken}</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-UseRsConsumerMode">
                        <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=authoring&amp;context=%7B%22perspective%22%3A%22authoring%22%2C%22content%22%3A%7B%22module%22%3A%22bi%2Fauthoring%2FrsContentView%22%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22isViewer%22%3Atrue%2C%22isNewFromModule%22%3Afalse%2C%22isNewFromPackage%22%3Afalse%2C%22cmProperties%22%3A%7B%22runInAdvancedViewer%22%3Atrue%2C%22executionPrompt%22%3Atrue%2C%22permissions%22%3A%5B%22execute%22%2C%22read%22%2C%22setPolicy%22%2C%22traverse%22%2C%22write%22%5D%2C%22modificationTime%22%3A%222016-01-05T19%3A47%3A58.420Z%22%2C%22options%22%3Anull%2C%22_meta%22%3A%7B%22links%22%3A%7B%22versions%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fversions%22%7D%2C%22self%22%3A%7B%22mimeType%22%3A%22application%2Fvnd.ibm.bi.report%2Bjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%22%7D%2C%22histories%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fhistories%22%7D%7D%7D%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22type%22%3A%22report%22%2C%22defaultName%22%3A%22small_nonMeasureList_html_av%22%2C%22version%22%3A2%7D%2C%22rsFinalRunOptions%22%3A%7B%22format%22%3A%22HTML%22%2C%22runInAdvancedViewer%22%3Atrue%2C%22prompt%22%3Atrue%7D%7D%7D</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-Requested-With">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                </hashTree>
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="module based">
                <stringProp name="IfController.condition">${__groovy("${report_model_type}" == "module")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get model properties">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;bus:query&gt;&lt;requests&gt;&lt;item xsi:type="bus:queryRequest"&gt;&lt;search&gt;${report_model_path_tidy}&lt;/search&gt;&lt;properties xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:propEnum[]"&gt;&lt;item&gt;storeID&lt;/item&gt;&lt;/properties&gt;&lt;/item&gt;&lt;/requests&gt;&lt;/bus:query&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="SOAPAction">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/contentManagerService/201703/</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <CookieManager enabled="false" guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager">
                    <collectionProp name="CookieManager.cookies">
                      <elementProp elementType="Cookie" name="X-RsCMStoreID" testname="X-RsCMStoreID">
                        <stringProp name="Cookie.value">${report_id}</stringProp>
                        <stringProp name="Cookie.domain" />
                        <stringProp name="Cookie.path" />
                        <boolProp name="Cookie.secure">false</boolProp>
                        <longProp name="Cookie.expires">0</longProp>
                        <boolProp name="Cookie.path_specified">true</boolProp>
                        <boolProp name="Cookie.domain_specified">true</boolProp>
                      </elementProp>
                    </collectionProp>
                    <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                  </CookieManager>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get moduleId">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">moduleId</stringProp>
                    <stringProp name="RegexExtractor.regex">cm:guid"&gt;([^&lt;]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                </hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="attributes">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">type</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">attributes</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${moduleId}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree />
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset action_counter">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename" />
            <stringProp name="parameters" />
            <stringProp name="script">vars.put("action_counter", "0");</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree />
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="run prompt">
          <stringProp name="IfController.condition">${__groovy(${hasPrompt})}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}rs_promptPage_${report_name}">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get prompt info from report reponse">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.util.ContentUtil;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;
import java.util.Random;
import com.ibm.bi.util.prompt.PromptUtil;


report_response = vars.get("reportResponse");
prompt_spec = ContentUtil.getOptional(report_response, "&lt;bus:value xsi:type=\"bus:specification\"&gt;", "&lt;/bus:value&gt;");
vars.put("prompt_spec", prompt_spec);
JsonArray prompts = new JsonStreamParser(vars.get("report_prompt")).next().getAsJsonArray();
mode = vars.get("prompt_mode")
type = vars.get("prompt_type")

PromptUtil promptUtil =  new PromptUtil(report_response, log, type, mode);
prompt_parameters = promptUtil.getPromptParameters()
vars.put("prompt_parameters", prompt_parameters);
prompt_stateData = ContentUtil.getOptional(report_response, "&lt;bus:stateData xsi:type=\"bus:xmlEncodedXML\"&gt;", "&lt;/bus:stateData&gt;");
vars.put("prompt_stateData", prompt_stateData);

prompts_parameter_values = promptUtil.callGetPromptParametersValuesFunc(prompts);

vars.put("prompts_parameter_values", prompts_parameter_values);

log.debug(prompts_parameter_values);

formFieldVars = promptUtil.generateformFieldVars(prompts);
log.debug("formFieldVars=" + formFieldVars);
vars.put("formFieldVars", formFieldVars);</stringProp>
            </JSR223Sampler>
            <hashTree />
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset asyncTimer">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("asyncTimer", "0");
vars.put("asyncTimeNotReached", "true");
vars.put("report_sendAsync", "true");</stringProp>
            </JSR223Sampler>
            <hashTree />
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ if promt type is tree">
              <stringProp name="IfController.condition">${__groovy("${prompt_type}" == "tree")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/post getPromptValues">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;
	&lt;SOAP-ENV:Header&gt;
		&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;
			&lt;bus:CAM xsi:type="bus:CAM"&gt;
				&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;
			&lt;/bus:CAM&gt;
			&lt;bus:CAF xsi:type="bus:CAF"&gt;
				&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;
			&lt;/bus:CAF&gt;
			&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;
				&lt;item&gt;
					&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;
					&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;
				&lt;/item&gt;
				&lt;item&gt;
					&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;
					&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;
				&lt;/item&gt;
			&lt;/bus:userPreferenceVars&gt;
			&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;
				&lt;item xsi:type="bus:dispatcherTransportVar"&gt;
					&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;
					&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;
				&lt;/item&gt;
			&lt;/bus:dispatcherTransportVars&gt;
		&lt;/bus:biBusHeader&gt;
	&lt;/SOAP-ENV:Header&gt;
	&lt;SOAP-ENV:Body&gt;
		&lt;rns1:getPromptValues&gt;
			&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;
				&lt;bus:name xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string"&gt;run&lt;/bus:name&gt;
				&lt;bus:objectPath xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="bus:searchPathSingleObject" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;storeID("${report_id}")&lt;/bus:objectPath&gt;
				&lt;bus:options xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="SOAP-ENC:Array" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:option[16]"&gt;
					&lt;item xsi:type="bus:asynchOptionInt"&gt;
						&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:int"&gt;5&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:asynchOptionInt"&gt;
						&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:int"&gt;30&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionStringArray"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;
						&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;
							&lt;item xsi:type="xs:string"&gt;XHTML&lt;/item&gt;
						&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:asynchOptionEncoding"&gt;
						&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;
						&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionAnyURI"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionString"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionBoolean"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:boolean"&gt;${executionPrompt}&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionAnyURI"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocation&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionData"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;data&lt;/bus:name&gt;
						&lt;bus:value xsi:type="bus:dataEnum"&gt;runWithAllData&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:genericOptionBoolean"&gt;
						&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:genericOptionBoolean"&gt;
						&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionBoolean"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionNameValueArray"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;
						&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[3]"&gt;
							&lt;item xsi:type="bus:nameValue"&gt;
								&lt;bus:name xsi:type="xs:string"&gt;CVGateway&lt;/bus:name&gt;
								&lt;bus:value xsi:type="xs:string"&gt;../v1/disp&lt;/bus:value&gt;
							&lt;/item&gt;
							&lt;item xsi:type="bus:nameValue"&gt;
								&lt;bus:name xsi:type="xs:string"&gt;renderIntermediateXML&lt;/bus:name&gt;
								&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;
							&lt;/item&gt;
							&lt;item xsi:type="bus:nameValue"&gt;
								&lt;bus:name xsi:type="xs:string"&gt;renderEnvironment&lt;/bus:name&gt;
								&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;
							&lt;/item&gt;
						&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:genericOptionBoolean"&gt;
						&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:genericOptionBoolean"&gt;
						&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionLanguageArray"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocale&lt;/bus:name&gt;
						&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;
							&lt;item xsi:type="xs:string"&gt;en-us&lt;/item&gt;
						&lt;/bus:value&gt;
					&lt;/item&gt;
				&lt;/bus:options&gt;${prompt_parameters}&lt;bus:specification xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:asynchSpecification[0]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"/&gt;
				&lt;bus:stateData xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="bus:xmlEncodedXML" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;${prompt_stateData}&lt;/bus:stateData&gt;
			&lt;/bus:conversation&gt;
			&lt;bus:parameterValues xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"&gt;${prompts_parameter_values}&lt;/bus:parameterValues&gt;
			&lt;options xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:option[]"&gt;
				&lt;item xsi:type="bus:runOptionInt"&gt;
					&lt;bus:name xsi:type="bus:runOptionEnum"&gt;skipValueCount&lt;/bus:name&gt;
					&lt;bus:value xsi:type="xsd:int"&gt;0&lt;/bus:value&gt;
				&lt;/item&gt;
				&lt;item xsi:type="bus:runOptionInt"&gt;
					&lt;bus:name xsi:type="bus:runOptionEnum"&gt;maximumValueCount&lt;/bus:name&gt;
					&lt;bus:value xsi:type="xsd:int"&gt;20&lt;/bus:value&gt;
				&lt;/item&gt;
				&lt;item xsi:type="bus:asynchOptionEncoding"&gt;
					&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;
					&lt;bus:value xsi:type="bus:encodingEnum"&gt;base64&lt;/bus:value&gt;
				&lt;/item&gt;
				&lt;item xsi:type="bus:asynchOptionInt"&gt;
					&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;
					&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;
				&lt;/item&gt;
			&lt;/options&gt;
		&lt;/rns1:getPromptValues&gt;
	&lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.ibm.bi.util.ContentUtil;
trackingStartTag = "&lt;bus:tracking xsi:type=\"bus:tracking\"&gt;";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status xsi:type=\"xs:string\"&gt;", "&lt;/bus:status&gt;");
vars.put("report_conversationStatus", status);</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="SOAPAction">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">${soapAction_rs}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-UseRsConsumerMode">
                      <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-RsCMStoreID">
                      <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                      <stringProp name="Header.value">${report_id}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ if promt type is not tree">
              <stringProp name="IfController.condition">${__groovy("${prompt_type}" != "tree")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post runspecification ">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;${formFieldVars}&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:forward&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;bus:name xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;run&lt;/bus:name&gt;&lt;bus:objectPath xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="bus:searchPathSingleObject" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;storeID("${report_id}")&lt;/bus:objectPath&gt;&lt;bus:options xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:option[16]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"&gt;
						&lt;item xsi:type="bus:asynchOptionInt"&gt;
							&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:int"&gt;5&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:asynchOptionInt"&gt;
							&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:int"&gt;30&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionStringArray"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;
							&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;
								&lt;item xsi:type="xs:string"&gt;XHTML&lt;/item&gt;
							&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:asynchOptionEncoding"&gt;
							&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;
							&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionAnyURI"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionString"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionBoolean"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;${executionPrompt}&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionAnyURI"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocation&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionData"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;data&lt;/bus:name&gt;
							&lt;bus:value xsi:type="bus:dataEnum"&gt;runWithAllData&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionBoolean"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionNameValueArray"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;
							&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[3]"&gt;
								&lt;item xsi:type="bus:nameValue"&gt;
									&lt;bus:name xsi:type="xs:string"&gt;CVGateway&lt;/bus:name&gt;
									&lt;bus:value xsi:type="xs:string"&gt;../v1/disp&lt;/bus:value&gt;
								&lt;/item&gt;
								&lt;item xsi:type="bus:nameValue"&gt;
									&lt;bus:name xsi:type="xs:string"&gt;renderIntermediateXML&lt;/bus:name&gt;
									&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;
								&lt;/item&gt;
								&lt;item xsi:type="bus:nameValue"&gt;
									&lt;bus:name xsi:type="xs:string"&gt;renderEnvironment&lt;/bus:name&gt;
									&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;
								&lt;/item&gt;
							&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionLanguageArray"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocale&lt;/bus:name&gt;
							&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;
								&lt;item xsi:type="xs:string"&gt;en-us&lt;/item&gt;
							&lt;/bus:value&gt;
						&lt;/item&gt;
					&lt;/bus:options&gt;${prompt_parameters}&lt;bus:specification xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:asynchSpecification[0]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"/&gt;&lt;bus:stateData xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="bus:xmlEncodedXML" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;${prompt_stateData}&lt;/bus:stateData&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"&gt;${prompts_parameter_values}&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionStringArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xsd:string[1]"&gt;&lt;item&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;${executionPrompt}&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionNameValueArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[]"&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;CVGateway&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:forward&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.ibm.bi.util.ContentUtil;
trackingStartTag = "&lt;bus:tracking xsi:type=\"bus:tracking\"&gt;";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status xsi:type=\"xs:string\"&gt;", "&lt;/bus:status&gt;");
vars.put("report_conversationStatus", status);</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="SOAPAction">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">${soapAction_rs}.high</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-UseRsConsumerMode">
                      <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-RsCMStoreID">
                      <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                      <stringProp name="Header.value">${report_id}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ asyncLoop">
              </GenericController>
            <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="asyncLoop">
          <stringProp name="WhileController.condition">${__groovy("${report_sendAsync}"=="true")}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update asyncTimer">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int asyncTimer = Integer.parseInt(vars.get("asyncTimer"));
asyncTimer = asyncTimer + 1;
if (asyncTimer &gt;= 300) {
	log.error("async attempt limit reached");
	vars.put("report_sendAsync", "false");
	vars.put("report_asyncTimeoutReached", "true");
}
vars.put("asyncTimer", "" + asyncTimer);
</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ async wait">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:rns1="http://developer.cognos.com/schemas/reportService/1"&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:wait&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;/rns1:wait&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
status = status.substring(status.indexOf("&gt;") + 1)
vars.put("report_conversationStatus", status);</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="SOAPAction">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">${soapAction_rs}.absolute</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-UseRsConsumerMode">
                  <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-RsCMStoreID">
                  <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                  <stringProp name="Header.value">${report_id}</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ process the report output">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return vars.get("reportResponse");</stringProp>
            </JSR223Sampler>
            <hashTree>
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                <stringProp name="RegexExtractor.regex">\.\.\/v1\/disp(\?[^"|^)]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datastore chart_urls">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">datastore_chart_urls</stringProp>
                <stringProp name="RegexExtractor.regex">src="(\?b_action=rc.*)" name="dataStore</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">src="  ...  " name=</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get reports_chart_urls">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">reports_chart_urls</stringProp>
                <stringProp name="RegexExtractor.regex">\.\.\/v1\/reports([^)]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get report_spec_encoded">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">report_spec_encoded</stringProp>
                <stringProp name="RegexExtractor.regex">xsi:type="bus:specification"&gt;([^&lt;]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get stateData">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">stateData</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;bus:stateData xsi:type="bus:xmlEncodedXML"&gt;([^&lt;]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-505831277">${report_datacheck}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="number of charts in response is expected?">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename" />
                <stringProp name="parameters" />
                <stringProp name="script">def all_chart_urls = vars.get("chart_urls_matchNr").toInteger() + vars.get("reports_chart_urls_matchNr").toInteger() + vars.get("datastore_chart_urls_matchNr").toInteger();
vars.put ("all_chart_urls", all_chart_urls.toString());

if ((vars.get("report_expected_chart_count") != vars.get("all_chart_urls"))) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage("expected chart count " + vars.get("report_expected_chart_count") + " doest not match total chart count " + vars.get("all_chart_urls") + " ( png charts: " + vars.get("chart_urls_matchNr") + ", datastore charts: " + vars.get("datastore_chart_urls_matchNr") + " rc png charts: " + vars.get("reports_chart_urls_matchNr") + " )");
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="is there a cascadePrompt?">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cascadePrompt</stringProp>
                <stringProp name="RegexExtractor.regex">promptPages</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">false</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="set cascadePrompt">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${cascadePrompt}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (args[0] != "false") {
	vars.put("cascadePrompt", "true")
}
</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ getCharts">
              </GenericController>
            <hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each chart_url in chart_urls">
          <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

String url = vars.get("chart_url");
if(url.endsWith(");")) {
	url = url.substring(0, url.length() - 2);
	vars.put("chart_url", url);
}

vars.put("chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1654885887">Content-Type: image/png</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each datastore_chart_url in datastore_chart_urls">
          <stringProp name="ForeachController.inputVal">datastore_chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">datastore_chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

vars.put("datastore_chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("datastore_chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${datastore_chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an application/json?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2066544187">Content-Type: application/json</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains columns?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-237625581">"columns":</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains rows?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-814722413">"rows":</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each reports_chart_url in reports_chart_urls ">
          <stringProp name="ForeachController.inputVal">reports_chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">reports_chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode reports chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

vars.put("reports_chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("reports_chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports${reports_chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1654885887">Content-Type: image/png</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
        </hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each action">
          <stringProp name="ForeachController.inputVal">report_actions</stringProp>
          <stringProp name="ForeachController.returnVal">report_action</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increment action_counter">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// manually control the action_counter because jmeter's action_counter cannot be reset mid-execution of a thread group loop
action_counter = Integer.parseInt(vars.get("action_counter"));
action_counter = action_counter + 1;
vars.put("action_counter", String.valueOf(action_counter));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <BeanShellSampler enabled="true" guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="/ reset asyncTimer">
            <stringProp name="BeanShellSampler.query">vars.put("asyncTimer", "0");
vars.put("asyncTimeNotReached", "true");
vars.put("report_sendAsync", "true");</stringProp>
            <stringProp name="BeanShellSampler.filename" />
            <stringProp name="BeanShellSampler.parameters" />
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree />
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ if action type is prompt">
            <stringProp name="IfController.condition">${__groovy("${report_action}" == "prompt")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get prompt details for action">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return vars.get("report_action")</stringProp>
            </JSR223Sampler>
            <hashTree />
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}${report_action}_${report_name}">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get action prompt info from report reponse">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${action_counter}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.ibm.bi.util.ContentUtil;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;
import java.util.Random;
import com.ibm.bi.util.prompt.PromptUtil;

report_response = vars.get("reportResponse");

prompt_spec = ContentUtil.getOptional(report_response, "&lt;bus:value xsi:type=\"bus:specification\"&gt;", "&lt;/bus:value&gt;");
vars.put("prompt_spec", prompt_spec);
JsonArray prompts = new JsonStreamParser(vars.get("report_actions_prompt_" + args[0])).next().getAsJsonArray();

JsonObject prompt = prompts.get(0).getAsJsonObject();
if(prompt.get("type")!= null)
	type = prompt.get("type").getAsString();
else
	type= "";

if(prompt.get("mode")!= null)
	mode = prompt.get("mode").getAsString();
else
	mode = "";
PromptUtil promptUtil =  new PromptUtil(report_response, log, type, mode);
prompt_parameters = promptUtil.getPromptParameters()

vars.put("prompt_parameters", prompt_parameters);

prompt_stateData = ContentUtil.getOptional(report_response, "&lt;bus:stateData xsi:type=\"bus:xmlEncodedXML\"&gt;", "&lt;/bus:stateData&gt;");
vars.put("prompt_stateData", prompt_stateData);

prompts_parameter_values = promptUtil.callGetPromptParametersValuesFunc(prompts);

vars.put("prompts_parameter_values", prompts_parameter_values);

log.debug(prompts_parameter_values);</stringProp>
              </JSR223Sampler>
              <hashTree />
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ if promt type is tree">
                <stringProp name="IfController.condition">${__groovy("${prompt_type}" == "tree")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/post getPromptValues">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;
	&lt;SOAP-ENV:Header&gt;
		&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;
			&lt;bus:CAM xsi:type="bus:CAM"&gt;
				&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;
			&lt;/bus:CAM&gt;
			&lt;bus:CAF xsi:type="bus:CAF"&gt;
				&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;
			&lt;/bus:CAF&gt;
			&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;
				&lt;item&gt;
					&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;
					&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;
				&lt;/item&gt;
				&lt;item&gt;
					&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;
					&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;
				&lt;/item&gt;
			&lt;/bus:userPreferenceVars&gt;
			&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;
				&lt;item xsi:type="bus:dispatcherTransportVar"&gt;
					&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;
					&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;
				&lt;/item&gt;
			&lt;/bus:dispatcherTransportVars&gt;
		&lt;/bus:biBusHeader&gt;
	&lt;/SOAP-ENV:Header&gt;
	&lt;SOAP-ENV:Body&gt;
		&lt;rns1:getPromptValues&gt;
			&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;
				&lt;bus:name xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string"&gt;run&lt;/bus:name&gt;
				&lt;bus:objectPath xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="bus:searchPathSingleObject" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;storeID("${report_id}")&lt;/bus:objectPath&gt;
				&lt;bus:options xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="SOAP-ENC:Array" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:option[16]"&gt;
					&lt;item xsi:type="bus:asynchOptionInt"&gt;
						&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:int"&gt;5&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:asynchOptionInt"&gt;
						&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:int"&gt;30&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionStringArray"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;
						&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;
							&lt;item xsi:type="xs:string"&gt;XHTML&lt;/item&gt;
						&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:asynchOptionEncoding"&gt;
						&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;
						&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionAnyURI"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionString"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionBoolean"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:boolean"&gt;${executionPrompt}&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionAnyURI"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocation&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionData"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;data&lt;/bus:name&gt;
						&lt;bus:value xsi:type="bus:dataEnum"&gt;runWithAllData&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:genericOptionBoolean"&gt;
						&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:genericOptionBoolean"&gt;
						&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionBoolean"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionNameValueArray"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;
						&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[3]"&gt;
							&lt;item xsi:type="bus:nameValue"&gt;
								&lt;bus:name xsi:type="xs:string"&gt;CVGateway&lt;/bus:name&gt;
								&lt;bus:value xsi:type="xs:string"&gt;../v1/disp&lt;/bus:value&gt;
							&lt;/item&gt;
							&lt;item xsi:type="bus:nameValue"&gt;
								&lt;bus:name xsi:type="xs:string"&gt;renderIntermediateXML&lt;/bus:name&gt;
								&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;
							&lt;/item&gt;
							&lt;item xsi:type="bus:nameValue"&gt;
								&lt;bus:name xsi:type="xs:string"&gt;renderEnvironment&lt;/bus:name&gt;
								&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;
							&lt;/item&gt;
						&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:genericOptionBoolean"&gt;
						&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:genericOptionBoolean"&gt;
						&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;
						&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
					&lt;/item&gt;
					&lt;item xsi:type="bus:runOptionLanguageArray"&gt;
						&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocale&lt;/bus:name&gt;
						&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;
							&lt;item xsi:type="xs:string"&gt;en-us&lt;/item&gt;
						&lt;/bus:value&gt;
					&lt;/item&gt;
				&lt;/bus:options&gt;${prompt_parameters}&lt;bus:specification xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:asynchSpecification[0]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"/&gt;
				&lt;bus:stateData xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="bus:xmlEncodedXML" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;${prompt_stateData}&lt;/bus:stateData&gt;
			&lt;/bus:conversation&gt;
			&lt;bus:parameterValues xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"&gt;${prompts_parameter_values}&lt;/bus:parameterValues&gt;
			&lt;options xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:option[]"&gt;
				&lt;item xsi:type="bus:runOptionInt"&gt;
					&lt;bus:name xsi:type="bus:runOptionEnum"&gt;skipValueCount&lt;/bus:name&gt;
					&lt;bus:value xsi:type="xsd:int"&gt;0&lt;/bus:value&gt;
				&lt;/item&gt;
				&lt;item xsi:type="bus:runOptionInt"&gt;
					&lt;bus:name xsi:type="bus:runOptionEnum"&gt;maximumValueCount&lt;/bus:name&gt;
					&lt;bus:value xsi:type="xsd:int"&gt;20&lt;/bus:value&gt;
				&lt;/item&gt;
				&lt;item xsi:type="bus:asynchOptionEncoding"&gt;
					&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;
					&lt;bus:value xsi:type="bus:encodingEnum"&gt;base64&lt;/bus:value&gt;
				&lt;/item&gt;
				&lt;item xsi:type="bus:asynchOptionInt"&gt;
					&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;
					&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;
				&lt;/item&gt;
			&lt;/options&gt;
		&lt;/rns1:getPromptValues&gt;
	&lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import com.ibm.bi.util.ContentUtil;
trackingStartTag = "&lt;bus:tracking xsi:type=\"bus:tracking\"&gt;";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status xsi:type=\"xs:string\"&gt;", "&lt;/bus:status&gt;");
vars.put("report_conversationStatus", status);</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="SOAPAction">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">${soapAction_rs}</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-UseRsConsumerMode">
                        <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-RsCMStoreID">
                        <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                        <stringProp name="Header.value">${report_id}</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                </hashTree>
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ if promt type is not tree">
                <stringProp name="IfController.condition">${__groovy("${prompt_type}" != "tree")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post runspecification ">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;${formFieldVars}&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:forward&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;bus:name xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;run&lt;/bus:name&gt;&lt;bus:objectPath xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="bus:searchPathSingleObject" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;storeID("${report_id}")&lt;/bus:objectPath&gt;&lt;bus:options xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:option[16]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"&gt;
						&lt;item xsi:type="bus:asynchOptionInt"&gt;
							&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:int"&gt;5&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:asynchOptionInt"&gt;
							&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:int"&gt;30&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionStringArray"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;
							&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;
								&lt;item xsi:type="xs:string"&gt;XHTML&lt;/item&gt;
							&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:asynchOptionEncoding"&gt;
							&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;
							&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionAnyURI"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionString"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionBoolean"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;${executionPrompt}&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionAnyURI"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocation&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionData"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;data&lt;/bus:name&gt;
							&lt;bus:value xsi:type="bus:dataEnum"&gt;runWithAllData&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionBoolean"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionNameValueArray"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;
							&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[3]"&gt;
								&lt;item xsi:type="bus:nameValue"&gt;
									&lt;bus:name xsi:type="xs:string"&gt;CVGateway&lt;/bus:name&gt;
									&lt;bus:value xsi:type="xs:string"&gt;../v1/disp&lt;/bus:value&gt;
								&lt;/item&gt;
								&lt;item xsi:type="bus:nameValue"&gt;
									&lt;bus:name xsi:type="xs:string"&gt;renderIntermediateXML&lt;/bus:name&gt;
									&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;
								&lt;/item&gt;
								&lt;item xsi:type="bus:nameValue"&gt;
									&lt;bus:name xsi:type="xs:string"&gt;renderEnvironment&lt;/bus:name&gt;
									&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;
								&lt;/item&gt;
							&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionLanguageArray"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocale&lt;/bus:name&gt;
							&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;
								&lt;item xsi:type="xs:string"&gt;en-us&lt;/item&gt;
							&lt;/bus:value&gt;
						&lt;/item&gt;
					&lt;/bus:options&gt;${prompt_parameters}&lt;bus:specification xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:asynchSpecification[0]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"/&gt;&lt;bus:stateData xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="bus:xmlEncodedXML" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;${prompt_stateData}&lt;/bus:stateData&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"&gt;${prompts_parameter_values}&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionStringArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xsd:string[1]"&gt;&lt;item&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;${executionPrompt}&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionNameValueArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[]"&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;CVGateway&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:forward&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import com.ibm.bi.util.ContentUtil;
trackingStartTag = "&lt;bus:tracking xsi:type=\"bus:tracking\"&gt;";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status xsi:type=\"xs:string\"&gt;", "&lt;/bus:status&gt;");
vars.put("report_conversationStatus", status);</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="SOAPAction">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">${soapAction_rs}.high</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-UseRsConsumerMode">
                        <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-RsCMStoreID">
                        <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                        <stringProp name="Header.value">${report_id}</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                </hashTree>
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ asyncLoop">
                </GenericController>
              <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="asyncLoop">
          <stringProp name="WhileController.condition">${__groovy("${report_sendAsync}"=="true")}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update asyncTimer">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int asyncTimer = Integer.parseInt(vars.get("asyncTimer"));
asyncTimer = asyncTimer + 1;
if (asyncTimer &gt;= 300) {
	log.error("async attempt limit reached");
	vars.put("report_sendAsync", "false");
	vars.put("report_asyncTimeoutReached", "true");
}
vars.put("asyncTimer", "" + asyncTimer);
</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ async wait">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:rns1="http://developer.cognos.com/schemas/reportService/1"&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:wait&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;/rns1:wait&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
status = status.substring(status.indexOf("&gt;") + 1)
vars.put("report_conversationStatus", status);</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="SOAPAction">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">${soapAction_rs}.absolute</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-UseRsConsumerMode">
                  <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-RsCMStoreID">
                  <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                  <stringProp name="Header.value">${report_id}</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ process the report output">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get("reportResponse");</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">\.\.\/v1\/disp(\?[^)]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datastore chart_urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datastore_chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">src="(\?b_action=rc.*)" name="dataStore</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">src="  ...  " name=</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get reports_chart_urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">reports_chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">\.\.\/v1\/reports([^)]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get report_spec_encoded">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">report_spec_encoded</stringProp>
                  <stringProp name="RegexExtractor.regex">xsi:type="bus:specification"&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get stateData">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">stateData</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;bus:stateData xsi:type="bus:xmlEncodedXML"&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-651725182">${__V(report_actions_datacheck_${action_counter})}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="number of charts in response is expected?">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">expectedChartcount = vars.get("report_actions_expected_chart_count_" + vars.get("action_counter"))

def all_chart_urls = vars.get("chart_urls_matchNr").toInteger() + vars.get("reports_chart_urls_matchNr").toInteger() + vars.get("datastore_chart_urls_matchNr").toInteger();
vars.put ("all_chart_urls", all_chart_urls.toString());

if (expectedChartcount != vars.get("all_chart_urls")) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage("expected chart count " + expectedChartcount + " doest not match total chart count " + vars.get("all_chart_urls") + " ( png charts: " + vars.get("chart_urls_matchNr") + ", datastore charts: " + vars.get("datastore_chart_urls_matchNr") + " rc png charts: " + vars.get("reports_chart_urls_matchNr") + " )");
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="is there a cascadePrompt?">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cascadePrompt</stringProp>
                  <stringProp name="RegexExtractor.regex">promptPages</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">false</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="set cascadePrompt">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters">${cascadePrompt}</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (args[0] != "false") {
	vars.put("cascadePrompt", "true")
}
</stringProp>
                </JSR223PostProcessor>
                <hashTree />
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ getCharts">
                </GenericController>
              <hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each chart_url in chart_urls">
          <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

String url = vars.get("chart_url");
if(url.endsWith(");")) {
	url = url.substring(0, url.length() - 2);
	vars.put("chart_url", url);
}

vars.put("chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1654885887">Content-Type: image/png</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each datastore_chart_url in datastore_chart_urls">
          <stringProp name="ForeachController.inputVal">datastore_chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">datastore_chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

vars.put("datastore_chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("datastore_chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${datastore_chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an application/json?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2066544187">Content-Type: application/json</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains columns?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-237625581">"columns":</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains rows?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-814722413">"rows":</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each reports_chart_url in reports_chart_urls ">
          <stringProp name="ForeachController.inputVal">reports_chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">reports_chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode reports chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

vars.put("reports_chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("reports_chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports${reports_chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1654885887">Content-Type: image/png</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ if action type is not prompt">
            <stringProp name="IfController.condition">${__groovy("${report_action}" != "prompt" &amp;&amp; "${report_action}" != "drill")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}${report_action}_${report_name}">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get run report_action">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:rns1="http://developer.cognos.com/schemas/reportService/1"&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:${report_action}&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;bus:name xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;run&lt;/bus:name&gt;&lt;bus:objectPath xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="bus:searchPathSingleObject" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;storeID("${report_id}")&lt;/bus:objectPath&gt;&lt;bus:options xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:option[16]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionStringArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;&lt;item xsi:type="xs:string"&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;${attachmentOption}&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionString"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocation&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionData"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;data&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:dataEnum"&gt;runWithAllData&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionNameValueArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[3]"&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;bus:name xsi:type="xs:string"&gt;CVGateway&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:string"&gt;../v1/disp&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;bus:name xsi:type="xs:string"&gt;renderIntermediateXML&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;bus:name xsi:type="xs:string"&gt;renderEnvironment&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionLanguageArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;&lt;item xsi:type="xs:string"&gt;en-us&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;bus:parameters xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:parameterValue[0]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"/&gt;&lt;bus:specification xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:asynchSpecification[0]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"/&gt;&lt;bus:stateData xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="bus:xmlEncodedXML" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;${stateData}&lt;/bus:stateData&gt;&lt;/bus:conversation&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionStringArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xsd:string[1]"&gt;&lt;item&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionNameValueArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[]"&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;CVGateway&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:${report_action}&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
status = status.substring(status.indexOf("&gt;") + 1)
vars.put("report_conversationStatus", status);</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="SOAPAction">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">${soapAction_rs}.high</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-UseRsConsumerMode">
                      <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-RsCMStoreID">
                      <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                      <stringProp name="Header.value">${report_id}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ asyncLoop">
                </GenericController>
              <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="asyncLoop">
          <stringProp name="WhileController.condition">${__groovy("${report_sendAsync}"=="true")}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update asyncTimer">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int asyncTimer = Integer.parseInt(vars.get("asyncTimer"));
asyncTimer = asyncTimer + 1;
if (asyncTimer &gt;= 300) {
	log.error("async attempt limit reached");
	vars.put("report_sendAsync", "false");
	vars.put("report_asyncTimeoutReached", "true");
}
vars.put("asyncTimer", "" + asyncTimer);
</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ async wait">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:rns1="http://developer.cognos.com/schemas/reportService/1"&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:wait&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;/rns1:wait&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
status = status.substring(status.indexOf("&gt;") + 1)
vars.put("report_conversationStatus", status);</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="SOAPAction">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">${soapAction_rs}.absolute</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-UseRsConsumerMode">
                  <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-RsCMStoreID">
                  <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                  <stringProp name="Header.value">${report_id}</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ process the report output">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get("reportResponse");</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">\.\.\/v1\/disp(\?[^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datastore chart_urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datastore_chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">src="(\?b_action=rc.*)" name="dataStore</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">src="  ...  " name=</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get reports_chart_urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">reports_chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">\.\.\/v1\/reports([^)]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get stateData">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">stateData</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;bus:stateData xsi:type="bus:xmlEncodedXML"&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-651725182">${__V(report_actions_datacheck_${action_counter})}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="number of charts in response is expected?">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">expectedChartcount = vars.get("report_actions_expected_chart_count_" + vars.get("action_counter"))

def all_chart_urls = vars.get("chart_urls_matchNr").toInteger() + vars.get("reports_chart_urls_matchNr").toInteger() + vars.get("datastore_chart_urls_matchNr").toInteger();
vars.put ("all_chart_urls", all_chart_urls.toString());

if (expectedChartcount != vars.get("all_chart_urls")) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage("expected chart count " + expectedChartcount + " doest not match total chart count " + vars.get("all_chart_urls") + " ( png charts: " + vars.get("chart_urls_matchNr") + ", datastore charts: " + vars.get("datastore_chart_urls_matchNr") + " rc png charts: " + vars.get("reports_chart_urls_matchNr") + " )");
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree />
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ getCharts">
                </GenericController>
              <hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each chart_url in chart_urls">
          <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

String url = vars.get("chart_url");
if(url.endsWith(");")) {
	url = url.substring(0, url.length() - 2);
	vars.put("chart_url", url);
}

vars.put("chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1654885887">Content-Type: image/png</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each datastore_chart_url in datastore_chart_urls">
          <stringProp name="ForeachController.inputVal">datastore_chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">datastore_chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

vars.put("datastore_chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("datastore_chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${datastore_chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an application/json?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2066544187">Content-Type: application/json</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains columns?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-237625581">"columns":</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains rows?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-814722413">"rows":</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each reports_chart_url in reports_chart_urls ">
          <stringProp name="ForeachController.inputVal">reports_chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">reports_chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode reports chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

vars.put("reports_chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("reports_chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports${reports_chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1654885887">Content-Type: image/png</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ if action type is drill">
            <stringProp name="IfController.condition">${__groovy("${report_action}" == "drill")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}${report_action}_${report_action_drill-item}_${report_action_report_name}">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="get drill info" />
              <hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset asyncTimer">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">vars.put("asyncTimer", "0");
vars.put("asyncTimeNotReached", "true");
vars.put("report_sendAsync", "true");</stringProp>
                </JSR223Sampler>
                <hashTree />
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post drill parms">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:runSpecification&gt;&lt;bus:specification xsi:type="bus:reportServiceDrillThroughSpecification"&gt;&lt;bus:value xsi:type="bus:specification"&gt;&amp;lt;dts:drillThroughSpecification xmlns:dts=&amp;quot;http://developer.cognos.com/schemas/drillThroughSpecification/1/&amp;quot; xmlns:xsi=&amp;apos;http://www.w3.org/2001/XMLSchema-instance&amp;apos;&amp;gt;&amp;lt;dts:modelSearchPaths&amp;gt;&amp;lt;dts:searchPath&amp;gt;storeID(&amp;amp;quot;${report_searchpathID}&amp;amp;quot;)&amp;lt;/dts:searchPath&amp;gt;&amp;lt;dts:searchPath&amp;gt;storeID(&amp;amp;quot;${report_searchParhModelID}&amp;amp;quot;)/model[last()]&amp;lt;/dts:searchPath&amp;gt;&amp;lt;dts:searchPath&amp;gt;${report_model_path}&amp;lt;/dts:searchPath&amp;gt;&amp;lt;dts:searchPath&amp;gt;${report_model_path_tidy}&amp;lt;/dts:searchPath&amp;gt;&amp;lt;/dts:modelSearchPaths&amp;gt;&amp;lt;dts:parameterAssignments xsi:nil=&amp;quot;true&amp;quot;/&amp;gt;&amp;lt;dts:reportTarget&amp;gt;&amp;lt;dts:action&amp;gt;http://developer.cognos.com/schemas/bibus/3/constants/drillThroughActionEnum#execute&amp;lt;/dts:action&amp;gt;&amp;lt;dts:targetSearchPath&amp;gt;${report_DrillPath}&amp;lt;/dts:targetSearchPath&amp;gt;&amp;lt;/dts:reportTarget&amp;gt;&amp;lt;/dts:drillThroughSpecification&amp;gt;&lt;/bus:value&gt;&lt;/bus:specification&gt;&lt;bus:parameterValues xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:parameterValue"&gt;&lt;bus:name xsi:type="xsd:string"&gt;${report_action_data-column}&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:parmValueItem[]"&gt;&lt;item xsi:type="bus:simpleParmValueItem"&gt;&lt;bus:inclusive xsi:type="xsd:boolean"&gt;true&lt;/bus:inclusive&gt;&lt;bus:use xsi:type="xsd:string"&gt;${report_action_drill-item}&lt;/bus:use&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type = "bus:drillThroughOptionBoolean"&gt;&lt;bus:name xsi:type="bus:drillThroughOptionEnum"&gt;useEditSpecification&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionEncoding"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionString"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionAnyURI"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#promptXslUrl&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:runSpecification&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="prepare delayed release for current report">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">/* written generic for posibility of having cascading drills in future */

// var names for use throughout script
busTrackingVarName = "report_busTrackingList"
matchNrVarName = busTrackingVarName+"_matchNr"
currentTrackingStrName = "report_busTracking"

// get current tracking
busTrackingList = vars.get(busTrackingVarName)

if (busTrackingList == null) {
	// init the list
	vars.put(busTrackingVarName, "")
	vars.put(matchNrVarName, "0")
}

/** add the current tracking to the list for a later release **/

// fetch current count
matchNrStr = vars.get(matchNrVarName)
// increase count
newMatchNrStr = String.valueOf(Integer.parseInt(matchNrStr) + 1)
// create new var
vars.put(busTrackingVarName+"_"+newMatchNrStr, vars.get(currentTrackingStrName))
// update count
vars.put(matchNrVarName, newMatchNrStr)</stringProp>
                  </JSR223PreProcessor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
status = status.substring(status.indexOf("&gt;") + 1)
vars.put("report_conversationStatus", status);</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                </hashTree>
                <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ asyncLoop">
                  </GenericController>
                <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="asyncLoop">
          <stringProp name="WhileController.condition">${__groovy("${report_sendAsync}"=="true")}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update asyncTimer">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int asyncTimer = Integer.parseInt(vars.get("asyncTimer"));
asyncTimer = asyncTimer + 1;
if (asyncTimer &gt;= 300) {
	log.error("async attempt limit reached");
	vars.put("report_sendAsync", "false");
	vars.put("report_asyncTimeoutReached", "true");
}
vars.put("asyncTimer", "" + asyncTimer);
</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ async wait">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:rns1="http://developer.cognos.com/schemas/reportService/1"&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:wait&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;/rns1:wait&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
status = status.substring(status.indexOf("&gt;") + 1)
vars.put("report_conversationStatus", status);</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="SOAPAction">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">${soapAction_rs}.absolute</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-UseRsConsumerMode">
                  <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-RsCMStoreID">
                  <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                  <stringProp name="Header.value">${report_id}</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ check drill response">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">return vars.get("reportResponse")</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="667060035">${report_action_drill-item}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message" />
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.scope">all</stringProp>
                  </ResponseAssertion>
                  <hashTree />
                </hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="SOAPAction">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">${soapAction_rs}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-UseRsConsumerMode">
                      <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-RsCMStoreID">
                      <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                      <stringProp name="Header.value">${report_id}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report_search path from field properties">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">defaultOutputFormat</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">defaultName,type,ancestors,permissions,disabled,hidden,owner,base,defaultScreenTip,iconURI,tags</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=authoring&amp;context=%7B%22perspective%22%3A%22authoring%22%2C%22content%22%3A%7B%22module%22%3A%22bi%2Fauthoring%2FrsContentView%22%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22isViewer%22%3Atrue%2C%22isNewFromModule%22%3Afalse%2C%22isNewFromPackage%22%3Afalse%2C%22cmProperties%22%3A%7B%22runInAdvancedViewer%22%3Atrue%2C%22executionPrompt%22%3Atrue%2C%22permissions%22%3A%5B%22execute%22%2C%22read%22%2C%22setPolicy%22%2C%22traverse%22%2C%22write%22%5D%2C%22modificationTime%22%3A%222016-01-05T19%3A47%3A58.420Z%22%2C%22options%22%3Anull%2C%22_meta%22%3A%7B%22links%22%3A%7B%22versions%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fversions%22%7D%2C%22self%22%3A%7B%22mimeType%22%3A%22application%2Fvnd.ibm.bi.report%2Bjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%22%7D%2C%22histories%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fhistories%22%7D%7D%7D%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22type%22%3A%22report%22%2C%22defaultName%22%3A%22small_nonMeasureList_html_av%22%2C%22version%22%3A2%7D%2C%22rsFinalRunOptions%22%3A%7B%22format%22%3A%22HTML%22%2C%22runInAdvancedViewer%22%3Atrue%2C%22prompt%22%3Atrue%7D%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_id from navigation_response varilable">
                  <stringProp name="JSONPostProcessor.referenceNames">report_action_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${report_action_report_name}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">navigation_response</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_searchpath">
                  <stringProp name="JSONPostProcessor.referenceNames">report_searchpath</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].searchPath</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_actions_datacheck">
                  <stringProp name="JSONPostProcessor.referenceNames">report_actions_datacheck</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[*].datacheck</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">id,type</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_action_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=authoring&amp;context=%7B%22perspective%22%3A%22authoring%22%2C%22content%22%3A%7B%22module%22%3A%22bi%2Fauthoring%2FrsContentView%22%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22isViewer%22%3Atrue%2C%22isNewFromModule%22%3Afalse%2C%22isNewFromPackage%22%3Afalse%2C%22cmProperties%22%3A%7B%22runInAdvancedViewer%22%3Atrue%2C%22executionPrompt%22%3Atrue%2C%22permissions%22%3A%5B%22execute%22%2C%22read%22%2C%22setPolicy%22%2C%22traverse%22%2C%22write%22%5D%2C%22modificationTime%22%3A%222016-01-05T19%3A47%3A58.420Z%22%2C%22options%22%3Anull%2C%22_meta%22%3A%7B%22links%22%3A%7B%22versions%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fversions%22%7D%2C%22self%22%3A%7B%22mimeType%22%3A%22application%2Fvnd.ibm.bi.report%2Bjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%22%7D%2C%22histories%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fhistories%22%7D%7D%7D%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22type%22%3A%22report%22%2C%22defaultName%22%3A%22small_nonMeasureList_html_av%22%2C%22version%22%3A2%7D%2C%22rsFinalRunOptions%22%3A%7B%22format%22%3A%22HTML%22%2C%22runInAdvancedViewer%22%3Atrue%2C%22prompt%22%3Atrue%7D%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="false" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get executionPrompt">
                  <stringProp name="JSONPostProcessor.referenceNames">executionPrompt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].executionPrompt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="run report drill" />
              <hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset asyncTimer">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">vars.put("asyncTimer", "0");
vars.put("asyncTimeNotReached", "true");
vars.put("report_sendAsync", "true");</stringProp>
                </JSR223Sampler>
                <hashTree />
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post drill specification ">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:run&gt;&lt;bus:objectPath xsi:type="bus:searchPathSingleObject"&gt;storeID(&amp;quot;${report_action_id}&amp;quot;)&lt;/bus:objectPath&gt;&lt;bus:parameterValues xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:parameterValue"&gt;&lt;bus:name xsi:type="xsd:string"&gt;${report_action_data-column}&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:parmValueItem[]"&gt;&lt;item xsi:type="bus:simpleParmValueItem"&gt;&lt;bus:inclusive xsi:type="xsd:boolean"&gt;true&lt;/bus:inclusive&gt;&lt;bus:use xsi:type="xsd:string"&gt;${report_action_drill-item}&lt;/bus:use&gt;&lt;bus:display xsi:type="xsd:string"&gt;${report_action_drill-item}&lt;/bus:display&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:genericOptionAnyURI"&gt;&lt;bus:name xsi:type="xsd:string"&gt;runOptionEnum#globalParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;[]&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionStringArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xsd:string[1]"&gt;&lt;item&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionEncoding"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionString"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocation&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionData"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;data&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:dataEnum"&gt;runWithAllData&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionLanguageArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xsd:string[1]"&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionNameValueArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[]"&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;CVGateway&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionAnyURI"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#promptXslUrl&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:run&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
status = status.substring(status.indexOf("&gt;") + 1)
vars.put("report_conversationStatus", status);</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                </hashTree>
                <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ asyncLoop">
                  </GenericController>
                <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="asyncLoop">
          <stringProp name="WhileController.condition">${__groovy("${report_sendAsync}"=="true")}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update asyncTimer">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int asyncTimer = Integer.parseInt(vars.get("asyncTimer"));
asyncTimer = asyncTimer + 1;
if (asyncTimer &gt;= 300) {
	log.error("async attempt limit reached");
	vars.put("report_sendAsync", "false");
	vars.put("report_asyncTimeoutReached", "true");
}
vars.put("asyncTimer", "" + asyncTimer);
</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ async wait">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:rns1="http://developer.cognos.com/schemas/reportService/1"&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:wait&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;/rns1:wait&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
status = status.substring(status.indexOf("&gt;") + 1)
vars.put("report_conversationStatus", status);</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="SOAPAction">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">${soapAction_rs}.absolute</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-UseRsConsumerMode">
                  <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-RsCMStoreID">
                  <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                  <stringProp name="Header.value">${report_id}</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ process the report output">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">return vars.get("reportResponse");</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get pdf_url ">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">pdf_url</stringProp>
                    <stringProp name="RegexExtractor.regex">(\?b_action=.+)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                    <stringProp name="RegexExtractor.regex">\.\.\/v1\/disp(\?[^)]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datastore chart_urls">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">datastore_chart_urls</stringProp>
                    <stringProp name="RegexExtractor.regex">src="(\?b_action=rc.*)" name="dataStore</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">src="  ...  " name=</stringProp>
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get reports_chart_urls">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">reports_chart_urls</stringProp>
                    <stringProp name="RegexExtractor.regex">\.\.\/v1\/reports([^)]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get report_spec_encoded">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">report_spec_encoded</stringProp>
                    <stringProp name="RegexExtractor.regex">xsi:type="bus:specification"&gt;([^&lt;]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get stateData">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">stateData</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;bus:stateData xsi:type="bus:xmlEncodedXML"&gt;([^&lt;]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get raw_report_model_info">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">raw_report_model_info</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;modelPath ([^&lt;]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get report_model_path">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">report_model_path</stringProp>
                    <stringProp name="RegexExtractor.regex">&gt;(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">variable</stringProp>
                    <stringProp name="Scope.variable">raw_report_model_info</stringProp>
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get report_model_type">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">report_model_type</stringProp>
                    <stringProp name="RegexExtractor.regex">type="([^"]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">package</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">variable</stringProp>
                    <stringProp name="Scope.variable">raw_report_model_info</stringProp>
                  </RegexExtractor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get_drill_path">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import com.ibm.bi.util.ContentUtil;

drillPathStartTag = "path=\"";
drillPathEndTag = "\"&gt;&lt;bus:parameters";
drillPathInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), drillPathStartTag, drillPathEndTag);
log.debug("drillPath is: " + drillPathInnerContent);
drillPathFull = drillPathStartTag + drillPathInnerContent + drillPathEndTag;
// debug vars.put("report_DrillPath", trackingFull);
vars.put("report_DrillPath", drillPathInnerContent);
//status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
//status = status.substring(status.indexOf("&gt;") + 1)
//vars.put("report_conversationStatus", status);</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get report_searchpathID">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import com.ibm.bi.util.ContentUtil;

pathStartTag = "&lt;item xsi:type=\"bus:searchPathSingleObject\"&gt;storeID(\"";
pathEndTag = "\")&lt;/item&gt;&lt;item";
pathInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), pathStartTag, pathEndTag);
log.debug("searchParhID is: " + pathInnerContent);
pathFull = pathStartTag + pathInnerContent + pathEndTag;
// debug vars.put("report_DrillPath", pathFull);
vars.put("report_searchpathID", pathInnerContent);
</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get report_searchModelID">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import com.ibm.bi.util.ContentUtil;



pathModelStartTag = "&lt;item xsi:type=\"bus:searchPathSingleObject\"&gt;storeID(\"${report_searchpathID}\")&lt;/item&gt;&lt;item xsi:type=\"bus:searchPathSingleObject\"&gt;storeID(\"";
pathModelEndTag = "\")/model[last()]";
pathModelInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), pathModelStartTag, pathModelEndTag);
log.debug("searchParhModelID is: " + pathModelInnerContent);
pathModelFull = pathModelStartTag + pathModelInnerContent + pathModelEndTag;
//debug vars.put("report_searchParhModelID", pathModelFull);
vars.put("report_searchParhModelID", pathModelInnerContent);</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                </hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="SOAPAction">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">${soapAction_rs}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-UseRsConsumerMode">
                      <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-RsCMStoreID">
                      <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                      <stringProp name="Header.value">${report_id}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/datacheck and chart if no prompts">
                <stringProp name="IfController.condition">${__groovy("${hasPrompt}" == "false")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ check data and chart count">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">// log.info("Report " + vars.get("report_name") + " does not contain prompts.");
return vars.get("reportResponse");</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-505831277">${report_datacheck}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                  <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="number of charts in response is expected?">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename" />
                    <stringProp name="parameters" />
                    <stringProp name="script">expectedChartcount = vars.get("report_actions_expected_chart_count_" + vars.get("action_counter"))

def all_chart_urls = vars.get("chart_urls_matchNr").toInteger() + vars.get("reports_chart_urls_matchNr").toInteger() + vars.get("datastore_chart_urls_matchNr").toInteger();
vars.put ("all_chart_urls", all_chart_urls.toString());

if (expectedChartcount != vars.get("all_chart_urls")) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage("expected chart count " + expectedChartcount + " doest not match total chart count " + vars.get("all_chart_urls") + " ( png charts: " + vars.get("chart_urls_matchNr") + ", datastore charts: " + vars.get("datastore_chart_urls_matchNr") + " rc png charts: " + vars.get("reports_chart_urls_matchNr") + " )");
}</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree />
                </hashTree>
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ getCharts">
                </GenericController>
              <hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each chart_url in chart_urls">
          <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

String url = vars.get("chart_url");
if(url.endsWith(");")) {
	url = url.substring(0, url.length() - 2);
	vars.put("chart_url", url);
}

vars.put("chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1654885887">Content-Type: image/png</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each datastore_chart_url in datastore_chart_urls">
          <stringProp name="ForeachController.inputVal">datastore_chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">datastore_chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

vars.put("datastore_chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("datastore_chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${datastore_chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an application/json?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2066544187">Content-Type: application/json</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains columns?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-237625581">"columns":</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains rows?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-814722413">"rows":</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each reports_chart_url in reports_chart_urls ">
          <stringProp name="ForeachController.inputVal">reports_chart_urls</stringProp>
          <stringProp name="ForeachController.returnVal">reports_chart_url</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode reports chart url">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

vars.put("reports_chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("reports_chart_url")));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports${reports_chart_url_decoded}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1654885887">Content-Type: image/png</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include release">
              </GenericController>
            <hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/release">
          <stringProp name="IfController.condition">${__groovy("${report_release}"=="true")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="release">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="release">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:release&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;/bus:conversation&gt;&lt;/rns1:release&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="SOAPAction">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">${soapAction_rs}.session</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-UseRsConsumerMode">
                    <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Cache-Control">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Pragma">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="clear release flag">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("report_release", "false")</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ pop report_busTracking from original report">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">// undo what was done in preProcessor "prepare delayed release for current report"

// var names for use throughout script
busTrackingVarName = "report_busTrackingList"
matchNrVarName = busTrackingVarName+"_matchNr"
currentTrackingStrName = "report_busTracking"


/* assume only 1 drill for now */
busTrackingVarName + "_1"

vars.put(currentTrackingStrName, vars.get(busTrackingVarName))
vars.remove(busTrackingVarName)
vars.remove(matchNrVarName)
vars.remove(busTrackingVarName)

vars.put("report_release", "true")</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
        </hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include release">
          </GenericController>
        <hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/release">
          <stringProp name="IfController.condition">${__groovy("${report_release}"=="true")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="release">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="release">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:release&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;/bus:conversation&gt;&lt;/rns1:release&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="SOAPAction">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">${soapAction_rs}.session</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-UseRsConsumerMode">
                    <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Cache-Control">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Pragma">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="clear release flag">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("report_release", "false")</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
    </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If PDF || EXCEL">
            <stringProp name="IfController.condition">${__groovy("{__P(force_run_spec)}"=="true" || ("${report_output_format}"=="PDF" || "${report_output_format}"=="EXCEL"))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ runSpecification">
              </GenericController>
            <hashTree>
        <Arguments enabled="false" guiclass="ArgumentsPanel" testclass="Arguments" testname="manual inputs for debugging - normally disabled, do not delete">
          <collectionProp name="Arguments.arguments">
            <elementProp elementType="Argument" name="url_base">
              <stringProp name="Argument.name">url_base</stringProp>
              <stringProp name="Argument.value">http://${serverName}:${serverPort}${urlPath}/bi</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">mostly for the referer header value</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_id">
              <stringProp name="Argument.name">report_id</stringProp>
              <stringProp name="Argument.value">iB8B0EDF0EDCA442D86FF534AE66CA5B6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">ID from the properties of the report</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_name">
              <stringProp name="Argument.name">report_name</stringProp>
              <stringProp name="Argument.value">master_detail</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_output_format">
              <stringProp name="Argument.name">report_output_format</stringProp>
              <stringProp name="Argument.value">HTML</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_datacheck">
              <stringProp name="Argument.name">report_datacheck</stringProp>
              <stringProp name="Argument.value">14,111,228.67</stringProp>
              <stringProp name="Argument.desc">something that only appears in the report output, indicating a successful run</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_expected_chart_count">
              <stringProp name="Argument.name">report_expected_chart_count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">total number of expected charts in the report output</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_actions_1">
              <stringProp name="Argument.name">report_actions_1</stringProp>
              <stringProp name="Argument.value">nextPage</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_actions_datacheck_1">
              <stringProp name="Argument.name">report_actions_datacheck_1</stringProp>
              <stringProp name="Argument.value">1,969,460.13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_actions_2">
              <stringProp name="Argument.name">report_actions_2</stringProp>
              <stringProp name="Argument.value">nextPage</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_actions_datacheck_2">
              <stringProp name="Argument.name">report_actions_datacheck_2</stringProp>
              <stringProp name="Argument.value">516,972.39</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="tr_prefix">
              <stringProp name="Argument.name">tr_prefix</stringProp>
              <stringProp name="Argument.value" />
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">used for things like "first_" for identifying cold cache requests</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">This "User Defined Variables" test element should be disabled for normal test execution. It contains a list of all inputs required to run this fragment. </stringProp>
        </Arguments>
        <hashTree />
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="run report in full interactivity" />
        <hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}runspec_${report_name}">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="report execution config">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="Argument" name="asyncTimeout">
                  <stringProp name="Argument.name">asyncTimeout</stringProp>
                  <stringProp name="Argument.value">300</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp elementType="Argument" name="attachmentOption">
                  <stringProp name="Argument.name">attachmentOption</stringProp>
                  <stringProp name="Argument.value">&lt;item xsi:type="bus:asynchOptionEncoding"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;&lt;/item&gt;</stringProp>
                  <stringProp name="Argument.desc">this param is used to enable the report output to be a multipart attachment to the runspec response</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp elementType="Argument" name="attachmentOption_orig">
                  <stringProp name="Argument.name">attachmentOption_orig</stringProp>
                  <stringProp name="Argument.value">&lt;item xsi:type="bus:asynchOptionEncoding"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;&lt;/item&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree />
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If first_open">
              <stringProp name="TestPlan.comments">The perspective request should only be called for the first opens</stringProp>
              <stringProp name="IfController.condition">${__groovy("${tr_prefix}"=="first_")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ open authoring perspective">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/authoring</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ generate AuthToken">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.auth.AuthenticityToken;
import com.ibm.bi.auth.BiBase64;
import java.io.ByteArrayOutputStream;
log.debug("usersessionid=" + vars.get("COOKIE_usersessionid"));	
authToken = AuthenticityToken.generateToken(vars.get("COOKIE_usersessionid"));
log.debug("authToken=" + authToken);
vars.put("authToken", authToken);</stringProp>
            </JSR223Sampler>
            <hashTree />
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get configuration">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;bus:getConfiguration&gt;&lt;properties xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:propEnum[]"&gt;&lt;item&gt;supportedContentLocales&lt;/item&gt;&lt;item&gt;supportedCurrencies&lt;/item&gt;&lt;item&gt;supportedFonts&lt;/item&gt;&lt;item&gt;metadataInformationURI&lt;/item&gt;&lt;item&gt;glossaryURI&lt;/item&gt;&lt;/properties&gt;&lt;/bus:getConfiguration&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=authoring&amp;context=%7B%22perspective%22%3A%22authoring%22%2C%22content%22%3A%7B%22module%22%3A%22bi%2Fauthoring%2FrsContentView%22%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22isViewer%22%3Atrue%2C%22isNewFromModule%22%3Afalse%2C%22isNewFromPackage%22%3Afalse%2C%22cmProperties%22%3A%7B%22runInAdvancedViewer%22%3Atrue%2C%22executionPrompt%22%3Atrue%2C%22permissions%22%3A%5B%22execute%22%2C%22read%22%2C%22setPolicy%22%2C%22traverse%22%2C%22write%22%5D%2C%22modificationTime%22%3A%222016-01-05T19%3A47%3A58.420Z%22%2C%22options%22%3Anull%2C%22_meta%22%3A%7B%22links%22%3A%7B%22versions%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fversions%22%7D%2C%22self%22%3A%7B%22mimeType%22%3A%22application%2Fvnd.ibm.bi.report%2Bjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%22%7D%2C%22histories%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fhistories%22%7D%7D%7D%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22type%22%3A%22report%22%2C%22defaultName%22%3A%22small_nonMeasureList_html_av%22%2C%22version%22%3A2%7D%2C%22rsFinalRunOptions%22%3A%7B%22format%22%3A%22HTML%22%2C%22runInAdvancedViewer%22%3Atrue%2C%22prompt%22%3Atrue%7D%7D%7D</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/systemService/201606/</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ get stubbed report spec" />
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_model_path">
                <stringProp name="JSONPostProcessor.referenceNames">report_model_path</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].report.metadataModel[0].searchPath</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_package_path">
                <stringProp name="JSONPostProcessor.referenceNames">report_package_path</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].report.metadataModelPackage[0].searchPath</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_spec">
                <stringProp name="JSONPostProcessor.referenceNames">report_spec</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].report.specification</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
              </JSONPostProcessor>
              <hashTree />
              <XPathExtractor enabled="true" guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="get metadataPaths">
                <stringProp name="XPathExtractor.default" />
                <stringProp name="XPathExtractor.refname">metadataPaths</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//metadataPath/@path</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">report_spec</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              </XPathExtractor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get  report_options">
                <stringProp name="JSONPostProcessor.referenceNames">report_options</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].report.options</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get  report_module">
                <stringProp name="JSONPostProcessor.referenceNames">report_module</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].report.module</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
              </JSONPostProcessor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="combine all metadataPaths">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;

vars.put("isPackage", "true");
reportmod = vars.get("report_module")
if (reportmod.length() &gt; 0) {
	JsonArray report_module = new JsonStreamParser(reportmod).next().getAsJsonArray();
	if(report_module.size() != 0) {
		vars.put("isPackage", "false");
		String moduleId = report_module.get(0).getAsJsonObject().get("id").getAsString();
		vars.put("moduleId", moduleId);
	}
}

String runSpec_prompt = "true";
report_options = vars.get("report_options")
if (report_options.length() &gt; 0) {
	JsonArray options = new JsonStreamParser(report_options).next().getAsJsonArray();
	if(options.size() &gt; 0) {
		for(int i = 0; i &lt; options.size(); i++) {
			JsonObject option = options.get(i).getAsJsonObject();
			if ("prompt".equals(option.get("name"))) {
				runSpec_prompt = ((Boolean)option.get("value")).toString();
			}
		}
	}
}
vars.put("runSpec_prompt", runSpec_prompt);

// metadataPath variables:
// _0 = (assigned) the default model path, already defined outside of the report spec
// _1 - _n = the non-default model paths, extracted from the report spec
// _matchNr = length, not including the default
</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get stubbed report spec">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports/${report_id}/stubbed</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="cafContextId">
                      <stringProp name="Header.name">cafContextId</stringProp>
                      <stringProp name="Header.value">${cafContextId}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="authenticityToken">
                      <stringProp name="Header.name">authenticityToken</stringProp>
                      <stringProp name="Header.value">${authToken}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-UseRsConsumerMode">
                      <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=authoring&amp;context=%7B%22perspective%22%3A%22authoring%22%2C%22content%22%3A%7B%22module%22%3A%22bi%2Fauthoring%2FrsContentView%22%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22isViewer%22%3Atrue%2C%22isNewFromModule%22%3Afalse%2C%22isNewFromPackage%22%3Afalse%2C%22cmProperties%22%3A%7B%22runInAdvancedViewer%22%3Atrue%2C%22executionPrompt%22%3Atrue%2C%22permissions%22%3A%5B%22execute%22%2C%22read%22%2C%22setPolicy%22%2C%22traverse%22%2C%22write%22%5D%2C%22modificationTime%22%3A%222016-01-05T19%3A47%3A58.420Z%22%2C%22options%22%3Anull%2C%22_meta%22%3A%7B%22links%22%3A%7B%22versions%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fversions%22%7D%2C%22self%22%3A%7B%22mimeType%22%3A%22application%2Fvnd.ibm.bi.report%2Bjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%22%7D%2C%22histories%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fhistories%22%7D%7D%7D%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22type%22%3A%22report%22%2C%22defaultName%22%3A%22small_nonMeasureList_html_av%22%2C%22version%22%3A2%7D%2C%22rsFinalRunOptions%22%3A%7B%22format%22%3A%22HTML%22%2C%22runInAdvancedViewer%22%3Atrue%2C%22prompt%22%3Atrue%7D%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="reset restAsyncLoopCount">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">vars.put("restAsyncLoopCount", "0")</stringProp>
                </JSR223PreProcessor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responseCode">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responseCode</stringProp>
                  <stringProp name="RegexExtractor.regex">20[02]</stringProp>
                  <stringProp name="RegexExtractor.template">$0$</stringProp>
                  <stringProp name="RegexExtractor.default">ERROR</stringProp>
                  <stringProp name="RegexExtractor.match_number" />
                </RegexExtractor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 received">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1478545310">20[02]</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If responseCode==202">
                <stringProp name="IfController.condition">${__groovy("${responseCode}"=="202")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ restAsyncLoop">
                  </GenericController>
                <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="While responseCode==202">
          <stringProp name="WhileController.condition">${__groovy("${responseCode}"=="202" &amp;&amp; "${responseCode}"!="ERROR")}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get conversation update">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${conversationUrl}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="get conversation details from previous response">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//pattern_loc = java.util.regex.Pattern.compile("Location: (.*)")
//pattern_xcaa = java.util.regex.Pattern.compile("X-CA-Affinity: (.*)")
prevRH = prev.getResponseHeaders()

//pattern.matcher(prevRH).find()
log.debug(Label + " -- " + prevRH)
log.debug(Label + " -- " + "responseCode: ${responseCode}")

if (prevRH.contains("X-CA-Affinity")) {
	// extract using regex match on group 0 item 0
	conversationUrl = (prevRH =~ /Location: (.*)/)[0][1]
	XCAAffinity = (prevRH =~ /X-CA-Affinity: (.*)/)[0][1]

	vars.put("conversationUrl", conversationUrl)
	vars.put("X-CA-Affinity", XCAAffinity)
	
	log.debug(Label + " -- conv: "+conversationUrl)
	log.debug(Label + " -- xcaa: "+XCAAffinity)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responsdeCode">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responseCode</stringProp>
              <stringProp name="RegexExtractor.regex">20[02]</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">ERROR</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 received">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1478545310">20[02]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="check restAsyncLoopCount">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">if ("${responseCode}" != 200) {
	loopCount = Integer.parseInt("${restAsyncLoopCount}")
	if (loopCount &gt;= 100) {
		log.error("rest async max 100 iterations reached")
		prev.setSuccessful(false)
		prev.setResponseMessage("rest async max 100 iterations reached")
	} 
	vars.put("restAsyncLoopCount", loopCount.toString())
}</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
            </hashTree>
            <BeanShellSampler enabled="false" guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="setReportObjectMetadata">
              <stringProp name="BeanShellSampler.query">//2
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;

// model searchpath
// /content/folder[@name=&amp;apos;aaa_Packages&amp;apos;]/package[@name=&amp;apos;GO_Sales_Retailers_DB2_DQM&amp;apos;]/model[last()]
//package searchpath
// /content/folder[@name=&amp;apos;aaa_Packages&amp;apos;]/package[@name=&amp;apos;GO_Sales_Retailers_DB2_DQM&amp;apos;]

JsonStreamParser jsonStreamReader = new JsonStreamParser(prev.getResponseDataAsString());
String jsonStr = prev.getResponseDataAsString();
//log.debug("jsonStr: " + jsonStr);
JsonElement response = new JsonStreamParser(jsonStr).next().getAsJsonObject();
// { 'data': [ "defaultName"....."id"
JsonArray data = response.getAsJsonArray("data");

reportData = data.get(0).get("report").getAsJsonObject(); //reportData.get("metadataModel").getAsJsonArray().get(0).get("searchPath");

modelSearchPath = reportData.get("metadataModel").getAsJsonArray().get(0).get("searchPath");
vars.put("report_model_path", modelSearchPath.getAsString());

packageSearchPath = reportData.get("metadataModelPackage").getAsJsonArray().get(0).get("searchPath");
vars.put("report_package_path", packageSearchPath.getAsString());

specification = reportData.get("specification").getAsString();
vars.put("report_spec", specification);
</stringProp>
              <stringProp name="BeanShellSampler.filename" />
              <stringProp name="BeanShellSampler.parameters" />
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree />
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report_search path from field properties">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                    <stringProp name="Argument.value">searchPath,base.id,base.type,base.searchPath</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_searchpath">
                <stringProp name="JSONPostProcessor.referenceNames">report_searchpath</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].searchPath</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ tidy variables for soap requests">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">sp = vars.get("report_searchpath");
vars.put("report_searchpath_tidy", sp.replaceAll("'", "&amp;apos;"));

spec = vars.get("report_spec");
spec = spec.replaceAll("&amp;", "&amp;amp;").replaceAll("&lt;", "&amp;lt;").replaceAll("&gt;", "&amp;gt;");
vars.put("report_spec", spec);</stringProp>
            </JSR223Sampler>
            <hashTree />
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                    <stringProp name="Argument.value">defaultName%2Cowner.defaultName%2Cancestors%2Cpermissions%2Chidden%2Cdisabled</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=authoring&amp;context=%7B%22perspective%22%3A%22authoring%22%2C%22content%22%3A%7B%22module%22%3A%22bi%2Fauthoring%2FrsContentView%22%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22isViewer%22%3Atrue%2C%22isNewFromModule%22%3Afalse%2C%22isNewFromPackage%22%3Afalse%2C%22cmProperties%22%3A%7B%22runInAdvancedViewer%22%3Atrue%2C%22executionPrompt%22%3Atrue%2C%22permissions%22%3A%5B%22execute%22%2C%22read%22%2C%22setPolicy%22%2C%22traverse%22%2C%22write%22%5D%2C%22modificationTime%22%3A%222016-01-05T19%3A47%3A58.420Z%22%2C%22options%22%3Anull%2C%22_meta%22%3A%7B%22links%22%3A%7B%22versions%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fversions%22%7D%2C%22self%22%3A%7B%22mimeType%22%3A%22application%2Fvnd.ibm.bi.report%2Bjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%22%7D%2C%22histories%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fhistories%22%7D%7D%7D%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22type%22%3A%22report%22%2C%22defaultName%22%3A%22small_nonMeasureList_html_av%22%2C%22version%22%3A2%7D%2C%22rsFinalRunOptions%22%3A%7B%22format%22%3A%22HTML%22%2C%22runInAdvancedViewer%22%3Atrue%2C%22prompt%22%3Atrue%7D%7D%7D</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="/ ${tr_prefix}getModels">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="package based">
                <stringProp name="IfController.condition">${__groovy("${isPackage}" == "true")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get model properties">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;bus:query&gt;&lt;requests&gt;&lt;queryRequest&gt;&lt;search&gt;${report_model_path}&lt;/search&gt;&lt;options&gt;&lt;refProps xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:refProp[]"&gt;&lt;item xsi:type="bus:refProp"&gt;&lt;refPropName&gt;parent&lt;/refPropName&gt;&lt;properties xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:propEnum[]"&gt;&lt;item&gt;defaultName&lt;/item&gt;&lt;item&gt;searchPath&lt;/item&gt;&lt;item&gt;routingServerGroup&lt;/item&gt;&lt;item&gt;effectiveUserCapabilities&lt;/item&gt;&lt;/properties&gt;&lt;/item&gt;&lt;/refProps&gt;&lt;/options&gt;&lt;properties xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:propEnum[]"&gt;&lt;item&gt;searchPath&lt;/item&gt;&lt;item&gt;modificationTime&lt;/item&gt;&lt;item xsi:type="cm:propEnum"&gt;parent&lt;/item&gt;&lt;/properties&gt;&lt;/queryRequest&gt;&lt;queryRequest&gt;&lt;search&gt;${report_package_path}/packageConfiguration&lt;/search&gt;&lt;properties xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:propEnum[]"&gt;&lt;item&gt;memberDisplayCountLimit&lt;/item&gt;&lt;/properties&gt;&lt;/queryRequest&gt;&lt;/requests&gt;&lt;/bus:query&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="SOAPAction">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/contentManagerService/201606/</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="User-Agent">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Cache-Control">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Pragma">
                        <stringProp name="Header.name">Pragma</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="">
                        <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                        <stringProp name="Header.value">${report_id}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <CookieManager enabled="false" guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager">
                    <collectionProp name="CookieManager.cookies">
                      <elementProp elementType="Cookie" name="X-RsCMStoreID" testname="X-RsCMStoreID">
                        <stringProp name="Cookie.value">${report_id}</stringProp>
                        <stringProp name="Cookie.domain" />
                        <stringProp name="Cookie.path" />
                        <boolProp name="Cookie.secure">false</boolProp>
                        <longProp name="Cookie.expires">0</longProp>
                        <boolProp name="Cookie.path_specified">true</boolProp>
                        <boolProp name="Cookie.domain_specified">true</boolProp>
                      </elementProp>
                    </collectionProp>
                    <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                  </CookieManager>
                  <hashTree />
                </hashTree>
                <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="updateHeaderWithModelsEtags">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

if (vars.get("tr_prefix") != "first_") {	
	sampler.getHeaderManager().removeHeaderNamed("If-None-Match");
	sampler.getHeaderManager().add(new Header("If-None-Match", "\"" + vars.get("etag_info") + "\""));
}

//${__BeanShell(vars.get("metadataPaths_" + vars.get("metadataPaths_index")))}
//${__V(metadataPaths_${metadataPaths_index})}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree />
                <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="get Models" />
                <hashTree>
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getModelsEtags">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">etag_info</stringProp>
                    <stringProp name="RegexExtractor.regex">ETag: "(.*?)"</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/search_path?searchPath default package">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp elementType="HTTPArgument" name="searchPath">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${report_model_path}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">searchPath</stringProp>
                        </elementProp>
                        <elementProp elementType="HTTPArgument" name="fields">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">fields</stringProp>
                          <stringProp name="Argument.value">id,searchPath,modificationTime,defaultName,options,parent.id,parent.searchPath,parent.defaultName,parent.effectiveUserCapabilities,parent.permissions,parent.routingServerGroup</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/search_path</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="reset restAsyncLoopCount">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put("restAsyncLoopCount", "0")</stringProp>
                    </JSR223PreProcessor>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responseCode">
                      <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                      <stringProp name="RegexExtractor.refname">responseCode</stringProp>
                      <stringProp name="RegexExtractor.regex">20[02]|304</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">ERROR</stringProp>
                      <stringProp name="RegexExtractor.match_number" />
                    </RegexExtractor>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 or 304 received">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1240665063">20[02]|304</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/search_path?searchPath packageConfiguration">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp elementType="HTTPArgument" name="searchPath">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${report_model_path}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">searchPath</stringProp>
                        </elementProp>
                        <elementProp elementType="HTTPArgument" name="fields">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">fields</stringProp>
                          <stringProp name="Argument.value">memberDisplayCountLimit</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/search_path</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="reset restAsyncLoopCount">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put("restAsyncLoopCount", "0")</stringProp>
                    </JSR223PreProcessor>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responseCode">
                      <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                      <stringProp name="RegexExtractor.refname">responseCode</stringProp>
                      <stringProp name="RegexExtractor.regex">20[02]|304</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">ERROR</stringProp>
                      <stringProp name="RegexExtractor.match_number" />
                    </RegexExtractor>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 or 304 received">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1240665063">20[02]|304</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                  <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If responseCode==202">
                    <stringProp name="IfController.condition">${__groovy("${responseCode}"=="202")}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ restAsyncLoop">
                      </GenericController>
                    <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="While responseCode==202">
          <stringProp name="WhileController.condition">${__groovy("${responseCode}"=="202" &amp;&amp; "${responseCode}"!="ERROR")}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get conversation update">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${conversationUrl}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="get conversation details from previous response">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//pattern_loc = java.util.regex.Pattern.compile("Location: (.*)")
//pattern_xcaa = java.util.regex.Pattern.compile("X-CA-Affinity: (.*)")
prevRH = prev.getResponseHeaders()

//pattern.matcher(prevRH).find()
log.debug(Label + " -- " + prevRH)
log.debug(Label + " -- " + "responseCode: ${responseCode}")

if (prevRH.contains("X-CA-Affinity")) {
	// extract using regex match on group 0 item 0
	conversationUrl = (prevRH =~ /Location: (.*)/)[0][1]
	XCAAffinity = (prevRH =~ /X-CA-Affinity: (.*)/)[0][1]

	vars.put("conversationUrl", conversationUrl)
	vars.put("X-CA-Affinity", XCAAffinity)
	
	log.debug(Label + " -- conv: "+conversationUrl)
	log.debug(Label + " -- xcaa: "+XCAAffinity)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responsdeCode">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responseCode</stringProp>
              <stringProp name="RegexExtractor.regex">20[02]</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">ERROR</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 received">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1478545310">20[02]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="check restAsyncLoopCount">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">if ("${responseCode}" != 200) {
	loopCount = Integer.parseInt("${restAsyncLoopCount}")
	if (loopCount &gt;= 100) {
		log.error("rest async max 100 iterations reached")
		prev.setSuccessful(false)
		prev.setResponseMessage("rest async max 100 iterations reached")
	} 
	vars.put("restAsyncLoopCount", loopCount.toString())
}</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
                </hashTree>
                <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each Extra Models">
                  <stringProp name="ForeachController.inputVal">metadataPaths</stringProp>
                  <stringProp name="ForeachController.returnVal">metadataPath</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getModelsEtags">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">etag_metadataPaths_${metadataPaths_index}</stringProp>
                    <stringProp name="RegexExtractor.regex">ETag: "(.*?)"</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/search_path?searchPath default package">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp elementType="HTTPArgument" name="searchPath">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${report_model_path}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">searchPath</stringProp>
                        </elementProp>
                        <elementProp elementType="HTTPArgument" name="fields">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">fields</stringProp>
                          <stringProp name="Argument.value">id,searchPath,modificationTime,defaultName,options,parent.id,parent.searchPath,parent.defaultName,parent.effectiveUserCapabilities,parent.permissions,parent.routingServerGroup</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/search_path</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="reset restAsyncLoopCount">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put("restAsyncLoopCount", "0")</stringProp>
                    </JSR223PreProcessor>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responseCode">
                      <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                      <stringProp name="RegexExtractor.refname">responseCode</stringProp>
                      <stringProp name="RegexExtractor.regex">20[02]|304</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">ERROR</stringProp>
                      <stringProp name="RegexExtractor.match_number" />
                    </RegexExtractor>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 or 304 received">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1240665063">20[02]|304</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/search_path?searchPath packageConfiguration">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp elementType="HTTPArgument" name="searchPath">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${report_model_path}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">searchPath</stringProp>
                        </elementProp>
                        <elementProp elementType="HTTPArgument" name="fields">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">fields</stringProp>
                          <stringProp name="Argument.value">memberDisplayCountLimit</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/search_path</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="reset restAsyncLoopCount">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put("restAsyncLoopCount", "0")</stringProp>
                    </JSR223PreProcessor>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responseCode">
                      <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                      <stringProp name="RegexExtractor.refname">responseCode</stringProp>
                      <stringProp name="RegexExtractor.regex">20[02]|304</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">ERROR</stringProp>
                      <stringProp name="RegexExtractor.match_number" />
                    </RegexExtractor>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 or 304 received">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1240665063">20[02]|304</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                  <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If responseCode==202">
                    <stringProp name="IfController.condition">${__groovy("${responseCode}"=="202")}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ restAsyncLoop">
                      </GenericController>
                    <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="While responseCode==202">
          <stringProp name="WhileController.condition">${__groovy("${responseCode}"=="202" &amp;&amp; "${responseCode}"!="ERROR")}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get conversation update">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${conversationUrl}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="get conversation details from previous response">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//pattern_loc = java.util.regex.Pattern.compile("Location: (.*)")
//pattern_xcaa = java.util.regex.Pattern.compile("X-CA-Affinity: (.*)")
prevRH = prev.getResponseHeaders()

//pattern.matcher(prevRH).find()
log.debug(Label + " -- " + prevRH)
log.debug(Label + " -- " + "responseCode: ${responseCode}")

if (prevRH.contains("X-CA-Affinity")) {
	// extract using regex match on group 0 item 0
	conversationUrl = (prevRH =~ /Location: (.*)/)[0][1]
	XCAAffinity = (prevRH =~ /X-CA-Affinity: (.*)/)[0][1]

	vars.put("conversationUrl", conversationUrl)
	vars.put("X-CA-Affinity", XCAAffinity)
	
	log.debug(Label + " -- conv: "+conversationUrl)
	log.debug(Label + " -- xcaa: "+XCAAffinity)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responsdeCode">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responseCode</stringProp>
              <stringProp name="RegexExtractor.regex">20[02]</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">ERROR</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 received">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1478545310">20[02]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="check restAsyncLoopCount">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">if ("${responseCode}" != 200) {
	loopCount = Integer.parseInt("${restAsyncLoopCount}")
	if (loopCount &gt;= 100) {
		log.error("rest async max 100 iterations reached")
		prev.setSuccessful(false)
		prev.setResponseMessage("rest async max 100 iterations reached")
	} 
	vars.put("restAsyncLoopCount", loopCount.toString())
}</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
                  <CacheManager enabled="true" guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager">
                    <boolProp name="clearEachIteration">false</boolProp>
                    <boolProp name="useExpires">true</boolProp>
                  </CacheManager>
                  <hashTree />
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="cafContextId">
                        <stringProp name="Header.name">cafContextId</stringProp>
                        <stringProp name="Header.value">${cafContextId}</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="User-Agent">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="authenticityToken">
                        <stringProp name="Header.name">authenticityToken</stringProp>
                        <stringProp name="Header.value">${authToken}</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-UseRsConsumerMode">
                        <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=authoring&amp;context=%7B%22perspective%22%3A%22authoring%22%2C%22content%22%3A%7B%22module%22%3A%22bi%2Fauthoring%2FrsContentView%22%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22isViewer%22%3Atrue%2C%22isNewFromModule%22%3Afalse%2C%22isNewFromPackage%22%3Afalse%2C%22cmProperties%22%3A%7B%22runInAdvancedViewer%22%3Atrue%2C%22executionPrompt%22%3Atrue%2C%22permissions%22%3A%5B%22execute%22%2C%22read%22%2C%22setPolicy%22%2C%22traverse%22%2C%22write%22%5D%2C%22modificationTime%22%3A%222016-01-05T19%3A47%3A58.420Z%22%2C%22options%22%3Anull%2C%22_meta%22%3A%7B%22links%22%3A%7B%22versions%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fversions%22%7D%2C%22self%22%3A%7B%22mimeType%22%3A%22application%2Fvnd.ibm.bi.report%2Bjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%22%7D%2C%22histories%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fhistories%22%7D%7D%7D%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22type%22%3A%22report%22%2C%22defaultName%22%3A%22small_nonMeasureList_html_av%22%2C%22version%22%3A2%7D%2C%22rsFinalRunOptions%22%3A%7B%22format%22%3A%22HTML%22%2C%22runInAdvancedViewer%22%3Atrue%2C%22prompt%22%3Atrue%7D%7D%7D</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-Requested-With">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                </hashTree>
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="module based">
                <stringProp name="IfController.condition">${__groovy("${isPackage}" == "false")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${moduleId}/metadata</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getModelsEtags">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">etag_metadataPaths_${metadataPaths_index}</stringProp>
                    <stringProp name="RegexExtractor.regex">ETag: "(.*?)"</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                </hashTree>
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset asyncTimer">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("asyncTimer", "0");
vars.put("asyncTimeNotReached", "true");
vars.put("report_sendAsync", "true");</stringProp>
            </JSR223Sampler>
            <hashTree />
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="/ ${tr_prefix}rs_runSpec_${report_name}">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If report ouput is HTML">
                <stringProp name="IfController.condition">${__groovy("${report_output_format}"=="HTML")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post runspecification ">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:runSpecification&gt;&lt;bus:specification xsi:type="bus:reportServiceReportSpecification"&gt;&lt;bus:value xsi:type="bus:specification"&gt;${report_spec}&lt;/bus:value&gt;&lt;/bus:specification&gt;&lt;bus:parameterValues xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"&gt;&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionStringArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xsd:string[1]"&gt;&lt;item&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;${attachmentOption}&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionString"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;${runSpec_prompt}&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocation&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionData"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;data&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:dataEnum"&gt;runWithAllData&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionNameValueArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[]"&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;CVGateway&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionAnyURI"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#saveSearchPath&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;${report_searchpath_tidy}&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:runSpecification&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking xsi:type=\"bus:tracking\"&gt;";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status xsi:type=\"xs:string\"&gt;", "&lt;/bus:status&gt;");
vars.put("report_conversationStatus", status);</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="SOAPAction">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201606/</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="User-Agent">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-UseRsConsumerMode">
                        <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Cache-Control">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Pragma">
                        <stringProp name="Header.name">Pragma</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-RsCMStoreID">
                        <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                        <stringProp name="Header.value">${report_id}</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                </hashTree>
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If report output is PDF">
                <stringProp name="IfController.condition">${__groovy("${report_output_format}"=="PDF")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post pdf runspecification ">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:runSpecification&gt;&lt;bus:specification xsi:type="bus:reportServiceReportSpecification"&gt;&lt;bus:value xsi:type="bus:specification"&gt;${report_spec}&lt;/bus:value&gt;&lt;/bus:specification&gt;&lt;bus:parameterValues xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"&gt;&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionStringArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xsd:string[1]"&gt;&lt;item&gt;PDF&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionEncoding"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionString"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocation&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionData"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;data&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:dataEnum"&gt;runWithAllData&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionNameValueArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[]"&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;CVGateway&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionAnyURI"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#saveSearchPath&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;${report_searchpath_tidy}&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionOutputEncapsulation"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputEncapsulation&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:outputEncapsulationEnum"&gt;URLQueryString&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:runSpecification&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking xsi:type=\"bus:tracking\"&gt;";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status xsi:type=\"xs:string\"&gt;", "&lt;/bus:status&gt;");
vars.put("report_conversationStatus", status);</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="SOAPAction">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201606/</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="User-Agent">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-UseRsConsumerMode">
                        <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Cache-Control">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Pragma">
                        <stringProp name="Header.name">Pragma</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-RsCMStoreID">
                        <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                        <stringProp name="Header.value">${report_id}</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                </hashTree>
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If report output is EXCEL">
                <stringProp name="IfController.condition">${__groovy("${report_output_format}"=="EXCEL")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post excel runspecification ">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:run&gt;&lt;bus:objectPath xsi:type="bus:searchPathSingleObject"&gt;storeID(&amp;quot;${report_id}&amp;quot;)&lt;/bus:objectPath&gt;&lt;bus:parameterValues xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"&gt;&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:genericOptionAnyURI"&gt;&lt;bus:name xsi:type="xsd:string"&gt;runOptionEnum#globalParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;&amp;lt;parameterValues xsi:type=&amp;quot;SOAP-ENC:Array&amp;quot; SOAP-ENC:arrayType=&amp;quot;bus:parameterValue[]&amp;quot; xmlns:SOAP-ENC=&amp;quot;http://schemas.xmlsoap.org/soap/encoding/&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:xs=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:bus=&amp;quot;http://developer.cognos.com/schemas/bibus/3/&amp;quot; xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&amp;gt;&amp;lt;/parameterValues&amp;gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionStringArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xsd:string[1]"&gt;&lt;item&gt;spreadsheetML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionEncoding"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionString"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocation&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionData"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;data&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:dataEnum"&gt;runWithAllData&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionNameValueArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[]"&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;CVGateway&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionOutputEncapsulation"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputEncapsulation&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:outputEncapsulationEnum"&gt;URLQueryString&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:run&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking xsi:type=\"bus:tracking\"&gt;";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status xsi:type=\"xs:string\"&gt;", "&lt;/bus:status&gt;");
vars.put("report_conversationStatus", status);</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="SOAPAction">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201606/</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="User-Agent">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-UseRsConsumerMode">
                        <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Cache-Control">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Pragma">
                        <stringProp name="Header.name">Pragma</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-RsCMStoreID">
                        <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                        <stringProp name="Header.value">${report_id}</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                </hashTree>
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ asyncLoop">
                </GenericController>
              <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="asyncLoop">
          <stringProp name="WhileController.condition">${__groovy("${report_sendAsync}"=="true")}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update asyncTimer">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int asyncTimer = Integer.parseInt(vars.get("asyncTimer"));
asyncTimer = asyncTimer + 1;
if (asyncTimer &gt;= 300) {
	log.error("async attempt limit reached");
	vars.put("report_sendAsync", "false");
	vars.put("report_asyncTimeoutReached", "true");
}
vars.put("asyncTimer", "" + asyncTimer);
</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ async wait">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:rns1="http://developer.cognos.com/schemas/reportService/1"&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:wait&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;/rns1:wait&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
status = status.substring(status.indexOf("&gt;") + 1)
vars.put("report_conversationStatus", status);</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="SOAPAction">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">${soapAction_rs}.absolute</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-UseRsConsumerMode">
                  <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-RsCMStoreID">
                  <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                  <stringProp name="Header.value">${report_id}</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ process the report output">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get("reportResponse");</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get pdf_url ">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">pdf_url</stringProp>
                  <stringProp name="RegexExtractor.regex">(\?b_action=.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">\.\.\/v1\/disp(\?[^)]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get report_spec_encoded">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">report_spec_encoded</stringProp>
                  <stringProp name="RegexExtractor.regex">xsi:type="bus:specification"&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get stateData">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">stateData</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;bus:stateData xsi:type="bus:xmlEncodedXML"&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If report ouput NOT PDF &amp;&amp; NOT EXCEL">
                <stringProp name="IfController.condition">${__groovy("${report_output_format}"!="PDF" &amp;&amp; "${report_output_format}"!="EXCEL")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/datacheck and chart if no prompts">
                  <stringProp name="IfController.condition">${__groovy("${hasPrompt}" == "false")}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ check data and chart count">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">log.info("Report " + vars.get("report_name") + " does not contain prompts.");
return vars.get("reportResponse");</stringProp>
                  </JSR223Sampler>
                  <hashTree>
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-505831277">${report_datacheck}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                    <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="number of charts in response is expected?">
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="filename" />
                      <stringProp name="parameters" />
                      <stringProp name="script">log.debug("chart count expected: " + vars.get("report_expected_chart_count") + " chart count actual: " + vars.get("chart_urls_matchNr"));
if (vars.get("report_expected_chart_count") != vars.get("chart_urls_matchNr")) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage("expected chart count " + vars.get("report_expected_chart_count") + " doest not match actual chart count " + vars.get("chart_urls_matchNr"));
}</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223Assertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
                <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each chart_url in chart_urls">
                  <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
                  <stringProp name="ForeachController.returnVal">chart_url</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
vars.put("chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("chart_url")));</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding" />
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */* </stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1654885887">Content-Type: image/png</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If report output is PDF">
                <stringProp name="IfController.condition">${__groovy("${report_output_format}"=="PDF")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler enabled="false" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode PDF url">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
//log.info("===============" + vars.get("chart_urls"));
vars.put("iframeSrcUrl_decoded", StringEscapeUtils.unescapeHtml4(vars.get("iframeSrcUrl")));
</stringProp>
                </JSR223Sampler>
                <hashTree />
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Sanitize pdf_url">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">String url = vars.get("pdf_url");
cleanURL = url.trim();
vars.put("pdf_url", cleanURL);</stringProp>
                </JSR223Sampler>
                <hashTree />
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ execute PDF from pdf_url">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${pdf_url}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */* </stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an application/pdf?">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1248334925">application/pdf</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                </hashTree>
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If report output is EXCEL">
                <stringProp name="IfController.condition">${__groovy("${report_output_format}"=="EXCEL")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler enabled="false" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode PDF url">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
//log.info("===============" + vars.get("chart_urls"));
vars.put("iframeSrcUrl_decoded", StringEscapeUtils.unescapeHtml4(vars.get("iframeSrcUrl")));
</stringProp>
                </JSR223Sampler>
                <hashTree />
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Sanitize pdf_url">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">String url = vars.get("pdf_url");
cleanURL = url.trim();
vars.put("pdf_url", cleanURL);</stringProp>
                </JSR223Sampler>
                <hashTree />
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ execute EXCEL from pdf_url">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${pdf_url}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */* </stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it spreadsheet">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1993842850">application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset action_counter">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename" />
            <stringProp name="parameters" />
            <stringProp name="script">vars.put("action_counter", "0");</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree />
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="run prompt">
          <stringProp name="IfController.condition">${__groovy(${hasPrompt})}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}rs_promptPage_${report_name}">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get prompt info from report reponse">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.util.ContentUtil;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;

report_response = vars.get("reportResponse");

prompt_spec = ContentUtil.getOptional(report_response, "&lt;bus:value xsi:type=\"bus:specification\"&gt;", "&lt;/bus:value&gt;");
vars.put("prompt_spec", prompt_spec);

prompt_parameters = "&lt;bus:parameters xmlns:bus=\"http://developer.cognos.com/schemas/bibus/3/\" xsi:type=\"SOAP-ENC:Array\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" SOAP-ENC:arrayType=\"bus:parameterValue[0]\" xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"/&gt;";
if(report_response.contains("asynchDetailParameterValues")){
	String res = ContentUtil.getOptional(report_response, "&lt;item xsi:type=\"bus:asynchDetailParameterValues\"&gt;", "&lt;/item&gt;");
	String valueCount = ContentUtil.getOptional(res, "SOAP-ENC:arrayType=\"bus:parameterValue[", "]\"&gt;");
	if(valueCount != "0") {
		String itemsRaw = ContentUtil.getOptional(report_response, "&lt;item xsi:type=\"bus:asynchDetailParameterValues\"&gt;", "&lt;/bus:parameters&gt;");
		String items = ContentUtil.getOptional(itemsRaw + "&lt;/bus:parameters&gt;", "]\"&gt;", "&lt;/bus:parameters&gt;");
		prompt_parameters = "&lt;bus:parameters xmlns:bus=\"http://developer.cognos.com/schemas/bibus/3/\" xsi:type=\"SOAP-ENC:Array\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" SOAP-ENC:arrayType=\"bus:parameterValue[" + valueCount + "]\" xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"&gt;" + items + "&lt;/bus:parameters&gt;";
	}
}
vars.put("prompt_parameters", prompt_parameters);

prompt_stateData = ContentUtil.getOptional(report_response, "&lt;bus:stateData xsi:type=\"bus:xmlEncodedXML\"&gt;", "&lt;/bus:stateData&gt;");
vars.put("prompt_stateData", prompt_stateData);

String prompts_parameter_values = "";
JsonArray prompts = new JsonStreamParser(vars.get("report_prompt")).next().getAsJsonArray();
if(prompts.size() &gt; 0) {
	for(int i = 0; i &lt; prompts.size(); i++) {
		JsonObject prompt = prompts.get(i).getAsJsonObject();
		log.debug("JsonObject is: " + prompt.toString());
		String key = prompt.get("name").getAsString();
		String value = prompt.get("value").getAsString();
		int rbIndex = report_response.indexOf("\" displayValue=\"" + value + "\"/&gt;");
//		log.info(report_response.substring(0, rbIndex));
		int lbIndex = report_response.substring(0, rbIndex).lastIndexOf("useValue=\"") + 10;
//		log.info("use value indx = " + "\" displayValue=\"" + value + "\"/&gt;" + rbIndex + " " + lbIndex);
		String useValue = report_response.substring(lbIndex, rbIndex);
//		String useValue = ContentUtil.getOptional(report_response, "userValue=\"", "\" displayValue=\"" + value + "\"/&gt;");
		log.debug("use value=" + useValue);
		parameter_value = "&lt;item xsi:type=\"bus:parameterValue\"&gt;&lt;bus:name xsi:type=\"xsd:string\"&gt;" + key + "&lt;/bus:name&gt;" + "&lt;bus:value xsi:type=\"SOAP-ENC:Array\" SOAP-ENC:arrayType=\"bus:parmValueItem[]\"&gt;" + "&lt;item xsi:type=\"bus:simpleParmValueItem\"&gt;" + "&lt;bus:inclusive xsi:type=\"xs:boolean\"&gt;true&lt;/bus:inclusive&gt;" + "&lt;bus:display xsi:type=\"xsd:string\"&gt;" + value + "&lt;/bus:display&gt;" + "&lt;bus:use xsi:type=\"xsd:string\"&gt;" + useValue + "&lt;/bus:use&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;";
		
		prompts_parameter_values = prompts_parameter_values + parameter_value;
	}
}
vars.put("prompts_parameter_values", prompts_parameter_values);

log.debug(prompts_parameter_values);</stringProp>
            </JSR223Sampler>
            <hashTree />
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset asyncTimer">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("asyncTimer", "0");
vars.put("asyncTimeNotReached", "true");
vars.put("report_sendAsync", "true");</stringProp>
            </JSR223Sampler>
            <hashTree />
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post runspecification ">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;bus:tracking xsi:type="bus:tracking"&gt;${report_busTracking}&lt;/bus:tracking&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:forward&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;bus:name xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;runSpecification&lt;/bus:name&gt;&lt;bus:options xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:option[17]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"&gt;
						&lt;item xsi:type="bus:asynchOptionInt"&gt;
							&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:int"&gt;5&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:asynchOptionInt"&gt;
							&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:int"&gt;30&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionStringArray"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;
							&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;
								&lt;item xsi:type="xs:string"&gt;XHTML&lt;/item&gt;
							&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:asynchOptionEncoding"&gt;
							&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;
							&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionAnyURI"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionString"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionBoolean"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;${runSpec_prompt}&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionAnyURI"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocation&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionData"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;data&lt;/bus:name&gt;
							&lt;bus:value xsi:type="bus:dataEnum"&gt;runWithAllData&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionBoolean"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionNameValueArray"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;
							&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[3]"&gt;
								&lt;item xsi:type="bus:nameValue"&gt;
									&lt;bus:name xsi:type="xs:string"&gt;CVGateway&lt;/bus:name&gt;
									&lt;bus:value xsi:type="xs:string"&gt;../v1/disp&lt;/bus:value&gt;
								&lt;/item&gt;
								&lt;item xsi:type="bus:nameValue"&gt;
									&lt;bus:name xsi:type="xs:string"&gt;renderIntermediateXML&lt;/bus:name&gt;
									&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;
								&lt;/item&gt;
								&lt;item xsi:type="bus:nameValue"&gt;
									&lt;bus:name xsi:type="xs:string"&gt;renderEnvironment&lt;/bus:name&gt;
									&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;
								&lt;/item&gt;
							&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionAnyURI"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#saveSearchPath&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:string"&gt;${report_searchpath_tidy}&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionLanguageArray"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocale&lt;/bus:name&gt;
							&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;
								&lt;item xsi:type="xs:string"&gt;en-us&lt;/item&gt;
							&lt;/bus:value&gt;
						&lt;/item&gt;
					&lt;/bus:options&gt;${prompt_parameters}&lt;bus:specification xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:asynchSpecification[1]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"&gt;
						&lt;item xsi:type="bus:reportServiceReportSpecification"&gt;
							&lt;bus:value xsi:type="bus:specification"&gt;${prompt_spec}&lt;/bus:value&gt;
						&lt;/item&gt;
					&lt;/bus:specification&gt;&lt;bus:stateData xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="bus:xmlEncodedXML" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;${prompt_stateData}&lt;/bus:stateData&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"&gt;${prompts_parameter_values}&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionStringArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xsd:string[1]"&gt;&lt;item&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;${attachmentOption}&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;${runSpec_prompt}&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionNameValueArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[]"&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;CVGateway&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:forward&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking xsi:type=\"bus:tracking\"&gt;";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status xsi:type=\"xs:string\"&gt;", "&lt;/bus:status&gt;");
vars.put("report_conversationStatus", status);</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <XPathExtractor enabled="false" guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="busTracking">
                <stringProp name="XPathExtractor.default" />
                <stringProp name="XPathExtractor.refname">report_busTracking</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">/SOAP-ENV:Envelope/SOAP-ENV:Header/bus:biBusHeader/bus:tracking</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">true</boolProp>
                <boolProp name="XPathExtractor.fragment">true</boolProp>
                <stringProp name="TestPlan.comments">get tracking from runspec response</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              </XPathExtractor>
              <hashTree />
              <XPathExtractor enabled="false" guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="status">
                <stringProp name="XPathExtractor.default" />
                <stringProp name="XPathExtractor.refname">report_conversationStatus</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">/SOAP-ENV:Envelope/SOAP-ENV:Header/bus:biBusHeader/bus:tracking/bus:conversationContext/bus:status</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">true</boolProp>
                <stringProp name="Scope.variable">report_conversationContext</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              </XPathExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="SOAPAction">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201606/.high</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-UseRsConsumerMode">
                    <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Cache-Control">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Pragma">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-RsCMStoreID">
                    <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                    <stringProp name="Header.value">${report_id}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ asyncLoop">
              </GenericController>
            <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="asyncLoop">
          <stringProp name="WhileController.condition">${__groovy("${report_sendAsync}"=="true")}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update asyncTimer">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int asyncTimer = Integer.parseInt(vars.get("asyncTimer"));
asyncTimer = asyncTimer + 1;
if (asyncTimer &gt;= 300) {
	log.error("async attempt limit reached");
	vars.put("report_sendAsync", "false");
	vars.put("report_asyncTimeoutReached", "true");
}
vars.put("asyncTimer", "" + asyncTimer);
</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ async wait">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:rns1="http://developer.cognos.com/schemas/reportService/1"&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:wait&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;/rns1:wait&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
status = status.substring(status.indexOf("&gt;") + 1)
vars.put("report_conversationStatus", status);</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="SOAPAction">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">${soapAction_rs}.absolute</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-UseRsConsumerMode">
                  <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-RsCMStoreID">
                  <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                  <stringProp name="Header.value">${report_id}</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ process the report output">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return vars.get("reportResponse");</stringProp>
            </JSR223Sampler>
            <hashTree>
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                <stringProp name="RegexExtractor.regex">\.\.\/v1\/disp(\?[^)]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get report_spec_encoded">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">report_spec_encoded</stringProp>
                <stringProp name="RegexExtractor.regex">xsi:type="bus:specification"&gt;([^&lt;]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get stateData">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">stateData</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;bus:stateData xsi:type="bus:xmlEncodedXML"&gt;([^&lt;]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-505831277">${report_datacheck}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="number of charts in response is expected?">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename" />
                <stringProp name="parameters" />
                <stringProp name="script">log.debug("chart count expected: " + vars.get("report_expected_chart_count") + " chart count actual: " + vars.get("chart_urls_matchNr"));
if (vars.get("report_expected_chart_count") != vars.get("chart_urls_matchNr")) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage("expected chart count " + vars.get("report_expected_chart_count") + " doest not match actual chart count " + vars.get("chart_urls_matchNr"));
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree />
            </hashTree>
            <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each chart_url in chart_urls">
              <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
              <stringProp name="ForeachController.returnVal">chart_url</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
vars.put("chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("chart_url")));</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */* </stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1654885887">Content-Type: image/png</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each action">
          <stringProp name="ForeachController.inputVal">report_actions</stringProp>
          <stringProp name="ForeachController.returnVal">report_action</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increment action_counter">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// manually control the action_counter because jmeter's action_counter cannot be reset mid-execution of a thread group loop
action_counter = Integer.parseInt(vars.get("action_counter"));
action_counter = action_counter + 1;
vars.put("action_counter", String.valueOf(action_counter));</stringProp>
          </JSR223Sampler>
          <hashTree />
          <BeanShellSampler enabled="true" guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="/ reset asyncTimer">
            <stringProp name="BeanShellSampler.query">vars.put("asyncTimer", "0");
vars.put("asyncTimeNotReached", "true");
vars.put("report_sendAsync", "true");</stringProp>
            <stringProp name="BeanShellSampler.filename" />
            <stringProp name="BeanShellSampler.parameters" />
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree />
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ if action type is prompt">
            <stringProp name="IfController.condition">${__groovy("${report_action}" == "prompt")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}${report_action}_promptPage_${report_name}">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <BeanShellSampler enabled="true" guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="/ get action prompt info from report reponse">
                <stringProp name="BeanShellSampler.query">import com.ibm.bi.util.ContentUtil;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;

report_response = vars.get("reportResponse");

prompt_spec = ContentUtil.getOptional(report_response, "&lt;bus:value xsi:type=\"bus:specification\"&gt;", "&lt;/bus:value&gt;");
vars.put("prompt_spec", prompt_spec);

prompt_parameters = "&lt;bus:parameters xmlns:bus=\"http://developer.cognos.com/schemas/bibus/3/\" xsi:type=\"SOAP-ENC:Array\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" SOAP-ENC:arrayType=\"bus:parameterValue[0]\" xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"/&gt;";
if(report_response.contains("asynchDetailParameterValues")){
	String res = ContentUtil.getOptional(report_response, "&lt;item xsi:type=\"bus:asynchDetailParameterValues\"&gt;", "&lt;/item&gt;");
	String valueCount = ContentUtil.getOptional(res, "SOAP-ENC:arrayType=\"bus:parameterValue[", "]\"&gt;");
	if(valueCount != "0") {
		String itemsRaw = ContentUtil.getOptional(report_response, "&lt;item xsi:type=\"bus:asynchDetailParameterValues\"&gt;", "&lt;/bus:parameters&gt;");
		String items = ContentUtil.getOptional(itemsRaw + "&lt;/bus:parameters&gt;", "]\"&gt;", "&lt;/bus:parameters&gt;");
		prompt_parameters = "&lt;bus:parameters xmlns:bus=\"http://developer.cognos.com/schemas/bibus/3/\" xsi:type=\"SOAP-ENC:Array\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" SOAP-ENC:arrayType=\"bus:parameterValue[" + valueCount + "]\" xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"&gt;" + items + "&lt;/bus:parameters&gt;";
	}
}
vars.put("prompt_parameters", prompt_parameters);

prompt_stateData = ContentUtil.getOptional(report_response, "&lt;bus:stateData xsi:type=\"bus:xmlEncodedXML\"&gt;", "&lt;/bus:stateData&gt;");
vars.put("prompt_stateData", prompt_stateData);

String prompts_parameter_values = "";
JsonArray prompts = new JsonStreamParser(vars.get("report_actions_prompt_" + vars.get("action_counter"))).next().getAsJsonArray();

if(prompts.size() &gt; 0) {
	for(int i = 0; i &lt; prompts.size(); i++) {
		JsonObject prompt = prompts.get(i).getAsJsonObject();
		log.debug("JsonObject is: " + prompt.toString());
		String key = prompt.get("name").getAsString();
		String value = prompt.get("value").getAsString();
		int rbIndex = report_response.indexOf("\" displayValue=\"" + value + "\"/&gt;");
//		log.info(report_response.substring(0, rbIndex));
		int lbIndex = report_response.substring(0, rbIndex).lastIndexOf("useValue=\"") + 10;
//		log.info("use value indx = " + "\" displayValue=\"" + value + "\"/&gt;" + rbIndex + " " + lbIndex);
		String useValue = report_response.substring(lbIndex, rbIndex);
//		String useValue = ContentUtil.getOptional(report_response, "userValue=\"", "\" displayValue=\"" + value + "\"/&gt;");
		log.debug("use value=" + useValue);
		parameter_value = "&lt;item xsi:type=\"bus:parameterValue\"&gt;&lt;bus:name xsi:type=\"xsd:string\"&gt;" + key + "&lt;/bus:name&gt;" + "&lt;bus:value xsi:type=\"SOAP-ENC:Array\" SOAP-ENC:arrayType=\"bus:parmValueItem[]\"&gt;" + "&lt;item xsi:type=\"bus:simpleParmValueItem\"&gt;" + "&lt;bus:inclusive xsi:type=\"xs:boolean\"&gt;true&lt;/bus:inclusive&gt;" + "&lt;bus:display xsi:type=\"xsd:string\"&gt;" + value + "&lt;/bus:display&gt;" + "&lt;bus:use xsi:type=\"xsd:string\"&gt;" + useValue + "&lt;/bus:use&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;";
		
		prompts_parameter_values = prompts_parameter_values + parameter_value;
	}
}
vars.put("prompts_parameter_values", prompts_parameter_values);

log.debug(prompts_parameter_values);</stringProp>
                <stringProp name="BeanShellSampler.filename" />
                <stringProp name="BeanShellSampler.parameters" />
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post runspecification ">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;bus:tracking xsi:type="bus:tracking"&gt;${report_busTracking}&lt;/bus:tracking&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:forward&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;bus:name xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;runSpecification&lt;/bus:name&gt;&lt;bus:options xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:option[17]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"&gt;
						&lt;item xsi:type="bus:asynchOptionInt"&gt;
							&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:int"&gt;5&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:asynchOptionInt"&gt;
							&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:int"&gt;30&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionStringArray"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;
							&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;
								&lt;item xsi:type="xs:string"&gt;XHTML&lt;/item&gt;
							&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:asynchOptionEncoding"&gt;
							&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;
							&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionAnyURI"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionString"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionBoolean"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;${runSpec_prompt}&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionAnyURI"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocation&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionData"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;data&lt;/bus:name&gt;
							&lt;bus:value xsi:type="bus:dataEnum"&gt;runWithAllData&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionBoolean"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionNameValueArray"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;
							&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[3]"&gt;
								&lt;item xsi:type="bus:nameValue"&gt;
									&lt;bus:name xsi:type="xs:string"&gt;CVGateway&lt;/bus:name&gt;
									&lt;bus:value xsi:type="xs:string"&gt;../v1/disp&lt;/bus:value&gt;
								&lt;/item&gt;
								&lt;item xsi:type="bus:nameValue"&gt;
									&lt;bus:name xsi:type="xs:string"&gt;renderIntermediateXML&lt;/bus:name&gt;
									&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;
								&lt;/item&gt;
								&lt;item xsi:type="bus:nameValue"&gt;
									&lt;bus:name xsi:type="xs:string"&gt;renderEnvironment&lt;/bus:name&gt;
									&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;
								&lt;/item&gt;
							&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionBoolean"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:genericOptionAnyURI"&gt;
							&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#saveSearchPath&lt;/bus:name&gt;
							&lt;bus:value xsi:type="xs:string"&gt;${report_searchpath_tidy}&lt;/bus:value&gt;
						&lt;/item&gt;
						&lt;item xsi:type="bus:runOptionLanguageArray"&gt;
							&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocale&lt;/bus:name&gt;
							&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;
								&lt;item xsi:type="xs:string"&gt;en-us&lt;/item&gt;
							&lt;/bus:value&gt;
						&lt;/item&gt;
					&lt;/bus:options&gt;${prompt_parameters}&lt;bus:specification xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:asynchSpecification[1]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"&gt;
						&lt;item xsi:type="bus:reportServiceReportSpecification"&gt;
							&lt;bus:value xsi:type="bus:specification"&gt;${prompt_spec}&lt;/bus:value&gt;
						&lt;/item&gt;
					&lt;/bus:specification&gt;&lt;bus:stateData xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="bus:xmlEncodedXML" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;${prompt_stateData}&lt;/bus:stateData&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"&gt;${prompts_parameter_values}&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionStringArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xsd:string[1]"&gt;&lt;item&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;${attachmentOption}&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;${runSpec_prompt}&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionNameValueArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[]"&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;CVGateway&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:forward&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking xsi:type=\"bus:tracking\"&gt;";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status xsi:type=\"xs:string\"&gt;", "&lt;/bus:status&gt;");
vars.put("report_conversationStatus", status);</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="SOAPAction">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201606/.high</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-UseRsConsumerMode">
                      <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Cache-Control">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Pragma">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-RsCMStoreID">
                      <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                      <stringProp name="Header.value">${report_id}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ asyncLoop">
                </GenericController>
              <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="asyncLoop">
          <stringProp name="WhileController.condition">${__groovy("${report_sendAsync}"=="true")}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update asyncTimer">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int asyncTimer = Integer.parseInt(vars.get("asyncTimer"));
asyncTimer = asyncTimer + 1;
if (asyncTimer &gt;= 300) {
	log.error("async attempt limit reached");
	vars.put("report_sendAsync", "false");
	vars.put("report_asyncTimeoutReached", "true");
}
vars.put("asyncTimer", "" + asyncTimer);
</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ async wait">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:rns1="http://developer.cognos.com/schemas/reportService/1"&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:wait&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;/rns1:wait&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
status = status.substring(status.indexOf("&gt;") + 1)
vars.put("report_conversationStatus", status);</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="SOAPAction">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">${soapAction_rs}.absolute</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-UseRsConsumerMode">
                  <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-RsCMStoreID">
                  <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                  <stringProp name="Header.value">${report_id}</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ process the report output">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get("reportResponse");</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">\.\.\/v1\/disp(\?[^)]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get report_spec_encoded">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">report_spec_encoded</stringProp>
                  <stringProp name="RegexExtractor.regex">xsi:type="bus:specification"&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get stateData">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">stateData</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;bus:stateData xsi:type="bus:xmlEncodedXML"&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-651725182">${__V(report_actions_datacheck_${action_counter})}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="number of charts in response is expected?">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">log.debug("chart count expected: " + vars.get("report_actions_expected_chart_count_" + vars.get("action_counter")) + " chart count actual: " + vars.get("chart_urls_matchNr"));
if (vars.get("report_actions_expected_chart_count_" + vars.get("action_counter")) != vars.get("chart_urls_matchNr")) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage("expected chart count " + vars.get("report_actions_expected_chart_count_" + vars.get("action_counter")) + " doest not match actual chart count " + vars.get("chart_urls_matchNr"));
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree />
              </hashTree>
              <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each chart_url in chart_urls">
                <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
                <stringProp name="ForeachController.returnVal">chart_url</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
vars.put("chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("chart_url")));</stringProp>
                </JSR223Sampler>
                <hashTree />
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding" />
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */* </stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1654885887">Content-Type: image/png</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ if action type is not prompt">
            <stringProp name="IfController.condition">${__groovy("${report_action}" != "prompt")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}${report_action}_${report_name}">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get action info from report reponse">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:rns1="http://developer.cognos.com/schemas/reportService/1"&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:${report_action}&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;bus:name xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;runSpecification&lt;/bus:name&gt;&lt;bus:options xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:option[19]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionStringArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;&lt;item xsi:type="xs:string"&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;${attachmentOption}&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionString"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocation&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionData"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;data&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:dataEnum"&gt;runWithAllData&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionNameValueArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[3]"&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;bus:name xsi:type="xs:string"&gt;CVGateway&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:string"&gt;../v1/disp&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;bus:name xsi:type="xs:string"&gt;renderIntermediateXML&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;bus:name xsi:type="xs:string"&gt;renderEnvironment&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:string"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionAnyURI"&gt;&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#saveSearchPath&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:string"&gt;${report_searchpath_tidy}&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;selectionBasedFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionInt"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;verticalElements&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:int"&gt;20&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;advancedOutput&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;allowAnnotations&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionLanguageArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xs:string[1]"&gt;&lt;item xsi:type="xs:string"&gt;en-us&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xs:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;bus:parameters xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:parameterValue[0]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"/&gt;&lt;bus:specification xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="SOAP-ENC:Array" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENC:arrayType="bus:asynchSpecification[1]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"&gt;&lt;item xsi:type="bus:reportServiceReportSpecification"&gt;&lt;bus:value xsi:type="bus:specification"&gt;${report_spec_encoded}&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:specification&gt;&lt;bus:stateData xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xsi:type="bus:xmlEncodedXML" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;${stateData}&lt;/bus:stateData&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"&gt;&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionStringArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xsd:string[1]"&gt;&lt;item&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionNameValueArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[]"&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;CVGateway&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:${report_action}&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking xsi:type=\"bus:tracking\"&gt;";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status xsi:type=\"xs:string\"&gt;", "&lt;/bus:status&gt;");
vars.put("report_conversationStatus", status);</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="SOAPAction">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201606/.high</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-UseRsConsumerMode">
                      <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Cache-Control">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Pragma">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-RsCMStoreID">
                      <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                      <stringProp name="Header.value">${report_id}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ asyncLoop">
                </GenericController>
              <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="asyncLoop">
          <stringProp name="WhileController.condition">${__groovy("${report_sendAsync}"=="true")}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update asyncTimer">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int asyncTimer = Integer.parseInt(vars.get("asyncTimer"));
asyncTimer = asyncTimer + 1;
if (asyncTimer &gt;= 300) {
	log.error("async attempt limit reached");
	vars.put("report_sendAsync", "false");
	vars.put("report_asyncTimeoutReached", "true");
}
vars.put("asyncTimer", "" + asyncTimer);
</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ async wait">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:rns1="http://developer.cognos.com/schemas/reportService/1"&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:wait&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"/&gt;&lt;/rns1:wait&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("report_busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
status = status.substring(status.indexOf("&gt;") + 1)
vars.put("report_conversationStatus", status);</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.debug("conversationStatus: " + vars.get("report_conversationStatus"));
if (vars.get("report_conversationStatus") != null) {
	if (!vars.get("report_conversationStatus").equals("conversationComplete")) {
		log.debug("report_release: " + vars.get("report_busTracking"));
		vars.put("report_release", "true");
	}
	if (vars.get("report_conversationStatus").equals("conversationComplete")) {
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}
	if (vars.get("report_conversationStatus").equals("complete")) {
		vars.put("report_sendAsync", "false");
	}
	if (vars.get("report_conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("report_release") != null) {
			vars.remove("report_release");
			vars.put("report_sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("report_sendAsync"));
vars.put("reportResponse", prev.getResponseDataAsString());//getSamplerData());</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="SOAPAction">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">${soapAction_rs}.absolute</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-UseRsConsumerMode">
                  <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-RsCMStoreID">
                  <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                  <stringProp name="Header.value">${report_id}</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ process the report output">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get("reportResponse");</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">\.\.\/v1\/disp(\?[^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get stateData">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">stateData</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;bus:stateData xsi:type="bus:xmlEncodedXML"&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-651725182">${__V(report_actions_datacheck_${action_counter})}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="number of charts in response is expected?">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">log.debug("chart count expected: " + vars.get("report_actions_expected_chart_count_" + vars.get("action_counter")) + " chart count actual: " + vars.get("chart_urls_matchNr"));
if (vars.get("report_actions_expected_chart_count_" + vars.get("action_counter")) != vars.get("chart_urls_matchNr")) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage("expected chart count " + vars.get("report_actions_expected_chart_count_" + vars.get("action_counter")) + " doest not match actual chart count " + vars.get("chart_urls_matchNr"));
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree />
              </hashTree>
              <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each chart_url in chart_urls">
                <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
                <stringProp name="ForeachController.returnVal">chart_url</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

String url = vars.get("chart_url");
if(url.endsWith(");")) {
	url = url.substring(0, url.length() - 2);
	vars.put("chart_url", url);
}

vars.put("chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("chart_url")));</stringProp>
                </JSR223Sampler>
                <hashTree />
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding" />
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */* </stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1654885887">Content-Type: image/png</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include release">
          </GenericController>
        <hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/release">
          <stringProp name="IfController.condition">${__groovy("${report_release}"=="true")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="release">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="release">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:release&gt;&lt;bus:conversation xsi:type="bus:asynchRequest"&gt;&lt;/bus:conversation&gt;&lt;/rns1:release&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="SOAPAction">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">${soapAction_rs}.session</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-UseRsConsumerMode">
                    <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Cache-Control">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Pragma">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="clear release flag">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("report_release", "false")</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
    </hashTree>
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If not advanced_viewer">
          <stringProp name="IfController.condition">${__groovy("${authoring_perspective}"=="false" &amp;&amp; "${report_output_format}"!="interactiveReport" &amp;&amp; "${report_output_format}"!="savedOutput_html" &amp;&amp; "${report_output_format}"!="savedOutput_pdf" &amp;&amp; "${report_output_format}"!="savedOutput_html_latestVersion" &amp;&amp; "${report_output_format}"!="savedOutput_pdf_latestVersion")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ / runReport_classic">
            </GenericController>
          <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ runReport_classic" />
        <hashTree>
          <Arguments enabled="false" guiclass="ArgumentsPanel" testclass="Arguments" testname="manual inputs for debugging - normally disabled, do not delete">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="Argument" name="url_base">
                <stringProp name="Argument.name">url_base</stringProp>
                <stringProp name="Argument.value">http://${serverName}:${serverPort}${urlPath}/bi</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">mostly for the referer header value</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="report_id">
                <stringProp name="Argument.name">report_id</stringProp>
                <stringProp name="Argument.value">iB8B0EDF0EDCA442D86FF534AE66CA5B6</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">ID from the properties of the report</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="report_name">
                <stringProp name="Argument.name">report_name</stringProp>
                <stringProp name="Argument.value">master_detail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="report_output_format">
                <stringProp name="Argument.name">report_output_format</stringProp>
                <stringProp name="Argument.value">HTML</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="report_datacheck">
                <stringProp name="Argument.name">report_datacheck</stringProp>
                <stringProp name="Argument.value">14,111,228.67</stringProp>
                <stringProp name="Argument.desc">something that only appears in the report output, indicating a successful run</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="report_expected_chart_count">
                <stringProp name="Argument.name">report_expected_chart_count</stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">total number of expected charts in the report output</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="report_actions_1">
                <stringProp name="Argument.name">report_actions_1</stringProp>
                <stringProp name="Argument.value">nextPage</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="report_actions_datacheck_1">
                <stringProp name="Argument.name">report_actions_datacheck_1</stringProp>
                <stringProp name="Argument.value">1,969,460.13</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="report_actions_2">
                <stringProp name="Argument.name">report_actions_2</stringProp>
                <stringProp name="Argument.value">nextPage</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="report_actions_datacheck_2">
                <stringProp name="Argument.name">report_actions_datacheck_2</stringProp>
                <stringProp name="Argument.value">516,972.39</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="tr_prefix">
                <stringProp name="Argument.name">tr_prefix</stringProp>
                <stringProp name="Argument.value" />
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">used for things like "first_" for identifying cold cache requests</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">This "User Defined Variables" test element should be disabled for normal test execution. It contains a list of all inputs required to run this fragment. </stringProp>
          </Arguments>
          <hashTree />
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="run report in classic viewer" />
          <hashTree>
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}runcv_${report_name}">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get default output format">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">defaultOutputFormat</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">defaultName,base.defaultName,executionPrompt,base.executionPrompt,options,base.options,permissions,base.permissions,runAsOwner,base.runAsOwner,runInAdvancedViewer,base.runInAdvancedViewer,runWithOwnerCapabilities,base.runWithOwnerCapabilities,type,base.type</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get prompt exection">
                  <stringProp name="JSONPostProcessor.referenceNames">executionPrompt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..executionPrompt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If first_open">
                <stringProp name="TestPlan.comments">The perspective request should only be called for the first opens</stringProp>
                <stringProp name="IfController.condition">${__groovy("${tr_prefix}"=="first_")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ open classic viewer perspective">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/classicviewer</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-Requested-With">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">defaultName%2Cowner.defaultName%2Cancestors%2Cpermissions%2Chidden%2Cdisabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=classicviewer&amp;id=${report_id}&amp;module=bi%2Fclassicviewer%2FcvContentView&amp;isViewer=true&amp;isNewFromModule=false&amp;isNewFromPackage=false&amp;isNewDataSetFromModule=false&amp;isNewDataSetFromPackage=false&amp;isTemplate=false&amp;isDataset=false&amp;UIProfile=Titan&amp;cmProperties%5BrunInAdvancedViewer%5D=&amp;cmProperties%5BexecutionPrompt%5D=true&amp;cmProperties%5Bpermissions%5D%5B%5D=execute&amp;cmProperties%5Bpermissions%5D%5B%5D=read&amp;cmProperties%5Bpermissions%5D%5B%5D=setPolicy&amp;cmProperties%5Bpermissions%5D%5B%5D=traverse&amp;cmProperties%5Bpermissions%5D%5B%5D=write&amp;cmProperties%5BmodificationTime%5D=2016-09-08T23%3A17%3A03.902Z&amp;cmProperties%5Boptions%5D=&amp;cmProperties%5BrunAsOwner%5D=&amp;cmProperties%5B_meta%5D%5Blinks%5D%5Bversions%5D%5BmimeType%5D=application%2Fjson&amp;cmProperties%5B_meta%5D%5Blinks%5D%5Bversions%5D%5Burl%5D=%2Fbi%2Fv1%2Fobjects%2F${report_id}%2Fversions&amp;cmProperties%5B_meta%5D%5Blinks%5D%5Bself%5D%5BmimeType%5D=application%2Fvnd.ibm.bi.report%2Bjson&amp;cmProperties%5B_meta%5D%5Blinks%5D%5Bself%5D%5Burl%5D=%2Fbi%2Fv1%2Fobjects%2F${report_id}&amp;cmProperties%5B_meta%5D%5Blinks%5D%5Bhistories%5D%5BmimeType%5D=application%2Fjson&amp;cmProperties%5B_meta%5D%5Blinks%5D%5Bhistories%5D%5Burl%5D=%2Fbi%2Fv1%2Fobjects%2F${report_id}%2Fhistories&amp;cmProperties%5BrunWithOwnerCapabilities%5D=&amp;cmProperties%5Bid%5D=${report_id}&amp;cmProperties%5Btype%5D=report&amp;cmProperties%5BdefaultName%5D=Master_Detail&amp;cmProperties%5Bversion%5D=2&amp;rsFinalRunOptions%5Bformat%5D=HTML&amp;rsFinalRunOptions%5Ba11y%5D=false&amp;rsFinalRunOptions%5Bbidi%5D=false&amp;rsFinalRunOptions%5BrunInAdvancedViewer%5D=false&amp;rsFinalRunOptions%5Bprompt%5D=true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">defaultName%2Cowner.defaultName%2Cancestors%2Cpermissions%2Chidden%2Cdisabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=classicviewer&amp;id=${report_id}&amp;module=bi%2Fclassicviewer%2FcvContentView&amp;isViewer=true&amp;isNewFromModule=false&amp;isNewFromPackage=false&amp;isNewDataSetFromModule=false&amp;isNewDataSetFromPackage=false&amp;isTemplate=false&amp;isDataset=false&amp;UIProfile=Titan&amp;cmProperties%5BrunInAdvancedViewer%5D=&amp;cmProperties%5BexecutionPrompt%5D=true&amp;cmProperties%5Bpermissions%5D%5B%5D=execute&amp;cmProperties%5Bpermissions%5D%5B%5D=read&amp;cmProperties%5Bpermissions%5D%5B%5D=setPolicy&amp;cmProperties%5Bpermissions%5D%5B%5D=traverse&amp;cmProperties%5Bpermissions%5D%5B%5D=write&amp;cmProperties%5BmodificationTime%5D=2016-09-08T23%3A17%3A03.902Z&amp;cmProperties%5Boptions%5D=&amp;cmProperties%5BrunAsOwner%5D=&amp;cmProperties%5B_meta%5D%5Blinks%5D%5Bversions%5D%5BmimeType%5D=application%2Fjson&amp;cmProperties%5B_meta%5D%5Blinks%5D%5Bversions%5D%5Burl%5D=%2Fbi%2Fv1%2Fobjects%2F${report_id}%2Fversions&amp;cmProperties%5B_meta%5D%5Blinks%5D%5Bself%5D%5BmimeType%5D=application%2Fvnd.ibm.bi.report%2Bjson&amp;cmProperties%5B_meta%5D%5Blinks%5D%5Bself%5D%5Burl%5D=%2Fbi%2Fv1%2Fobjects%2F${report_id}&amp;cmProperties%5B_meta%5D%5Blinks%5D%5Bhistories%5D%5BmimeType%5D=application%2Fjson&amp;cmProperties%5B_meta%5D%5Blinks%5D%5Bhistories%5D%5Burl%5D=%2Fbi%2Fv1%2Fobjects%2F${report_id}%2Fhistories&amp;cmProperties%5BrunWithOwnerCapabilities%5D=&amp;cmProperties%5Bid%5D=${report_id}&amp;cmProperties%5Btype%5D=report&amp;cmProperties%5BdefaultName%5D=Master_Detail&amp;cmProperties%5Bversion%5D=2&amp;rsFinalRunOptions%5Bformat%5D=HTML&amp;rsFinalRunOptions%5Ba11y%5D=false&amp;rsFinalRunOptions%5Bbidi%5D=false&amp;rsFinalRunOptions%5BrunInAdvancedViewer%5D=false&amp;rsFinalRunOptions%5Bprompt%5D=true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ classic viewer run">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="b_action">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">b_action</stringProp>
                      <stringProp name="Argument.value">cognosViewer</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="run.outputFormat">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">run.outputFormat</stringProp>
                      <stringProp name="Argument.value">${report_output_format}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="run.prompt">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">run.prompt</stringProp>
                      <stringProp name="Argument.value">${executionPrompt}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="system.http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">system.http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="biDirectional.http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">biDirectional.http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="ui.object">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">ui.object</stringProp>
                      <stringProp name="Argument.value">storeID("${report_id}")</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="ui.action">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ui.action</stringProp>
                      <stringProp name="Argument.value">run</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="cv.header">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">cv.header</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="cv.toolbar">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">cv.toolbar</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="protectParameters">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">protectParameters</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="isTitan">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">isTitan</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="cv.keepWindowOpen">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">cv.keepWindowOpen</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get cv.actionState">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cv.actionState</stringProp>
                  <stringProp name="RegexExtractor.regex">"cv\.actionState": "([^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number" />
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get m_tracking">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">m_tracking</stringProp>
                  <stringProp name="RegexExtractor.regex">"m_sTracking": "([^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">error</stringProp>
                  <stringProp name="RegexExtractor.match_number" />
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ui.cafcontextid">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ui.cafcontextid</stringProp>
                  <stringProp name="RegexExtractor.regex">"m_sCAFContext": "([^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number" />
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ui.conversation">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ui.conversation</stringProp>
                  <stringProp name="RegexExtractor.regex">"m_sConversation": "([^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number" />
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get m_sStatus">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_sStatus</stringProp>
                  <stringProp name="RegexExtractor.regex">"m_sStatus": "([^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">error</stringProp>
                  <stringProp name="RegexExtractor.match_number" />
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
                  <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
                  <stringProp name="RegexExtractor.template">false</stringProp>
                  <stringProp name="RegexExtractor.default">true</stringProp>
                  <stringProp name="RegexExtractor.match_number" />
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">src="(\?[^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="m_tracking found">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="96784904">error</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">${m_tracking}</stringProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="save response">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">vars.put("reportResponse", prev.getResponseDataAsString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get iframe src url (for pdf)">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">iframeSrcUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">frame width="100%" src="(.+)" style="height:</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
              </hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset runPrimaryAsync">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("runPrimaryAsync", "true")</stringProp>
              </JSR223Sampler>
              <hashTree />
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include async">
                </GenericController>
              <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="async">
          <stringProp name="WhileController.condition">${__groovy("${m_sStatus}"!="complete" &amp;&amp; "${m_sStatus}"!="prompting")}</stringProp>
        </WhileController>
        <hashTree>
          <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="check for fault or error">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="97204770">fault</stringProp>
              <stringProp name="96784904">error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">12</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">m_sStatus</stringProp>
            <stringProp name="Assertion.custom_message" />
          </ResponseAssertion>
          <hashTree />
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="primary wait once">
            <stringProp name="IfController.condition">${__groovy("${runPrimaryAsync}"=="true")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ primary wait">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="b_action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">b_action</stringProp>
                    <stringProp name="Argument.value">cognosViewer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.actionState">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.actionState</stringProp>
                    <stringProp name="Argument.value">${cv.actionState}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.catchLogOnFault">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.catchLogOnFault</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.header">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.header</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.id">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.id</stringProp>
                    <stringProp name="Argument.value">_NS_</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.objectPermissions">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">cv.objectPermissions</stringProp>
                    <stringProp name="Argument.value">execute read setPolicy traverse write </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.responseFormat">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.responseFormat</stringProp>
                    <stringProp name="Argument.value">data</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.showFaultPage">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.showFaultPage</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.toolbar">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.toolbar</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="executionParameters">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">executionParameters</stringProp>
                    <stringProp name="Argument.value">&lt;bus:parameters xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="SOAP-ENC:Array" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[0]"/&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="m_tracking">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">m_tracking</stringProp>
                    <stringProp name="Argument.value">${m_tracking}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.action</stringProp>
                    <stringProp name="Argument.value">wait</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.cafcontextid">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.cafcontextid</stringProp>
                    <stringProp name="Argument.value">${ui.cafcontextid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.conversation">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.conversation</stringProp>
                    <stringProp name="Argument.value">${ui.conversation}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.object">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">ui.object</stringProp>
                    <stringProp name="Argument.value">storeID("${report_id}")</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.objectClass">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.objectClass</stringProp>
                    <stringProp name="Argument.value">report</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.primaryAction">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.primaryAction</stringProp>
                    <stringProp name="Argument.value">run</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get async_state">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">async_state</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;state&gt;([^&lt;]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
                <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
                <stringProp name="RegexExtractor.template">false</stringProp>
                <stringProp name="RegexExtractor.default">true</stringProp>
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                <stringProp name="RegexExtractor.regex">src="(\?[^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get iframe src url (for pdf)">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">iframeSrcUrl</stringProp>
                <stringProp name="RegexExtractor.regex">frame width="100%" src="(.+)" style="height</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="set runPrimaryAsync false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("runPrimaryAsync", "false")</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="save response">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename" />
                <stringProp name="parameters" />
                <stringProp name="script">vars.put("reportResponse", prev.getResponseDataAsString());</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get async parameters">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
return StringEscapeUtils.unescapeHtml4(vars.get("async_state"));</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get cv.actionState">
                <stringProp name="JSONPostProcessor.referenceNames">cv.actionState</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sActionState</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_tracking">
                <stringProp name="JSONPostProcessor.referenceNames">m_tracking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sTracking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.cafcontextid">
                <stringProp name="JSONPostProcessor.referenceNames">ui.cafcontextid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">*.m_sCAFContext</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.conversation">
                <stringProp name="JSONPostProcessor.referenceNames">ui.conversation</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sConversation</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_sStatus">
                <stringProp name="JSONPostProcessor.referenceNames">m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">error</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="secondary wait">
            <stringProp name="IfController.condition">${__groovy("${m_sStatus}"!="complete" &amp;&amp; "${m_sStatus}"!="prompting")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ secondary wait">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="b_action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">b_action</stringProp>
                    <stringProp name="Argument.value">cognosViewer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.actionState">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.actionState</stringProp>
                    <stringProp name="Argument.value">${cv.actionState}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.catchLogOnFault">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.catchLogOnFault</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.responseFormat">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.responseFormat</stringProp>
                    <stringProp name="Argument.value">data</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.showFaultPage">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.showFaultPage</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="m_tracking">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">m_tracking</stringProp>
                    <stringProp name="Argument.value">${m_tracking}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.action</stringProp>
                    <stringProp name="Argument.value">wait</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.primaryAction">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.primaryAction</stringProp>
                    <stringProp name="Argument.value">run</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get async_state">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">async_state</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;state&gt;([^&lt;]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
                <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
                <stringProp name="RegexExtractor.template">false</stringProp>
                <stringProp name="RegexExtractor.default">true</stringProp>
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get iframe src url (for pdf)">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">iframeSrcUrl</stringProp>
                <stringProp name="RegexExtractor.regex">frame width="100%" src="(.+)" style="height</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                <stringProp name="TestPlan.comments">\.\.(\/v1\/disp\?[^)]*)</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                <stringProp name="RegexExtractor.regex">src="(\?[^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="save response">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename" />
                <stringProp name="parameters" />
                <stringProp name="script">vars.put("reportResponse", prev.getResponseDataAsString());</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get async parameters">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
return StringEscapeUtils.unescapeHtml4(vars.get("async_state"));</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get cv.actionState">
                <stringProp name="JSONPostProcessor.referenceNames">cv.actionState</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sActionState</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_tracking">
                <stringProp name="JSONPostProcessor.referenceNames">m_tracking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sTracking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.cafcontextid">
                <stringProp name="JSONPostProcessor.referenceNames">ui.cafcontextid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">*.m_sCAFContext</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.conversation">
                <stringProp name="JSONPostProcessor.referenceNames">ui.conversation</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sConversation</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_sStatus">
                <stringProp name="JSONPostProcessor.referenceNames">m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">error</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If error or fault">
                <stringProp name="IfController.condition">${__groovy("${m_sStatus}"=="error" || "${m_sStatus}" == "fault")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ unexpected status is ${m_sStatus}">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script" />
                </JSR223Sampler>
                <hashTree>
                  <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="unexpected status is ${m_sStatus}">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename" />
                    <stringProp name="parameters" />
                    <stringProp name="script">AssertionResult.setFailure(true);
AssertionResult.setFailureMessage("bad status received '" + vars.get("m_sStatus") +  "' in response");</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree />
                </hashTree>
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If report_output PDF">
                <stringProp name="IfController.condition">${__groovy("${report_output_format}"=="PDF")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode PDF url">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
//log.info("===============" + vars.get("chart_urls"));
vars.put("iframeSrcUrl_decoded", StringEscapeUtils.unescapeHtml4(vars.get("iframeSrcUrl")));</stringProp>
                </JSR223Sampler>
                <hashTree />
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ execute PDF url from iframe">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${iframeSrcUrl_decoded}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.80.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <ResponseAssertion enabled="false" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Content-Type: application/PDF?">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-263532664">applicaton\/pdf</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Assert response header contains datacheck">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">if(prev.getResponseHeaders().contains(vars.get("report_datacheck"))){
	vars.put("datacheck_not_found", "false");
	Failure=false;
}
</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                </hashTree>
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If report_output is NOT pdf">
                <stringProp name="IfController.condition">${__groovy("${report_output_format}"!="PDF")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach chart_url in chart_urls">
                  <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
                  <stringProp name="ForeachController.returnVal">chart_url</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
vars.put("chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("chart_url")));</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ getChart">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="Accept-Language">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Referer">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=true&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Encoding">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Content-Type: image/png?">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="277769327">Content-Type: image\/png</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ if not prompt do datacheck and chart count">
                <stringProp name="IfController.condition">${__groovy(!${hasPrompt})}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If datacheck_not_found">
                  <stringProp name="IfController.condition">${__groovy(${datacheck_not_found})}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ failed to find datacheck ${report_datacheck}">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script" />
                  </JSR223Sampler>
                  <hashTree>
                    <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="failed to find datacheck ${report_datacheck}">
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="filename" />
                      <stringProp name="parameters" />
                      <stringProp name="script">AssertionResult.setFailure(true);
AssertionResult.setFailureMessage("failed to find datacheck '" + vars.get("report_datacheck") +  "' in response");</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223Assertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
                <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="verify chart count">
                  <stringProp name="IfController.condition">${__groovy(${chart_urls_matchNr}!=${report_expected_chart_count})}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ expected chart count ${report_expected_chart_count} not equal to actual chart count ${chart_urls_matchNr}">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put("report_chart_count_verification", "expected report chart count " + vars.get("report_expected_chart_count") + " not equal to actual report chart count " + vars.get("$chart_urls_matchNr"));</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                </hashTree>
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset action_counter">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("action_counter", "0");</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="run prompt">
            <stringProp name="IfController.condition">${__groovy(${hasPrompt})}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get prompt info">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return vars.get("reportResponse");</stringProp>
            </JSR223Sampler>
            <hashTree>
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get m_parameters">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">m_parameters</stringProp>
                <stringProp name="RegexExtractor.regex">"m_sParameters": "([^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number" />
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get prompt value">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.ibm.bi.util.ContentUtil;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;

String report_response = vars.get("reportResponse");

JsonArray prompts = new JsonStreamParser(vars.get("report_prompt")).next().getAsJsonArray();

String prompts_parameter_values = "";
if(prompts.size() &gt; 0) {
	for(int i = 0; i &lt; prompts.size(); i++) {
		JsonObject prompt = prompts.get(i).getAsJsonObject();
		log.debug("JsonObject is: " + prompt.toString());
		String key = prompt.get("name").getAsString();
		String value = prompt.get("value").getAsString();
		String res = ContentUtil.getOptional(report_response, "\"@parameter\":\"" + key + "\"", ",\"@displayValue\":\"" + value + "\"");
		String useValue = res.substring(res.lastIndexOf("\"@useValue\":") + 12);
		if(!prompts_parameter_values.equals("")) {
			prompts_parameter_values = prompts_parameter_values + "&amp;";
		}
		prompts_parameter_values = prompts_parameter_values + "p_" + key + "=" + URLEncoder.encode("&lt;selectChoices&gt;&lt;selectOption useValue=" + useValue + " displayValue=\"" + value + "\"/&gt;&lt;/selectChoices&gt;").replace("%5C%5CU003E", "%26gt%3B").replace("+", "%20");
	}
}

vars.put("prompts_parameter_values", prompts_parameter_values);

log.debug("prompts_parameter_values is: " + prompts_parameter_values);</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}runcv_promptPage_${report_name}">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ classic viewer run prompt">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_promptControl=prompt&amp;b_action=cognosViewer&amp;cv.actionState=${__escapeHtml(${cv.actionState})}&amp;cv.catchLogOnFault=true&amp;cv.header=false&amp;cv.id=_NS_&amp;cv.objectPermissions=execute%20read%20setPolicy%20traverse%20write%20&amp;cv.responseFormat=data&amp;cv.showFaultPage=true&amp;cv.toolbar=false&amp;executionParameters=${__escapeHtml(${m_parameters})}&amp;m_tracking=${__escapeHtml(${m_tracking})}&amp;${prompts_parameter_values}&amp;run.prompt=true&amp;ui.action=forward&amp;ui.cafcontextid=${__escapeHtml(${ui.cafcontextid})}&amp;ui.conversation=${__escapeHtml(${ui.conversation})}&amp;ui.object=storeID(%22${__escapeHtml(${report_id})}%22)&amp;ui.objectClass=report&amp;ui.primaryAction=run</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="save response">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">vars.put("reportResponse", prev.getResponseDataAsString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get prompt response">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;

String decoded_response = StringEscapeUtils.unescapeHtml4(prev.getResponseDataAsString());
vars.put("decoded_response", decoded_response);

return decoded_response;

</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get cv.actionState">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cv.actionState</stringProp>
                  <stringProp name="RegexExtractor.regex">"cv\.actionState": "([^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number" />
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ui.cafcontextid">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ui.cafcontextid</stringProp>
                  <stringProp name="RegexExtractor.regex">"m_sCAFContext": "([^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number" />
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ui.conversation">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ui.conversation</stringProp>
                  <stringProp name="RegexExtractor.regex">"m_sConversation": "([^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number" />
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get m_sStatus">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">m_sStatus</stringProp>
                  <stringProp name="RegexExtractor.regex">"m_sStatus": "([^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">error</stringProp>
                  <stringProp name="RegexExtractor.match_number" />
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
                  <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
                  <stringProp name="RegexExtractor.template">false</stringProp>
                  <stringProp name="RegexExtractor.default">true</stringProp>
                  <stringProp name="RegexExtractor.match_number" />
                </RegexExtractor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">src="(\?[^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="m_tracking found">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="96784904">error</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">${m_tracking}</stringProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset runPrimaryAsync">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("runPrimaryAsync", "true")</stringProp>
              </JSR223Sampler>
              <hashTree />
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include async">
                </GenericController>
              <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="async">
          <stringProp name="WhileController.condition">${__groovy("${m_sStatus}"!="complete" &amp;&amp; "${m_sStatus}"!="prompting")}</stringProp>
        </WhileController>
        <hashTree>
          <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="check for fault or error">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="97204770">fault</stringProp>
              <stringProp name="96784904">error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">12</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">m_sStatus</stringProp>
            <stringProp name="Assertion.custom_message" />
          </ResponseAssertion>
          <hashTree />
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="primary wait once">
            <stringProp name="IfController.condition">${__groovy("${runPrimaryAsync}"=="true")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ primary wait">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="b_action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">b_action</stringProp>
                    <stringProp name="Argument.value">cognosViewer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.actionState">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.actionState</stringProp>
                    <stringProp name="Argument.value">${cv.actionState}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.catchLogOnFault">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.catchLogOnFault</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.header">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.header</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.id">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.id</stringProp>
                    <stringProp name="Argument.value">_NS_</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.objectPermissions">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">cv.objectPermissions</stringProp>
                    <stringProp name="Argument.value">execute read setPolicy traverse write </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.responseFormat">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.responseFormat</stringProp>
                    <stringProp name="Argument.value">data</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.showFaultPage">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.showFaultPage</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.toolbar">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.toolbar</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="executionParameters">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">executionParameters</stringProp>
                    <stringProp name="Argument.value">&lt;bus:parameters xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="SOAP-ENC:Array" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[0]"/&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="m_tracking">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">m_tracking</stringProp>
                    <stringProp name="Argument.value">${m_tracking}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.action</stringProp>
                    <stringProp name="Argument.value">wait</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.cafcontextid">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.cafcontextid</stringProp>
                    <stringProp name="Argument.value">${ui.cafcontextid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.conversation">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.conversation</stringProp>
                    <stringProp name="Argument.value">${ui.conversation}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.object">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">ui.object</stringProp>
                    <stringProp name="Argument.value">storeID("${report_id}")</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.objectClass">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.objectClass</stringProp>
                    <stringProp name="Argument.value">report</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.primaryAction">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.primaryAction</stringProp>
                    <stringProp name="Argument.value">run</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get async_state">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">async_state</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;state&gt;([^&lt;]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
                <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
                <stringProp name="RegexExtractor.template">false</stringProp>
                <stringProp name="RegexExtractor.default">true</stringProp>
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                <stringProp name="RegexExtractor.regex">src="(\?[^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get iframe src url (for pdf)">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">iframeSrcUrl</stringProp>
                <stringProp name="RegexExtractor.regex">frame width="100%" src="(.+)" style="height</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="set runPrimaryAsync false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("runPrimaryAsync", "false")</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="save response">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename" />
                <stringProp name="parameters" />
                <stringProp name="script">vars.put("reportResponse", prev.getResponseDataAsString());</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get async parameters">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
return StringEscapeUtils.unescapeHtml4(vars.get("async_state"));</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get cv.actionState">
                <stringProp name="JSONPostProcessor.referenceNames">cv.actionState</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sActionState</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_tracking">
                <stringProp name="JSONPostProcessor.referenceNames">m_tracking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sTracking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.cafcontextid">
                <stringProp name="JSONPostProcessor.referenceNames">ui.cafcontextid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">*.m_sCAFContext</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.conversation">
                <stringProp name="JSONPostProcessor.referenceNames">ui.conversation</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sConversation</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_sStatus">
                <stringProp name="JSONPostProcessor.referenceNames">m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">error</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="secondary wait">
            <stringProp name="IfController.condition">${__groovy("${m_sStatus}"!="complete" &amp;&amp; "${m_sStatus}"!="prompting")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ secondary wait">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="b_action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">b_action</stringProp>
                    <stringProp name="Argument.value">cognosViewer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.actionState">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.actionState</stringProp>
                    <stringProp name="Argument.value">${cv.actionState}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.catchLogOnFault">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.catchLogOnFault</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.responseFormat">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.responseFormat</stringProp>
                    <stringProp name="Argument.value">data</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.showFaultPage">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.showFaultPage</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="m_tracking">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">m_tracking</stringProp>
                    <stringProp name="Argument.value">${m_tracking}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.action</stringProp>
                    <stringProp name="Argument.value">wait</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.primaryAction">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.primaryAction</stringProp>
                    <stringProp name="Argument.value">run</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get async_state">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">async_state</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;state&gt;([^&lt;]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
                <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
                <stringProp name="RegexExtractor.template">false</stringProp>
                <stringProp name="RegexExtractor.default">true</stringProp>
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get iframe src url (for pdf)">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">iframeSrcUrl</stringProp>
                <stringProp name="RegexExtractor.regex">frame width="100%" src="(.+)" style="height</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                <stringProp name="TestPlan.comments">\.\.(\/v1\/disp\?[^)]*)</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                <stringProp name="RegexExtractor.regex">src="(\?[^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="save response">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename" />
                <stringProp name="parameters" />
                <stringProp name="script">vars.put("reportResponse", prev.getResponseDataAsString());</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get async parameters">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
return StringEscapeUtils.unescapeHtml4(vars.get("async_state"));</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get cv.actionState">
                <stringProp name="JSONPostProcessor.referenceNames">cv.actionState</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sActionState</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_tracking">
                <stringProp name="JSONPostProcessor.referenceNames">m_tracking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sTracking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.cafcontextid">
                <stringProp name="JSONPostProcessor.referenceNames">ui.cafcontextid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">*.m_sCAFContext</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.conversation">
                <stringProp name="JSONPostProcessor.referenceNames">ui.conversation</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sConversation</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_sStatus">
                <stringProp name="JSONPostProcessor.referenceNames">m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">error</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If error or fault">
                <stringProp name="IfController.condition">${__groovy("${m_sStatus}"=="error" || "${m_sStatus}" == "fault")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ unexpected status is ${m_sStatus}">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script" />
                </JSR223Sampler>
                <hashTree>
                  <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="unexpected status is ${m_sStatus}">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename" />
                    <stringProp name="parameters" />
                    <stringProp name="script">AssertionResult.setFailure(true);
AssertionResult.setFailureMessage("bad status received '" + vars.get("m_sStatus") +  "' in response");</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223Assertion>
                  <hashTree />
                </hashTree>
              </hashTree>
              <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach chart_url in chart_urls">
                <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
                <stringProp name="ForeachController.returnVal">chart_url</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
vars.put("chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("chart_url")));</stringProp>
                </JSR223Sampler>
                <hashTree />
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ getChart">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=true&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Content-Type: image/png?">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="277769327">Content-Type: image\/png</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                </hashTree>
              </hashTree>
              <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="/ datacheck and chart count">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If datacheck_not_found">
                  <stringProp name="IfController.condition">${__groovy(${datacheck_not_found})}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ failed to find datacheck ${report_datacheck}">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script" />
                  </JSR223Sampler>
                  <hashTree>
                    <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="failed to find datacheck ${report_datacheck}">
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="filename" />
                      <stringProp name="parameters" />
                      <stringProp name="script">AssertionResult.setFailure(true);
AssertionResult.setFailureMessage("failed to find datacheck '" + vars.get("report_datacheck") +  "' in response");</stringProp>
                      <stringProp name="scriptLanguage">javascript</stringProp>
                    </JSR223Assertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
                <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="verify chart count">
                  <stringProp name="IfController.condition">${__groovy(${chart_urls_matchNr}!=${report_expected_chart_count})}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ expected chart count ${report_expected_chart_count} not equal to actual chart count ${chart_urls_matchNr}">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put("report_chart_count_verification", "expected report chart count ${report_expected_chart_count} not equal to actual report chart count ${chart_urls_matchNr}");</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each action">
            <stringProp name="ForeachController.inputVal">report_actions</stringProp>
            <stringProp name="ForeachController.returnVal">report_action</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increment action_counter">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">// manually control the action_counter because jmeter's action_counter cannot be reset mid-execution of a thread group loop
action_counter = Integer.parseInt(vars.get("action_counter"));
action_counter = action_counter + 1;
vars.put("action_counter", String.valueOf(action_counter));

// update datacheck for async fragments
vars.put("report_datacheck", vars.get("report_actions_datacheck_" + vars.get("action_counter")))</stringProp>
            </JSR223Sampler>
            <hashTree />
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ if action type is prompt">
              <stringProp name="IfController.condition">${__groovy("${report_action}" == "prompt")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get prompt info">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get("reportResponse");</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get m_parameters">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">m_parameters</stringProp>
                  <stringProp name="RegexExtractor.regex">"m_sParameters": "([^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number" />
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get prompt value">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.ibm.bi.util.ContentUtil;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;
import java.util.Random;

report_response = vars.get("reportResponse");

JsonArray prompts = new JsonStreamParser(vars.get("report_actions_prompt_" + vars.get("action_counter"))).next().getAsJsonArray();

prompts_parameter_values = "";
if(prompts.size() &gt; 0) {
	for(int i = 0; i &lt; prompts.size(); i++) {
		JsonObject prompt = prompts.get(i).getAsJsonObject();
		if(prompt.get("type")!= null)
			type = prompt.get("type").getAsString();
		else
			type= "";
		
		if(prompt.get("mode")!= null)
			mode = prompt.get("mode").getAsString();
		else
			mode = "";
		log.debug("JsonObject is: " + prompt.toString());
		key = prompt.get("name").getAsString();
		if(mode.toLowerCase()=="random"){
			def r = new Random()
			values = prompt.get("value").getAsString().split(",")
			value = values[r.nextInt(values.size())]
		} else {
			value = prompt.get("value").getAsString();
		}
		
		if(!prompts_parameter_values.equals("")) {
			prompts_parameter_values = prompts_parameter_values + "&amp;";
		}
		if (type=="raw") {
			prompts_parameter_values = prompts_parameter_values + "p_" + key + "=" + URLEncoder.encode("&lt;selectChoices&gt;" + prompt.get("value").getAsString()+"&lt;/selectChoices&gt;");
		} else {
			res = ContentUtil.getOptional(report_response, "\"@parameter\":\"" + key + "\"", ",\"@displayValue\":\"" + value + "\"");
			if (res != null) {
				useValue = res.substring(res.lastIndexOf("\"@useValue\":") + 12);			
			} else {
				useValue = ContentUtil.getOptional(report_response, "&lt;option value=\"", "\" dv=\""+ value + "\"");
			}
	
			prompts_parameter_values = prompts_parameter_values + "p_" + key + "=" + URLEncoder.encode("&lt;selectChoices&gt;&lt;selectOption useValue=" + useValue + " displayValue=\"" + value + "\"/&gt;&lt;/selectChoices&gt;").replace("%5C%5CU003E", "%26gt%3B").replace("+", "%20");
		}
	}
}

vars.put("prompts_parameter_values", prompts_parameter_values);

log.debug("prompts_parameter_values is: " + prompts_parameter_values);</stringProp>
                </JSR223PostProcessor>
                <hashTree />
              </hashTree>
              <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}${report_action}_promptPage_${report_name}">
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ classic viewer run prompt">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">_promptControl=prompt&amp;b_action=cognosViewer&amp;cv.actionState=${__escapeHtml(${cv.actionState})}&amp;cv.catchLogOnFault=true&amp;cv.header=false&amp;cv.id=_NS_&amp;cv.objectPermissions=execute%20read%20setPolicy%20traverse%20write%20&amp;cv.responseFormat=data&amp;cv.showFaultPage=true&amp;cv.toolbar=false&amp;executionParameters=${__escapeHtml(${m_parameters})}&amp;m_tracking=${__escapeHtml(${m_tracking})}&amp;${prompts_parameter_values}&amp;run.prompt=true&amp;ui.action=forward&amp;ui.cafcontextid=${__escapeHtml(${ui.cafcontextid})}&amp;ui.conversation=${__escapeHtml(${ui.conversation})}&amp;ui.object=storeID(%22${__escapeHtml(${report_id})}%22)&amp;ui.objectClass=report&amp;ui.primaryAction=run</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="save response">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename" />
                    <stringProp name="parameters" />
                    <stringProp name="script">vars.put("reportResponse", prev.getResponseDataAsString());</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${url_base}</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                </hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get prompt response">
                  <stringProp name="scriptLanguage">java</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;

String decoded_response = StringEscapeUtils.unescapeHtml4(prev.getResponseDataAsString());
vars.put("decoded_response", decoded_response);

return decoded_response;

</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor enabled="false" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get cv.actionState">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cv.actionState</stringProp>
                    <stringProp name="RegexExtractor.regex">"cv\.actionState": "([^"]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get cv.actionState">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cv.actionState</stringProp>
                    <stringProp name="RegexExtractor.regex">"m_sActionState": "([^"]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ui.cafcontextid">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ui.cafcontextid</stringProp>
                    <stringProp name="RegexExtractor.regex">"m_sCAFContext": "([^"]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ui.conversation">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ui.conversation</stringProp>
                    <stringProp name="RegexExtractor.regex">"m_sConversation": "([^"]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get m_sStatus">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">m_sStatus</stringProp>
                    <stringProp name="RegexExtractor.regex">"m_sStatus": "([^"]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">error</stringProp>
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
                    <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
                    <stringProp name="RegexExtractor.template">false</stringProp>
                    <stringProp name="RegexExtractor.default">true</stringProp>
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                    <stringProp name="RegexExtractor.regex">src="(\?[^"]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  </RegexExtractor>
                  <hashTree />
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="m_tracking found">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="96784904">error</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">${m_tracking}</stringProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                </hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset runPrimaryAsync">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">vars.put("runPrimaryAsync", "true")</stringProp>
                </JSR223Sampler>
                <hashTree />
                <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include async">
                  </GenericController>
                <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="async">
          <stringProp name="WhileController.condition">${__groovy("${m_sStatus}"!="complete" &amp;&amp; "${m_sStatus}"!="prompting")}</stringProp>
        </WhileController>
        <hashTree>
          <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="check for fault or error">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="97204770">fault</stringProp>
              <stringProp name="96784904">error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">12</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">m_sStatus</stringProp>
            <stringProp name="Assertion.custom_message" />
          </ResponseAssertion>
          <hashTree />
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="primary wait once">
            <stringProp name="IfController.condition">${__groovy("${runPrimaryAsync}"=="true")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ primary wait">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="b_action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">b_action</stringProp>
                    <stringProp name="Argument.value">cognosViewer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.actionState">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.actionState</stringProp>
                    <stringProp name="Argument.value">${cv.actionState}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.catchLogOnFault">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.catchLogOnFault</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.header">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.header</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.id">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.id</stringProp>
                    <stringProp name="Argument.value">_NS_</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.objectPermissions">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">cv.objectPermissions</stringProp>
                    <stringProp name="Argument.value">execute read setPolicy traverse write </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.responseFormat">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.responseFormat</stringProp>
                    <stringProp name="Argument.value">data</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.showFaultPage">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.showFaultPage</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.toolbar">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.toolbar</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="executionParameters">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">executionParameters</stringProp>
                    <stringProp name="Argument.value">&lt;bus:parameters xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="SOAP-ENC:Array" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[0]"/&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="m_tracking">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">m_tracking</stringProp>
                    <stringProp name="Argument.value">${m_tracking}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.action</stringProp>
                    <stringProp name="Argument.value">wait</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.cafcontextid">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.cafcontextid</stringProp>
                    <stringProp name="Argument.value">${ui.cafcontextid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.conversation">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.conversation</stringProp>
                    <stringProp name="Argument.value">${ui.conversation}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.object">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">ui.object</stringProp>
                    <stringProp name="Argument.value">storeID("${report_id}")</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.objectClass">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.objectClass</stringProp>
                    <stringProp name="Argument.value">report</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.primaryAction">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.primaryAction</stringProp>
                    <stringProp name="Argument.value">run</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get async_state">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">async_state</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;state&gt;([^&lt;]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
                <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
                <stringProp name="RegexExtractor.template">false</stringProp>
                <stringProp name="RegexExtractor.default">true</stringProp>
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                <stringProp name="RegexExtractor.regex">src="(\?[^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get iframe src url (for pdf)">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">iframeSrcUrl</stringProp>
                <stringProp name="RegexExtractor.regex">frame width="100%" src="(.+)" style="height</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="set runPrimaryAsync false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("runPrimaryAsync", "false")</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="save response">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename" />
                <stringProp name="parameters" />
                <stringProp name="script">vars.put("reportResponse", prev.getResponseDataAsString());</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get async parameters">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
return StringEscapeUtils.unescapeHtml4(vars.get("async_state"));</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get cv.actionState">
                <stringProp name="JSONPostProcessor.referenceNames">cv.actionState</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sActionState</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_tracking">
                <stringProp name="JSONPostProcessor.referenceNames">m_tracking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sTracking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.cafcontextid">
                <stringProp name="JSONPostProcessor.referenceNames">ui.cafcontextid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">*.m_sCAFContext</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.conversation">
                <stringProp name="JSONPostProcessor.referenceNames">ui.conversation</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sConversation</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_sStatus">
                <stringProp name="JSONPostProcessor.referenceNames">m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">error</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="secondary wait">
            <stringProp name="IfController.condition">${__groovy("${m_sStatus}"!="complete" &amp;&amp; "${m_sStatus}"!="prompting")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ secondary wait">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="b_action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">b_action</stringProp>
                    <stringProp name="Argument.value">cognosViewer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.actionState">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.actionState</stringProp>
                    <stringProp name="Argument.value">${cv.actionState}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.catchLogOnFault">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.catchLogOnFault</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.responseFormat">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.responseFormat</stringProp>
                    <stringProp name="Argument.value">data</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.showFaultPage">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.showFaultPage</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="m_tracking">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">m_tracking</stringProp>
                    <stringProp name="Argument.value">${m_tracking}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.action</stringProp>
                    <stringProp name="Argument.value">wait</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.primaryAction">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.primaryAction</stringProp>
                    <stringProp name="Argument.value">run</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get async_state">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">async_state</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;state&gt;([^&lt;]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
                <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
                <stringProp name="RegexExtractor.template">false</stringProp>
                <stringProp name="RegexExtractor.default">true</stringProp>
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get iframe src url (for pdf)">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">iframeSrcUrl</stringProp>
                <stringProp name="RegexExtractor.regex">frame width="100%" src="(.+)" style="height</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                <stringProp name="TestPlan.comments">\.\.(\/v1\/disp\?[^)]*)</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                <stringProp name="RegexExtractor.regex">src="(\?[^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="save response">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename" />
                <stringProp name="parameters" />
                <stringProp name="script">vars.put("reportResponse", prev.getResponseDataAsString());</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get async parameters">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
return StringEscapeUtils.unescapeHtml4(vars.get("async_state"));</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get cv.actionState">
                <stringProp name="JSONPostProcessor.referenceNames">cv.actionState</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sActionState</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_tracking">
                <stringProp name="JSONPostProcessor.referenceNames">m_tracking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sTracking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.cafcontextid">
                <stringProp name="JSONPostProcessor.referenceNames">ui.cafcontextid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">*.m_sCAFContext</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.conversation">
                <stringProp name="JSONPostProcessor.referenceNames">ui.conversation</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sConversation</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_sStatus">
                <stringProp name="JSONPostProcessor.referenceNames">m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">error</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If error or fault">
                  <stringProp name="IfController.condition">${__groovy("${m_sStatus}"=="error" || "${m_sStatus}" == "fault")}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ unexpected status is ${m_sStatus}">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script" />
                  </JSR223Sampler>
                  <hashTree>
                    <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="unexpected status is ${m_sStatus}">
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="filename" />
                      <stringProp name="parameters" />
                      <stringProp name="script">AssertionResult.setFailure(true);
AssertionResult.setFailureMessage("bad status received '" + vars.get("m_sStatus") +  "' in response");</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223Assertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
                <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach chart_url in chart_urls">
                  <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
                  <stringProp name="ForeachController.returnVal">chart_url</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
vars.put("chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("chart_url")));</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ getChart">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="Accept-Language">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Referer">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=true&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Encoding">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Content-Type: image/png?">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="277769327">Content-Type: image\/png</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
                <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="/ datacheck and chart count">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If datacheck_not_found">
                    <stringProp name="IfController.condition">${__groovy(${datacheck_not_found})}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ failed to find datacheck ${report_datacheck} in ${report_action}">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script" />
                    </JSR223Sampler>
                    <hashTree>
                      <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="failed to find datacheck in subsequent action response">
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="filename" />
                        <stringProp name="parameters" />
                        <stringProp name="script">AssertionResult.setFailure(true);
AssertionResult.setFailureMessage("failed to find datacheck '" + vars.get("report_actions_datacheck_" + vars.get("action_counter")) + "' in " + vars.get("report_action") + " response");</stringProp>
                        <stringProp name="scriptLanguage">groovy</stringProp>
                      </JSR223Assertion>
                      <hashTree />
                    </hashTree>
                  </hashTree>
                  <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="verify chart count">
                    <stringProp name="IfController.condition">${__groovy(${chart_urls_matchNr}!=${__V(report_actions_expected_chart_count_${action_counter})})}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ expected chart count ${__V(report_actions_expected_chart_count_${action_counter})} not equal to actual chart count ${chart_urls_matchNr}">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put("report_action_chart_count_verification", "expected chart count ${__V(report_actions_expected_chart_count_${action_counter})} not equal to actual chart count ${chart_urls_matchNr}");</stringProp>
                    </JSR223Sampler>
                    <hashTree />
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ if action type is not prompt">
              <stringProp name="IfController.condition">${__groovy("${report_action}" != "prompt")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}${report_action}_${report_name}">
                <boolProp name="TransactionController.parent">true</boolProp>
                <stringProp name="TestPlan.comments">run subsequent actions</stringProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ classic viewr run subsequent action">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="b_action">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">b_action</stringProp>
                        <stringProp name="Argument.value">cognosViewer</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.catchLogOnFault">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.catchLogOnFault</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.header">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.header</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.id">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.id</stringProp>
                        <stringProp name="Argument.value">_NS_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.objectPermissions">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">cv.objectPermissions</stringProp>
                        <stringProp name="Argument.value">execute read setPolicy traverse write </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.responseFormat">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.responseFormat</stringProp>
                        <stringProp name="Argument.value">data</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.showFaultPage">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.showFaultPage</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.toolbar">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.toolbar</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="executionParameters">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">executionParameters</stringProp>
                        <stringProp name="Argument.value">&lt;bus:parameters xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="SOAP-ENC:Array" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[0]"/&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="m_tracking">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">m_tracking</stringProp>
                        <stringProp name="Argument.value">${m_tracking}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="ui.action">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ui.action</stringProp>
                        <stringProp name="Argument.value">${report_action}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="ui.cafcontextid">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ui.cafcontextid</stringProp>
                        <stringProp name="Argument.value">${ui.cafcontextid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="ui.conversation">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ui.conversation</stringProp>
                        <stringProp name="Argument.value">${ui.conversation}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="ui.object">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ui.object</stringProp>
                        <stringProp name="Argument.value">storeID("${report_id}")</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="ui.objectClass">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ui.objectClass</stringProp>
                        <stringProp name="Argument.value">report</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="ui.primaryAction">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ui.primaryAction</stringProp>
                        <stringProp name="Argument.value">run</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=true&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="m_tracking found">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="96784904">error</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">${m_tracking}</stringProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get async_state">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">async_state</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;state&gt;([^&lt;]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                    <stringProp name="RegexExtractor.regex">src="(\?[^"]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
                    <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
                    <stringProp name="RegexExtractor.template">false</stringProp>
                    <stringProp name="RegexExtractor.default">true</stringProp>
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="save response">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename" />
                    <stringProp name="parameters" />
                    <stringProp name="script">vars.put("reportResponse", prev.getResponseDataAsString());</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                </hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get async parameters">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
return StringEscapeUtils.unescapeHtml4(vars.get("async_state"));</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get cv.actionState">
                    <stringProp name="JSONPostProcessor.referenceNames">cv.actionState</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sActionState</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_tracking">
                    <stringProp name="JSONPostProcessor.referenceNames">m_tracking</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sTracking</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.cafcontextid">
                    <stringProp name="JSONPostProcessor.referenceNames">ui.cafcontextid</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">*.m_sCAFContext</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.conversation">
                    <stringProp name="JSONPostProcessor.referenceNames">ui.conversation</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sConversation</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_sStatus">
                    <stringProp name="JSONPostProcessor.referenceNames">m_sStatus</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sStatus</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">error</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                </hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset runPrimaryAsync">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">vars.put("runPrimaryAsync", "true")</stringProp>
                </JSR223Sampler>
                <hashTree />
                <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include async">
                  </GenericController>
                <hashTree>
        <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="async">
          <stringProp name="WhileController.condition">${__groovy("${m_sStatus}"!="complete" &amp;&amp; "${m_sStatus}"!="prompting")}</stringProp>
        </WhileController>
        <hashTree>
          <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="check for fault or error">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="97204770">fault</stringProp>
              <stringProp name="96784904">error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">12</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">m_sStatus</stringProp>
            <stringProp name="Assertion.custom_message" />
          </ResponseAssertion>
          <hashTree />
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="primary wait once">
            <stringProp name="IfController.condition">${__groovy("${runPrimaryAsync}"=="true")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ primary wait">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="b_action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">b_action</stringProp>
                    <stringProp name="Argument.value">cognosViewer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.actionState">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.actionState</stringProp>
                    <stringProp name="Argument.value">${cv.actionState}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.catchLogOnFault">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.catchLogOnFault</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.header">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.header</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.id">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.id</stringProp>
                    <stringProp name="Argument.value">_NS_</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.objectPermissions">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">cv.objectPermissions</stringProp>
                    <stringProp name="Argument.value">execute read setPolicy traverse write </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.responseFormat">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.responseFormat</stringProp>
                    <stringProp name="Argument.value">data</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.showFaultPage">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.showFaultPage</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.toolbar">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.toolbar</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="executionParameters">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">executionParameters</stringProp>
                    <stringProp name="Argument.value">&lt;bus:parameters xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="SOAP-ENC:Array" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[0]"/&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="m_tracking">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">m_tracking</stringProp>
                    <stringProp name="Argument.value">${m_tracking}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.action</stringProp>
                    <stringProp name="Argument.value">wait</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.cafcontextid">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.cafcontextid</stringProp>
                    <stringProp name="Argument.value">${ui.cafcontextid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.conversation">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.conversation</stringProp>
                    <stringProp name="Argument.value">${ui.conversation}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.object">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">ui.object</stringProp>
                    <stringProp name="Argument.value">storeID("${report_id}")</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.objectClass">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.objectClass</stringProp>
                    <stringProp name="Argument.value">report</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.primaryAction">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.primaryAction</stringProp>
                    <stringProp name="Argument.value">run</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get async_state">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">async_state</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;state&gt;([^&lt;]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
                <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
                <stringProp name="RegexExtractor.template">false</stringProp>
                <stringProp name="RegexExtractor.default">true</stringProp>
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                <stringProp name="RegexExtractor.regex">src="(\?[^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get iframe src url (for pdf)">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">iframeSrcUrl</stringProp>
                <stringProp name="RegexExtractor.regex">frame width="100%" src="(.+)" style="height</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="set runPrimaryAsync false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("runPrimaryAsync", "false")</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="save response">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename" />
                <stringProp name="parameters" />
                <stringProp name="script">vars.put("reportResponse", prev.getResponseDataAsString());</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get async parameters">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
return StringEscapeUtils.unescapeHtml4(vars.get("async_state"));</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get cv.actionState">
                <stringProp name="JSONPostProcessor.referenceNames">cv.actionState</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sActionState</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_tracking">
                <stringProp name="JSONPostProcessor.referenceNames">m_tracking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sTracking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.cafcontextid">
                <stringProp name="JSONPostProcessor.referenceNames">ui.cafcontextid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">*.m_sCAFContext</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.conversation">
                <stringProp name="JSONPostProcessor.referenceNames">ui.conversation</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sConversation</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_sStatus">
                <stringProp name="JSONPostProcessor.referenceNames">m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">error</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="secondary wait">
            <stringProp name="IfController.condition">${__groovy("${m_sStatus}"!="complete" &amp;&amp; "${m_sStatus}"!="prompting")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ secondary wait">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="b_action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">b_action</stringProp>
                    <stringProp name="Argument.value">cognosViewer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.actionState">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.actionState</stringProp>
                    <stringProp name="Argument.value">${cv.actionState}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.catchLogOnFault">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.catchLogOnFault</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.responseFormat">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.responseFormat</stringProp>
                    <stringProp name="Argument.value">data</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.showFaultPage">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.showFaultPage</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="m_tracking">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">m_tracking</stringProp>
                    <stringProp name="Argument.value">${m_tracking}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.action</stringProp>
                    <stringProp name="Argument.value">wait</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.primaryAction">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.primaryAction</stringProp>
                    <stringProp name="Argument.value">run</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get async_state">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">async_state</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;state&gt;([^&lt;]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
                <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
                <stringProp name="RegexExtractor.template">false</stringProp>
                <stringProp name="RegexExtractor.default">true</stringProp>
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get iframe src url (for pdf)">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">iframeSrcUrl</stringProp>
                <stringProp name="RegexExtractor.regex">frame width="100%" src="(.+)" style="height</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls">
                <stringProp name="TestPlan.comments">\.\.(\/v1\/disp\?[^)]*)</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                <stringProp name="RegexExtractor.regex">src="(\?[^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="save response">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename" />
                <stringProp name="parameters" />
                <stringProp name="script">vars.put("reportResponse", prev.getResponseDataAsString());</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get async parameters">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
return StringEscapeUtils.unescapeHtml4(vars.get("async_state"));</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get cv.actionState">
                <stringProp name="JSONPostProcessor.referenceNames">cv.actionState</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sActionState</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_tracking">
                <stringProp name="JSONPostProcessor.referenceNames">m_tracking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sTracking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.cafcontextid">
                <stringProp name="JSONPostProcessor.referenceNames">ui.cafcontextid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">*.m_sCAFContext</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.conversation">
                <stringProp name="JSONPostProcessor.referenceNames">ui.conversation</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sConversation</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_sStatus">
                <stringProp name="JSONPostProcessor.referenceNames">m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sStatus</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">error</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If datacheck_not_found">
                  <stringProp name="IfController.condition">${__groovy(${datacheck_not_found})}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ failed to find datacheck ${report_datacheck} in ${report_action}">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script" />
                  </JSR223Sampler>
                  <hashTree>
                    <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="failed to find datacheck in subsequent action response">
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="filename" />
                      <stringProp name="parameters" />
                      <stringProp name="script">AssertionResult.setFailure(true);
AssertionResult.setFailureMessage("failed to find datacheck '" + vars.get("report_actions_datacheck_" + vars.get("action_counter")) + "' in " + vars.get("report_action") + " response");</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223Assertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
                <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If error or fault">
                  <stringProp name="IfController.condition">${__groovy("${m_sStatus}"=="error" || "${m_sStatus}" == "fault")}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ unexpected status ${m_sStatus}">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script" />
                  </JSR223Sampler>
                  <hashTree>
                    <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="unexpected status">
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="filename" />
                      <stringProp name="parameters" />
                      <stringProp name="script">AssertionResult.setFailure(true);
AssertionResult.setFailureMessage("unexpected status '" + vars.get("m_sStatus") + "' in response");</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223Assertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
                <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach chart_url in chart_urls">
                  <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
                  <stringProp name="ForeachController.returnVal">chart_url</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
vars.put("chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("chart_url")));</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ getChart">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="Accept-Language">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Referer">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=true&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Encoding">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Content-Type: image/png?">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="277769327">Content-Type: image\/png</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
                <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="verify chart count">
                  <stringProp name="IfController.condition">${__groovy(${chart_urls_matchNr}!=${__V(report_actions_expected_chart_count_${action_counter})})}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ expected chart count ${__V(report_actions_expected_chart_count_${action_counter})} not equal to actual chart count ${chart_urls_matchNr}">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put("report_action_chart_count_verification", "expected chart count ${__V(report_actions_expected_chart_count_${action_counter})} not equal to actual chart count ${chart_urls_matchNr}");</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include release">
            </GenericController>
          <hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/release">
          <stringProp name="IfController.condition">${__groovy("${m_sStatus}"!="fault")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="release">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ release">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="b_action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">b_action</stringProp>
                    <stringProp name="Argument.value">cognosViewer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.catchLogOnFault">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.catchLogOnFault</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.objectPermissions">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">cv.objectPermissions</stringProp>
                    <stringProp name="Argument.value">execute read setPolicy traverse write </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="cv.responseFormat">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cv.responseFormat</stringProp>
                    <stringProp name="Argument.value">successfulRequest</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="m_tracking">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">m_tracking</stringProp>
                    <stringProp name="Argument.value">${m_tracking}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.action</stringProp>
                    <stringProp name="Argument.value">release</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.objectClass">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.objectClass</stringProp>
                    <stringProp name="Argument.value">report</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.primaryAction">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.primaryAction</stringProp>
                    <stringProp name="Argument.value">run</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=true&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
      </hashTree>
    </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If not advanced_viewer &amp;&amp; is savedOutput_html">
          <stringProp name="IfController.condition">${__groovy("${authoring_perspective}"=="false" &amp;&amp; "${report_output_format}"=="savedOutput_html")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="TestPlan.comments">Default report action set to View most recent report</stringProp>
        </IfController>
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ / runSavedOutputHTML_classic">
            </GenericController>
          <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="runSavedOutputHTML_classic" />
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="run saved output html report in classic viewer" />
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
              <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
              <stringProp name="RegexExtractor.template">false</stringProp>
              <stringProp name="RegexExtractor.default">true</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}runcv_${report_name}">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report fields">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}?fields=ancestors,defaultDescription,executionPrompt,options,parent,routingServerGroup,format</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get defaultOutputFormat">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}?fields=defaultOutputFormat&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get default_output">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}/default_output?fields=dataDescriptor,parent,locale,format,permissions,ancestors,lastPage&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
                <stringProp name="TestPlan.comments">http://host.com:9900/bi/v1/objects/i1FB0F87FA04A4DA683FB35EC70F7275F/default_output</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report output ID">
                  <stringProp name="JSONPostProcessor.referenceNames">default_output_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..parent..id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields id,type,permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${default_output_id}/outputs?fields=dataDescriptor,parent,locale,format,permissions,ancestors,lastPage&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_output_id">
                  <stringProp name="JSONPostProcessor.referenceNames">report_output_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields decoratedSpecification">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${default_output_id}?fields=decoratedSpecification,parent&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post disp">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="b_action">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">cognosViewer</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">b_action</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="ui.object">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">storeID("${report_output_id}")</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">ui.object</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="ui.action">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">ui.action</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="run.outputFormat">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">HTML</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">run.outputFormat</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="cv.header">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">cv.header</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="cv.toolbar">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">cv.toolbar</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="cv.keepWindowOpen">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">cv.keepWindowOpen</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="isTitan">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">isTitan</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="generic.anyURI.runOptionEnum#globalParameters">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;parameterValues xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:parameterValue[]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;&lt;/parameterValues&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">generic.anyURI.runOptionEnum#globalParameters</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get outputUrl">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">outputUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;iframe .*src="([^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If first_open">
                <stringProp name="TestPlan.comments">The perspective request should only be called for the first opens</stringProp>
                <stringProp name="IfController.condition">${__groovy("${tr_prefix}"=="first_")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ open classicviewer perspective">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding" />
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/classicviewer</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-Requested-With">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}?fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get notification state">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports/${report_id}/notification_state</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get notifications">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/notifications?unread-only=true&amp;max=20&amp;offset=0</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report content cv.id=_THIS_">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${outputUrl}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
                <stringProp name="TestPlan.comments">${urlPath}/bi/v1/disp/repository/sid/cm/oid/${report_id}/content?cv.id=_THIS_</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=PDF</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Upgrade-Insecure-Requests">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-505831277">${report_datacheck}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="/ how many charts are intended to be displayed by CA?">
                  <stringProp name="TestPlan.comments">Determines how many charts the HTML report is intending to display</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">chartDisplayCount</stringProp>
                  <stringProp name="RegexExtractor.regex">displayChart\("chart</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-887377278">${report_expected_chart_count}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">chartDisplayCount_matchNr</stringProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ check for charts">
                <stringProp name="IfController.condition">${__groovy("${chartDisplayCount_matchNr}" != "0")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ initialize chartCounter">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">// manually control the action_counter because jmeter's action_counter cannot be reset mid-execution of a thread group loop
chartCounter = vars.put("chartCounter", "0");
</stringProp>
                </JSR223Sampler>
                <hashTree />
                <LoopController enabled="true" guiclass="LoopControlPanel" testclass="LoopController" testname="/ Retrieve all charts for the report">
                  <boolProp name="LoopController.continue_forever">true</boolProp>
                  <stringProp name="LoopController.loops">${chartDisplayCount_matchNr}</stringProp>
                </LoopController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increment chartCounter">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">// manually control the action_counter because jmeter's action_counter cannot be reset mid-execution of a thread group loop
chartCounter = Integer.parseInt(vars.get("chartCounter"));
chartCounter = chartCounter + 1;
vars.put("chartCounter", String.valueOf(chartCounter));</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report charts (if they exist)">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding" />
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp/repository/sid/cm/oid/${report_output_id}/images/img${chartCounter}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="Accept">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Encoding">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1654885887">Content-Type: image/png</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset chartCounter">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("chartCounter", "0");</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If not advanced_viewer &amp;&amp; is savedOutput_pdf">
          <stringProp name="IfController.condition">${__groovy("${authoring_perspective}"=="false" &amp;&amp; "${report_output_format}"=="savedOutput_pdf")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="TestPlan.comments">Default report action set to View most recent report</stringProp>
        </IfController>
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ / runSavedOutputPDF_classic">
            </GenericController>
          <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="runSavedOutputPDF_classic" />
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="run saved output pdf report in classic viewer" />
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
              <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
              <stringProp name="RegexExtractor.template">false</stringProp>
              <stringProp name="RegexExtractor.default">true</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}runcv_${report_name}">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report fields">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}?fields=ancestors,defaultDescription,executionPrompt,options,parent,routingServerGroup,format</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get defaultOutputFormat">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}?fields=defaultOutputFormat&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get default_output">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}/default_output?fields=dataDescriptor,parent,locale,format,permissions,ancestors,lastPage&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
                <stringProp name="TestPlan.comments">http://host.com:9900/bi/v1/objects/i1FB0F87FA04A4DA683FB35EC70F7275F/default_output</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report output ID">
                  <stringProp name="JSONPostProcessor.referenceNames">default_output_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..parent..id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields id,type,permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${default_output_id}/outputs?fields=dataDescriptor,parent,locale,format,permissions,ancestors,lastPage&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_output_id">
                  <stringProp name="JSONPostProcessor.referenceNames">report_output_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields decoratedSpecification">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${default_output_id}?fields=decoratedSpecification,parent&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="only call perspective for savedoutput - not when opening latestVersion">
                <stringProp name="IfController.condition">${__groovy("${report_output_format}"=="savedOutput_pdf")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If first_open">
                  <stringProp name="TestPlan.comments">The perspective request should only be called for the first opens</stringProp>
                  <stringProp name="IfController.condition">${__groovy("${tr_prefix}"=="first_")}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ open saved output perspective">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding" />
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/authoring</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="Accept-Language">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Referer">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="X-Requested-With">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Encoding">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                  </hashTree>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get notification state">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports/${report_id}/notification_state</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get notifications">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/notifications?unread-only=true&amp;max=20&amp;offset=0</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields id,type,permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_output_id}?fields=id,type,permissions</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report output content">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp/repository/sid/cm/oid/${report_output_id}/content</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=PDF</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Upgrade-Insecure-Requests">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-505831277">${report_datacheck}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/pat/rsapp.htm">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/pat/rsapp.htm?v=0.${__Random(10000000,99999999)}0${__Random(10000000,99999999)}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset action_counter">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("action_counter", "0");</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If not advanced_viewer &amp;&amp; is savedOutput_html_latestVersion">
          <stringProp name="IfController.condition">${__groovy("${authoring_perspective}"=="false" &amp;&amp; "${report_output_format}"=="savedOutput_html_latestVersion")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="TestPlan.comments">Utilizes report's View versions option to select saved output version</stringProp>
        </IfController>
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ / runSavedOutputHTML_classic">
            </GenericController>
          <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="runSavedOutputHTML_classic" />
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="run saved output html report in classic viewer" />
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
              <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
              <stringProp name="RegexExtractor.template">false</stringProp>
              <stringProp name="RegexExtractor.default">true</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}runcv_${report_name}">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report fields">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}?fields=ancestors,defaultDescription,executionPrompt,options,parent,routingServerGroup,format</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get defaultOutputFormat">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}?fields=defaultOutputFormat&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get default_output">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}/default_output?fields=dataDescriptor,parent,locale,format,permissions,ancestors,lastPage&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
                <stringProp name="TestPlan.comments">http://host.com:9900/bi/v1/objects/i1FB0F87FA04A4DA683FB35EC70F7275F/default_output</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report output ID">
                  <stringProp name="JSONPostProcessor.referenceNames">default_output_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..parent..id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields id,type,permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${default_output_id}/outputs?fields=dataDescriptor,parent,locale,format,permissions,ancestors,lastPage&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_output_id">
                  <stringProp name="JSONPostProcessor.referenceNames">report_output_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields decoratedSpecification">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${default_output_id}?fields=decoratedSpecification,parent&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post disp">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="b_action">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">cognosViewer</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">b_action</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="ui.object">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">storeID("${report_output_id}")</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">ui.object</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="ui.action">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">ui.action</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="run.outputFormat">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">HTML</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">run.outputFormat</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="cv.header">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">cv.header</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="cv.toolbar">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">cv.toolbar</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="cv.keepWindowOpen">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">cv.keepWindowOpen</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="isTitan">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">isTitan</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="generic.anyURI.runOptionEnum#globalParameters">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;parameterValues xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:parameterValue[]" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus="http://developer.cognos.com/schemas/bibus/3/" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;&lt;/parameterValues&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">generic.anyURI.runOptionEnum#globalParameters</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get outputUrl">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">outputUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;iframe .*src="([^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree />
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If first_open">
                <stringProp name="TestPlan.comments">The perspective request should only be called for the first opens</stringProp>
                <stringProp name="IfController.condition">${__groovy("${tr_prefix}"=="first_")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ open classicviewer perspective">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding" />
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/classicviewer</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-Requested-With">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}?fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get notification state">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports/${report_id}/notification_state</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get notifications">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/notifications?unread-only=true&amp;max=20&amp;offset=0</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report content cv.id=_THIS_">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${outputUrl}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
                <stringProp name="TestPlan.comments">${urlPath}/bi/v1/disp/repository/sid/cm/oid/${report_id}/content?cv.id=_THIS_</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=PDF</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Upgrade-Insecure-Requests">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-505831277">${report_datacheck}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="/ how many charts are intended to be displayed by CA?">
                  <stringProp name="TestPlan.comments">Determines how many charts the HTML report is intending to display</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">chartDisplayCount</stringProp>
                  <stringProp name="RegexExtractor.regex">displayChart\("chart</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-887377278">${report_expected_chart_count}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">chartDisplayCount_matchNr</stringProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ check for charts">
                <stringProp name="IfController.condition">${__groovy("${chartDisplayCount_matchNr}" != "0")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ initialize chartCounter">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">// manually control the action_counter because jmeter's action_counter cannot be reset mid-execution of a thread group loop
chartCounter = vars.put("chartCounter", "0");
</stringProp>
                </JSR223Sampler>
                <hashTree />
                <LoopController enabled="true" guiclass="LoopControlPanel" testclass="LoopController" testname="/ Retrieve all charts for the report">
                  <boolProp name="LoopController.continue_forever">true</boolProp>
                  <stringProp name="LoopController.loops">${chartDisplayCount_matchNr}</stringProp>
                </LoopController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increment chartCounter">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">// manually control the action_counter because jmeter's action_counter cannot be reset mid-execution of a thread group loop
chartCounter = Integer.parseInt(vars.get("chartCounter"));
chartCounter = chartCounter + 1;
vars.put("chartCounter", String.valueOf(chartCounter));</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report charts (if they exist)">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding" />
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp/repository/sid/cm/oid/${report_output_id}/images/img${chartCounter}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="Accept">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Encoding">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1654885887">Content-Type: image/png</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset chartCounter">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("chartCounter", "0");</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If not advanced_viewer &amp;&amp; is savedOutput_pdf_latestVersion">
          <stringProp name="IfController.condition">${__groovy("${authoring_perspective}"=="false" &amp;&amp; "${report_output_format}"=="savedOutput_pdf_latestVersion")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="TestPlan.comments">Utilizes report's View versions option to select saved output version</stringProp>
        </IfController>
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ / runSavedOutputPDF_classic">
            </GenericController>
          <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="runSavedOutputPDF_classic" />
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="run saved output pdf report in classic viewer" />
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get datacheck">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">datacheck_not_found</stringProp>
              <stringProp name="RegexExtractor.regex">${report_datacheck}</stringProp>
              <stringProp name="RegexExtractor.template">false</stringProp>
              <stringProp name="RegexExtractor.default">true</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}runcv_${report_name}">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report fields">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}?fields=ancestors,defaultDescription,executionPrompt,options,parent,routingServerGroup,format</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get defaultOutputFormat">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}?fields=defaultOutputFormat&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get default_output">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}/default_output?fields=dataDescriptor,parent,locale,format,permissions,ancestors,lastPage&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
                <stringProp name="TestPlan.comments">http://host.com:9900/bi/v1/objects/i1FB0F87FA04A4DA683FB35EC70F7275F/default_output</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report output ID">
                  <stringProp name="JSONPostProcessor.referenceNames">default_output_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..parent..id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields id,type,permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${default_output_id}/outputs?fields=dataDescriptor,parent,locale,format,permissions,ancestors,lastPage&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_output_id">
                  <stringProp name="JSONPostProcessor.referenceNames">report_output_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields decoratedSpecification">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${default_output_id}?fields=decoratedSpecification,parent&amp;fields=defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2Cbase%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="only call perspective for savedoutput - not when opening latestVersion">
                <stringProp name="IfController.condition">${__groovy("${report_output_format}"=="savedOutput_pdf")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If first_open">
                  <stringProp name="TestPlan.comments">The perspective request should only be called for the first opens</stringProp>
                  <stringProp name="IfController.condition">${__groovy("${tr_prefix}"=="first_")}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ open saved output perspective">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding" />
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/authoring</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="Accept-Language">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Referer">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="X-Requested-With">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Encoding">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                  </hashTree>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get notification state">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports/${report_id}/notification_state</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get notifications">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/notifications?unread-only=true&amp;max=20&amp;offset=0</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields id,type,permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_output_id}?fields=id,type,permissions</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=HTML</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report output content">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp/repository/sid/cm/oid/${report_output_id}/content</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}/?perspective=savedoutput&amp;id=&amp;reportId=${report_id}&amp;path=v1%2Fdisp%2Frepository%2Fsid%2Fcm%2Frid%2F${report_id}%2Foid%2Fdefault%2Fcontent&amp;title=${report_name}&amp;type=report&amp;format=PDF</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Upgrade-Insecure-Requests">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-505831277">${report_datacheck}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/pat/rsapp.htm">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/pat/rsapp.htm?v=0.${__Random(10000000,99999999)}0${__Random(10000000,99999999)}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset action_counter">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("action_counter", "0");</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If not advanced_viewer &amp;&amp; is Active Report">
          <stringProp name="IfController.condition">${__groovy("${authoring_perspective}"=="false" &amp;&amp; "${report_output_format}"=="interactiveReport")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ runReport_classic">
            </GenericController>
          <hashTree>
        <Arguments enabled="false" guiclass="ArgumentsPanel" testclass="Arguments" testname="manual inputs for debugging - normally disabled, do not delete">
          <collectionProp name="Arguments.arguments">
            <elementProp elementType="Argument" name="url_base">
              <stringProp name="Argument.name">url_base</stringProp>
              <stringProp name="Argument.value">http://${serverName}:${serverPort}${urlPath}/bi</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">mostly for the referer header value</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_id">
              <stringProp name="Argument.name">report_id</stringProp>
              <stringProp name="Argument.value">iB8B0EDF0EDCA442D86FF534AE66CA5B6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">ID from the properties of the report</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_name">
              <stringProp name="Argument.name">report_name</stringProp>
              <stringProp name="Argument.value">master_detail</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_output_format">
              <stringProp name="Argument.name">report_output_format</stringProp>
              <stringProp name="Argument.value">HTML</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_datacheck">
              <stringProp name="Argument.name">report_datacheck</stringProp>
              <stringProp name="Argument.value">14,111,228.67</stringProp>
              <stringProp name="Argument.desc">something that only appears in the report output, indicating a successful run</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_expected_chart_count">
              <stringProp name="Argument.name">report_expected_chart_count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">total number of expected charts in the report output</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_actions_1">
              <stringProp name="Argument.name">report_actions_1</stringProp>
              <stringProp name="Argument.value">nextPage</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_actions_datacheck_1">
              <stringProp name="Argument.name">report_actions_datacheck_1</stringProp>
              <stringProp name="Argument.value">1,969,460.13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_actions_2">
              <stringProp name="Argument.name">report_actions_2</stringProp>
              <stringProp name="Argument.value">nextPage</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="report_actions_datacheck_2">
              <stringProp name="Argument.name">report_actions_datacheck_2</stringProp>
              <stringProp name="Argument.value">516,972.39</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="tr_prefix">
              <stringProp name="Argument.name">tr_prefix</stringProp>
              <stringProp name="Argument.value" />
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">used for things like "first_" for identifying cold cache requests</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">This "User Defined Variables" test element should be disabled for normal test execution. It contains a list of all inputs required to run this fragment. </stringProp>
        </Arguments>
        <hashTree />
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="run Active Report in classic viewer" />
        <hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}runcv_${report_name}">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get default output format">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                    <stringProp name="Argument.value">defaultOutputFormat</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                    <stringProp name="Argument.value">defaultDescription,executionPrompt,options,parent,routingServerGroup</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get prompt exection">
                <stringProp name="JSONPostProcessor.referenceNames">executionPrompt</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..executionPrompt</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ classic viewer run">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="b_action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">b_action</stringProp>
                    <stringProp name="Argument.value">cognosViewer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="run.prompt">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">run.prompt</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.object">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">ui.object</stringProp>
                    <stringProp name="Argument.value">storeID("${report_id}")</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="ui.action">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ui.action</stringProp>
                    <stringProp name="Argument.value">run</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${url_base}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get cv.actionState">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cv.actionState</stringProp>
                <stringProp name="RegexExtractor.regex">"cv\.actionState": "([^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get m_tracking">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">m_tracking</stringProp>
                <stringProp name="RegexExtractor.regex">"m_sTracking": "([^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">error</stringProp>
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ui.cafcontextid">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ui.cafcontextid</stringProp>
                <stringProp name="RegexExtractor.regex">"m_sCAFContext": "([^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get m_sParameters">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_sParameters</stringProp>
                <stringProp name="RegexExtractor.regex">"m_sParameters": "([^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ui.conversation">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ui.conversation</stringProp>
                <stringProp name="RegexExtractor.regex">"m_sConversation": "([^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get m_sStatus">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">m_sStatus</stringProp>
                <stringProp name="RegexExtractor.regex">"m_sStatus": "([^"]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">error</stringProp>
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="m_tracking found">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="96784904">error</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">${m_tracking}</stringProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get generatedOutputPath">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">generatedOutputPath</stringProp>
                <stringProp name="RegexExtractor.regex">'generatedOutputPath'] = '${urlPath}/bi/v1/disp/([^';]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number" />
              </RegexExtractor>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset runPrimaryAsync">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("runPrimaryAsync", "true")</stringProp>
            </JSR223Sampler>
            <hashTree />
            <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="async">
              <stringProp name="WhileController.condition">${__groovy("${m_sStatus}"!="complete" &amp;&amp; "${m_sStatus}"!="prompting")}</stringProp>
            </WhileController>
            <hashTree>
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="check for fault or error">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="97204770">fault</stringProp>
                  <stringProp name="96784904">error</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">m_sStatus</stringProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="primary wait once">
                <stringProp name="IfController.condition">${__groovy("${runPrimaryAsync}"=="true")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ primary wait">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="b_action">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">b_action</stringProp>
                        <stringProp name="Argument.value">cognosViewer</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.actionState">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.actionState</stringProp>
                        <stringProp name="Argument.value">${cv.actionState}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.catchLogOnFault">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.catchLogOnFault</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.id">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.id</stringProp>
                        <stringProp name="Argument.value">_NS_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.objectPermissions">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">cv.objectPermissions</stringProp>
                        <stringProp name="Argument.value">execute read setPolicy traverse write </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.responseFormat">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.responseFormat</stringProp>
                        <stringProp name="Argument.value">data</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.showFaultPage">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.showFaultPage</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="executionParameters">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">executionParameters</stringProp>
                        <stringProp name="Argument.value">${m_sParameters}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="m_tracking">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">m_tracking</stringProp>
                        <stringProp name="Argument.value">${m_tracking}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="ui.action">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ui.action</stringProp>
                        <stringProp name="Argument.value">wait</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="ui.cafcontextid">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ui.cafcontextid</stringProp>
                        <stringProp name="Argument.value">${ui.cafcontextid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="ui.conversation">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ui.conversation</stringProp>
                        <stringProp name="Argument.value">${ui.conversation}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="ui.object">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ui.object</stringProp>
                        <stringProp name="Argument.value">storeID("${report_id}")</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="ui.objectClass">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ui.objectClass</stringProp>
                        <stringProp name="Argument.value">report</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="ui.primaryAction">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ui.primaryAction</stringProp>
                        <stringProp name="Argument.value">run</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get async_state">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">async_state</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;state&gt;([^&lt;]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get generatedOutputPath">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">generatedOutputPath</stringProp>
                    <stringProp name="RegexExtractor.regex">}&lt;\/state&gt;&lt;\/xml&gt;(.*)\/content</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="set runPrimaryAsync false">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put("runPrimaryAsync", "false")</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                </hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get async parameters">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
return StringEscapeUtils.unescapeHtml4(vars.get("async_state"));</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get cv.actionState">
                    <stringProp name="JSONPostProcessor.referenceNames">cv.actionState</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sActionState</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_tracking">
                    <stringProp name="JSONPostProcessor.referenceNames">m_tracking</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sTracking</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.cafcontextid">
                    <stringProp name="JSONPostProcessor.referenceNames">ui.cafcontextid</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">*.m_sCAFContext</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.conversation">
                    <stringProp name="JSONPostProcessor.referenceNames">ui.conversation</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sConversation</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_sStatus">
                    <stringProp name="JSONPostProcessor.referenceNames">m_sStatus</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sStatus</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">error</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                </hashTree>
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="secondary wait">
                <stringProp name="IfController.condition">${__groovy("${m_sStatus}"!="complete" &amp;&amp; "${m_sStatus}"!="prompting")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ secondary wait">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="b_action">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">b_action</stringProp>
                        <stringProp name="Argument.value">cognosViewer</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.actionState">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.actionState</stringProp>
                        <stringProp name="Argument.value">${cv.actionState}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.catchLogOnFault">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.catchLogOnFault</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.responseFormat">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.responseFormat</stringProp>
                        <stringProp name="Argument.value">data</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="cv.showFaultPage">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cv.showFaultPage</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="m_tracking">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">m_tracking</stringProp>
                        <stringProp name="Argument.value">${m_tracking}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="ui.action">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ui.action</stringProp>
                        <stringProp name="Argument.value">wait</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="ui.primaryAction">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ui.primaryAction</stringProp>
                        <stringProp name="Argument.value">run</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get async_state">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">async_state</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;state&gt;([^&lt;]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="false" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get generatedOutputPath">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">generatedOutputPath</stringProp>
                    <stringProp name="RegexExtractor.regex">}&lt;\/state&gt;&lt;\/xml&gt;(.*)\/content</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                  <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get generatedOutputPath">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">generatedOutputPath</stringProp>
                    <stringProp name="RegexExtractor.regex">'generatedOutputPath'] = '${urlPath}/bi/v1/disp/([^';]*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default" />
                    <stringProp name="RegexExtractor.match_number" />
                  </RegexExtractor>
                  <hashTree />
                </hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get async parameters">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
return StringEscapeUtils.unescapeHtml4(vars.get("async_state"));</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get cv.actionState">
                    <stringProp name="JSONPostProcessor.referenceNames">cv.actionState</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sActionState</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_tracking">
                    <stringProp name="JSONPostProcessor.referenceNames">m_tracking</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sTracking</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.cafcontextid">
                    <stringProp name="JSONPostProcessor.referenceNames">ui.cafcontextid</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">*.m_sCAFContext</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get ui.conversation">
                    <stringProp name="JSONPostProcessor.referenceNames">ui.conversation</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sConversation</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get m_sStatus">
                    <stringProp name="JSONPostProcessor.referenceNames">m_sStatus</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.m_sStatus</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">error</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If error or fault">
              <stringProp name="IfController.condition">${__groovy("${m_sStatus}"=="error" || "${m_sStatus}" == "fault")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ unexpected status is ${m_sStatus}">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script" />
              </JSR223Sampler>
              <hashTree>
                <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="unexpected status is ${m_sStatus}">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">AssertionResult.setFailure(true);
AssertionResult.setFailureMessage("bad status received '" + vars.get("m_sStatus") +  "' in response");</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree />
              </hashTree>
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If not error or fault">
              <stringProp name="IfController.condition">${__groovy("${m_sStatus}"!="error" &amp;&amp; "${m_sStatus}"!="fault")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get irot">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/irot/irot.htm</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get prompt exection">
                  <stringProp name="JSONPostProcessor.referenceNames">executionPrompt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..executionPrompt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ execute reportInfo.xml">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp/${generatedOutputPath}/reportInfo.xml</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.80.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains ReportInfo&gt;&lt;StoreID">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1479409092">ReportInfo&gt;&lt;StoreID</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ execute report_output.xml">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp/${generatedOutputPath}/report_output.xml</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.80.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains compressed=&quot;true&quot;">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-520342194">compressed="true"</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ execute ar_spec.xml">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp/${generatedOutputPath}/ar_spec.xml</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.80.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains XMLAttributes">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="274567342">XMLAttributes</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ execute report_style.css">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp/${generatedOutputPath}/report_style.css</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.80.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains padding">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-806339567">padding</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart urls">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">\.[0-9a-zA-Z]{1,5} \{background-image:url\("(genImages.[^"]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">genImages\/[^");]*</stringProp>
                </RegexExtractor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ execute drillContextInfo.xml">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp/${generatedOutputPath}/drillContextInfo.xml</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.80.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=${executionPrompt}&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains drillContextInfo">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2324386">drillContextInfo</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="reset charts_done">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">charts_done = []
vars.putObject("charts_done", charts_done)</stringProp>
            </JSR223Sampler>
            <hashTree />
            <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach chart_url in chart_urls">
              <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
              <stringProp name="ForeachController.returnVal">chart_url</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="false" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
vars.put("chart_url_decoded", StringEscapeUtils.unescapeHtml4(vars.get("chart_url")));</stringProp>
              </JSR223Sampler>
              <hashTree />
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ has the chart been retrieved already?">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("runChart", "true")
charts_done = vars.getObject("charts_done")
chart_url = "${chart_url}"
if (chart_url in charts_done) {
	vars.put("runChart", "false")
}
</stringProp>
              </JSR223Sampler>
              <hashTree />
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If chart not done yet">
                <stringProp name="IfController.condition">${__groovy("${runChart}"=="true")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ getChart">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp/${generatedOutputPath}/${chart_url}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="add chart to charts_done">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">charts_done = vars.getObject("charts_done")
charts_done.add("${chart_url}")</stringProp>
                  </JSR223PostProcessor>
                  <hashTree />
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=true&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Content-Type: image?">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1085058535">Content-Type: image</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset action_counter">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put("action_counter", "0");</stringProp>
          </JSR223Sampler>
          <hashTree />
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="release logic">
          <stringProp name="IfController.condition">${__groovy("${m_sStatus}"!="fault")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ release">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="b_action">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">b_action</stringProp>
                  <stringProp name="Argument.value">cognosViewer</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="cv.catchLogOnFault">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cv.catchLogOnFault</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="cv.objectPermissions">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cv.objectPermissions</stringProp>
                  <stringProp name="Argument.value">execute read setPolicy traverse write </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="cv.responseFormat">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cv.responseFormat</stringProp>
                  <stringProp name="Argument.value">successfulRequest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="m_tracking">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">m_tracking</stringProp>
                  <stringProp name="Argument.value">${m_tracking}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="ui.action">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui.action</stringProp>
                  <stringProp name="Argument.value">release</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="ui.objectClass">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui.objectClass</stringProp>
                  <stringProp name="Argument.value">report</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="ui.primaryAction">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui.primaryAction</stringProp>
                  <stringProp name="Argument.value">run</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${url_base}v1/disp?b_action=cognosViewer&amp;run.outputFormat=${report_output_format}&amp;run.prompt=true&amp;system.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FsystemOptionEnum%23accessibilityFeatures=false&amp;biDirectional.http%3A%2F%2Fdeveloper.cognos.com%2Fceba%2Fconstants%2FbiDirectionalOptionEnum%23biDirectionalFeaturesEnabled=false&amp;ui.object=storeID(%22${report_id}%22)&amp;ui.action=run&amp;cv.header=false&amp;cv.toolbar=false&amp;protectParameters=false&amp;isTitan=true&amp;cv.keepWindowOpen=true</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
      </hashTree>
    </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If deployment_import">
              <stringProp name="IfController.condition">${__groovy("${type}"=="deployment_import")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include admin/importDeployment.jmx">
                </GenericController>
              <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="simple import" />
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set deployment info">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("item")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get deployment_name">
              <stringProp name="JSONPostProcessor.referenceNames">deployment_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="JSONPostProcessor.defaultValues">${__P(deploymentName)}</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get deployment_password">
              <stringProp name="JSONPostProcessor.referenceNames">deployment_password</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.password</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="JSONPostProcessor.defaultValues">${__P(deploymentPassword,)}</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="generate authToken">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.auth.AuthenticityToken;
import com.ibm.bi.auth.BiBase64;
import java.io.ByteArrayOutputStream;
log.debug("usersessionid=" + vars.get("COOKIE_usersessionid"));	
authToken = AuthenticityToken.generateToken(vars.get("COOKIE_usersessionid"));
log.debug("authToken=" + authToken);
vars.put("authToken", authToken);</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="query">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope
	xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
	xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:bus="http://developer.cognos.com/schemas/bibus/3/"
	xmlns:ns1="http://developer.cognos.com/schemas/contentManagerService/1"&gt;
	&lt;SOAP-ENV:Header&gt;
		&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;
			&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;
				&lt;item xsi:type="bus:dispatcherTransportVar"&gt;
					&lt;name xsi:type="xsd:string"&gt;html&lt;/name&gt;
					&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;
				&lt;/item&gt;
			&lt;/bus:dispatcherTransportVars&gt;
			&lt;bus:CAM xsi:type="bus:CAM"&gt;
				&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;
			&lt;/bus:CAM&gt;
			&lt;bus:CAF xsi:type="bus:CAF"&gt;
				&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;
			&lt;/bus:CAF&gt;
			&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;
				&lt;item&gt;
					&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;
					&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;
				&lt;/item&gt;
				&lt;item&gt;
					&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;
					&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;
				&lt;/item&gt;
			&lt;/bus:userPreferenceVars&gt;
			&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;
				&lt;item xsi:type="bus:dispatcherTransportVar"&gt;
					&lt;name xsi:type="xsd:string"&gt;cm&lt;/name&gt;
					&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;
				&lt;/item&gt;
			&lt;/bus:dispatcherTransportVars&gt;
		&lt;/bus:biBusHeader&gt;
	&lt;/SOAP-ENV:Header&gt;
	&lt;SOAP-ENV:Body&gt;
		&lt;ns1:query&gt;
			&lt;searchPath xsi:type="bus:searchPathMultipleObject"&gt;/adminFolder&lt;/searchPath&gt;
			&lt;properties SOAP-ENC:arrayType="bus:propEnum[2]" xsi:type="SOAP-ENC:Array"&gt;
				&lt;properties xsi:type="bus:propEnum"&gt;searchPath&lt;/properties&gt;
				&lt;properties xsi:type="bus:propEnum"&gt;policies&lt;/properties&gt;
			&lt;/properties&gt;
			&lt;sortBy SOAP-ENC:arrayType="bus:sort[0]" xsi:type="SOAP-ENC:Array"/&gt;
			&lt;options xsi:type="bus:queryOptions"&gt;
				&lt;dataEncoding xsi:type="bus:encodingEnum" xsi:nil="true"/&gt;
				&lt;maxDataBytes xsi:type="xsd:integer" xsi:nil="true"/&gt;
				&lt;maxObjects xsi:type="xsd:integer" xsi:nil="true"/&gt;
				&lt;permission xsi:type="xsd:string" xsi:nil="true"/&gt;
				&lt;refProps xsi:type="bus:refProp" xsi:nil="true"/&gt;
				&lt;schemaInfo xsi:type="xsd:boolean"&gt;false&lt;/schemaInfo&gt;
				&lt;skipDataBytes xsi:type="xsd:integer" xsi:nil="true"/&gt;
				&lt;skipObjects xsi:type="xsd:integer" xsi:nil="true"/&gt;
			&lt;/options&gt;
		&lt;/ns1:query&gt;
	&lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/api/soap</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="SOAPAction">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/contentManagerService/201701/</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <XPathExtractor enabled="true" guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="get userCapabilityCache">
              <stringProp name="XPathExtractor.default">&lt;userCapabilityCache&gt;&lt;/userCapabilityCache&gt;</stringProp>
              <stringProp name="XPathExtractor.refname">userCapabilityCache</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//userCapabilityCache</stringProp>
              <boolProp name="XPathExtractor.fragment">true</boolProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree />
            <XPathExtractor enabled="true" guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="get policies">
              <stringProp name="XPathExtractor.default" />
              <stringProp name="XPathExtractor.refname">policies</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//policies</stringProp>
              <boolProp name="XPathExtractor.fragment">true</boolProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getDeploymentOptions">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope
  xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
  xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:bus="http://developer.cognos.com/schemas/bibus/3/"
  xmlns:ns1="http://developer.cognos.com/schemas/contentManagerService/1"&gt;
  &lt;SOAP-ENV:Header&gt;
    &lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;
      &lt;bus:CAM xsi:type="bus:CAM"&gt;
        &lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${authToken}&lt;/authenticityToken&gt;
      &lt;/bus:CAM&gt;
      &lt;bus:CAF xsi:type="bus:CAF"&gt;
        &lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;
      &lt;/bus:CAF&gt;
      &lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;
        &lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;
          &lt;item xsi:type="bus:formFieldVar"&gt;
            &lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;
            &lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;
          &lt;/item&gt;
          &lt;item xsi:type="bus:formFieldVar"&gt;
            &lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;
            &lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;
          &lt;/item&gt;
        &lt;/bus:formFieldVars&gt;
      &lt;/bus:hdrSession&gt;
      &lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;
        &lt;item&gt;
          &lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;
          &lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;
          &lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;
        &lt;/item&gt;
      &lt;/bus:userPreferenceVars&gt;
      &lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;
        &lt;item xsi:type="bus:dispatcherTransportVar"&gt;
          &lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;
          &lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;
        &lt;/item&gt;
      &lt;/bus:dispatcherTransportVars&gt;
    &lt;/bus:biBusHeader&gt;
  &lt;/SOAP-ENV:Header&gt;
  &lt;SOAP-ENV:Body&gt;
    &lt;ns1:getDeploymentOptions SOAP-ENC:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;
      &lt;archive xsi:type="xsd:string"&gt;${deployment_name}&lt;/archive&gt;
        ${getDeploymentsOptions_password_option}
    &lt;/ns1:getDeploymentOptions&gt;
  &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/api/soap</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="SOAPAction">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/contentManagerService/201701/</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <XPath2Extractor enabled="true" guiclass="XPath2ExtractorGui" testclass="XPath2Extractor" testname="get deployment_options">
              <stringProp name="XPathExtractor2.default" />
              <stringProp name="XPathExtractor2.refname">deployment_options</stringProp>
              <stringProp name="XPathExtractor2.matchNumber">1</stringProp>
              <stringProp name="XPathExtractor2.xpathQuery">//result</stringProp>
              <stringProp name="XPathExtractor2.namespaces" />
              <boolProp name="XPathExtractor2.fragment">true</boolProp>
            </XPath2Extractor>
            <hashTree />
            <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set password_nv_option">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${deployment_password}</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
if (Parameters == "") {
  password_nv_option = ''
} else {
  password_nv_option =  '&lt;name xsi:type="bus:deploymentOptionEnum"&gt;archiveEncryptPassword&lt;/name&gt;' +
                           '&lt;value xsi:type="xsd:string"&gt;&amp;lt;credential&amp;gt;&amp;lt;password&amp;gt;' +
                           Parameters + '&amp;lt;/password&amp;gt;&amp;lt;/credential&amp;gt;&lt;/value&gt;'
}

vars.put("password_nv_option", password_nv_option)                  

</stringProp>
            </JSR223PreProcessor>
            <hashTree />
            <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set getDeploymentsOptions_password_option">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${password_nv_option}</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">if (Parameters == "") {
  getDeploymentsOptions_password_option = ''
} else {
  getDeploymentsOptions_password_option = '&lt;options SOAP-ENC:arrayType="ns3:option[1]" xsi:type="SOAP-ENC:Array"&gt;' +
                           '&lt;options xsi:type="bus:deploymentOptionString"&gt;' +
                           Parameters + 
                           '&lt;/options&gt;&lt;/options&gt;'
}

vars.put("getDeploymentsOptions_password_option", getDeploymentsOptions_password_option)                  

</stringProp>
            </JSR223PreProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="prepare deployment_options">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.io.StringReader;
import java.io.StringWriter;
import java.util.Iterator;
import org.apache.commons.lang3.StringEscapeUtils;

import javax.xml.namespace.NamespaceContext;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;


deployment_options = vars.get("deployment_options");
//log.info(deployment_options)


DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

factory.setNamespaceAware(true);
DocumentBuilder builder = factory.newDocumentBuilder();

document = builder.parse(new InputSource(new StringReader(deployment_options)));

// change root items to value
for(nextTopItem = ((Element)document.getElementsByTagName("result").item(0)).getFirstChild(); 
    nextTopItem != null; 
    nextTopItem = nextTopItem.getNextSibling()) {
    	
	if (nextTopItem.getNodeName().equals("item")) {
		document.renameNode(((Element)nextTopItem), null, "value");
	}
}

nodes = document.getElementsByTagName("ancestors");

for(int i = 0; i&lt;nodes.getLength(); i++) {
  Node eachNode = nodes.item(i);
  NodeList items = ((Element)eachNode).getElementsByTagName("item");
  for (int j = 0; j &lt; items.getLength(); j++) {
	  Element eachItem = ((Element)items.item(j));
  	  Element storeID = document.createElement("storeID");
  	  storeID.setAttribute("xsi:nil", "true");
  	  storeID.setAttribute("xsi:type", "cm:guid");
  	  eachItem.appendChild(storeID);
	  document.renameNode(eachItem, null, "ancestors");
  }
}

								          
xPathfactory = XPathFactory.newInstance();
xpath = xPathfactory.newXPath();

NamespaceContext ctx = new NamespaceContext() {
    public String getNamespaceURI(String prefix) {
        if ("xsi".equals(prefix)) {
            return "http://www.w3.org/2001/XMLSchema-instance";
        }
        return null;
    }
    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }
    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }
};

xpath.setNamespaceContext(ctx);

expr = xpath.compile("//item[@xsi:type='cm:multilingualToken']");
// //item[contains(@xsi:type,":multilingualToken")]
itemToNameList = expr.evaluate(document, XPathConstants.NODESET);
for (int i = 0; i&lt;itemToNameList.getLength(); i++) {
	Node thisNode = itemToNameList.item(i);
	document.renameNode(thisNode, null, "name");
     Node multilingualToken = ((Element)thisNode).getElementsByTagName("value").item(0);
     //newcontent = StringEscapeUtils.escapeXml10(multilingualToken.getTextContent());
     originalTextContent = multilingualToken.getTextContent();
     newTextContent = "";
		
	for(int i=0; i&lt;originalTextContent.length(); i++) {
		String conv = StringEscapeUtils.escapeJson(originalTextContent.substring(i, i+1));
		if (conv.length()==1) {
			newTextContent = newTextContent + conv;
		} else {
			newTextContent = newTextContent + conv.replaceFirst("\\\\u", "&amp;#x") + ";";
		}
	}
     //log.info("old: " + multilingualToken.getTextContent() + "  --- new " + newTextContent);
	multilingualToken.setTextContent(newTextContent);
}

/**
for (int i = itemToNameList.getLength() - 1; i &gt;= 0; i--) {
  Element e = ((Element)itemToNameList.item(i));
  Node locale = e.getElementsByTagName("locale").item(0);
   if (!((Element)locale).getTextContent().contains("en")) {
    e.getParentNode().removeChild(e);
  }
}
**/

domSource = new DOMSource(document);
writer = new StringWriter();
result = new StreamResult(writer);
tf = TransformerFactory.newInstance();
transformer = tf.newTransformer();
transformer.setOutputProperty("omit-xml-declaration", "yes");
transformer.transform(domSource, result);

outString = writer.toString();
outString = outString.replaceAll("&lt;result [^&lt;]*", "").replaceFirst("&lt;/result&gt;", "");
outString = outString.replaceAll("&lt;item ", "&lt;value ").replaceAll("&lt;/item&gt;", "&lt;/value&gt;");

vars.put("deployment_options", outString);</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <XPathExtractor enabled="true" guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="get busHeader">
              <stringProp name="XPathExtractor.default" />
              <stringProp name="XPathExtractor.refname">busHeader</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//bus:biBusHeader</stringProp>
              <boolProp name="XPathExtractor.fragment">true</boolProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="add">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope
  xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
  xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:bus="http://developer.cognos.com/schemas/bibus/3/"
  xmlns:ns1="http://developer.cognos.com/schemas/contentManagerService/1"&gt;
  &lt;SOAP-ENV:Header&gt;
    ${busHeader}
  &lt;/SOAP-ENV:Header&gt;
  &lt;SOAP-ENV:Body&gt;
    &lt;ns1:add SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:cm1="http://developer.cognos.com/schemas/contentManagerService/1" xmlns:cm="http://developer.cognos.com/schemas/bibus/3/"&gt;
  &lt;parentPath xsi:type="bus:searchPathSingleObject"&gt;/adminFolder&lt;/parentPath&gt;
  &lt;objects SOAP-ENC:arrayType="bus:baseClass[1]" xsi:type="SOAP-ENC:Array" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"&gt;
    &lt;objects xsi:type="bus:importDeployment"&gt;
      &lt;ancestors xsi:type="bus:ancestorInfoArrayProp" xsi:nil="true"/&gt;
      &lt;creationTime xsi:type="bus:dateTimeProp" xsi:nil="true"/&gt;
      &lt;defaultName xsi:type="bus:tokenProp"&gt;
        &lt;schemaInfo xsi:type="bus:schemaInfo" xsi:nil="true"/&gt;
        &lt;value xsi:type="xsd:string"&gt;${deployment_name}&lt;/value&gt;
      &lt;/defaultName&gt;
      &lt;disabled xsi:type="bus:booleanProp" xsi:nil="true"/&gt;
      &lt;hasChildren xsi:type="bus:booleanProp" xsi:nil="true"/&gt;
      &lt;modificationTime xsi:type="bus:dateTimeProp" xsi:nil="true"/&gt;
      &lt;name xsi:type="bus:multilingualTokenProp" xsi:nil="true"/&gt;
      &lt;objectClass xsi:type="bus:classEnumProp" xsi:nil="true"/&gt;
      &lt;owner xsi:type="bus:baseClassArrayProp" xsi:nil="true"/&gt;
      &lt;parent xsi:type="bus:baseClassArrayProp"&gt;
        &lt;schemaInfo xsi:type="bus:schemaInfo" xsi:nil="true"/&gt;
        &lt;value SOAP-ENC:arrayType="bus:baseClass[1]" xsi:type="SOAP-ENC:Array"&gt;
          &lt;value xsi:type="bus:adminFolder"&gt;
            &lt;ancestors xsi:type="bus:ancestorInfoArrayProp" xsi:nil="true"/&gt;
            &lt;creationTime xsi:type="bus:dateTimeProp" xsi:nil="true"/&gt;
            &lt;defaultName xsi:type="bus:tokenProp" xsi:nil="true"/&gt;
            &lt;disabled xsi:type="bus:booleanProp" xsi:nil="true"/&gt;
            &lt;hasChildren xsi:type="bus:booleanProp" xsi:nil="true"/&gt;
            &lt;modificationTime xsi:type="bus:dateTimeProp" xsi:nil="true"/&gt;
            &lt;name xsi:type="bus:multilingualTokenProp" xsi:nil="true"/&gt;
            &lt;objectClass xsi:type="bus:classEnumProp" xsi:nil="true"/&gt;
            &lt;owner xsi:type="bus:baseClassArrayProp" xsi:nil="true"/&gt;
            &lt;parent xsi:type="bus:baseClassArrayProp" xsi:nil="true"/&gt;
            &lt;permissions xsi:type="bus:nmtokenArrayProp" xsi:nil="true"/&gt;
            ${policies}
            &lt;position xsi:type="bus:nonNegativeIntegerProp" xsi:nil="true"/&gt;
            &lt;searchPath xsi:type="bus:stringProp"&gt;
              &lt;schemaInfo xsi:type="bus:schemaInfo" xsi:nil="true"/&gt;
              &lt;value xsi:type="xsd:string"&gt;/adminFolder&lt;/value&gt;
            &lt;/searchPath&gt;
            &lt;storeID xsi:type="bus:guidProp" xsi:nil="true"/&gt;
            &lt;tenantID xsi:type="bus:stringProp" xsi:nil="true"/&gt;
            &lt;usage xsi:type="bus:nmtokenProp" xsi:nil="true"/&gt;
            &lt;version xsi:type="bus:positiveIntegerProp" xsi:nil="true"/&gt;
            &lt;defaultDescription xsi:type="bus:stringProp" xsi:nil="true"/&gt;
            &lt;defaultScreenTip xsi:type="bus:stringProp" xsi:nil="true"/&gt;
            &lt;description xsi:type="bus:multilingualStringProp" xsi:nil="true"/&gt;
            &lt;displaySequence xsi:type="bus:nonNegativeIntegerProp" xsi:nil="true"/&gt;
            &lt;hidden xsi:type="bus:booleanProp" xsi:nil="true"/&gt;
            &lt;iconURI xsi:type="bus:anyURIProp" xsi:nil="true"/&gt;
            &lt;screenTip xsi:type="bus:multilingualStringProp" xsi:nil="true"/&gt;
            &lt;shown xsi:type="bus:booleanProp" xsi:nil="true"/&gt;
            &lt;viewed xsi:type="bus:booleanProp" xsi:nil="true"/&gt;
            &lt;contact xsi:type="bus:baseClassArrayProp" xsi:nil="true"/&gt;
            &lt;contactEMail xsi:type="bus:stringProp" xsi:nil="true"/&gt;
          &lt;/value&gt;
        &lt;/value&gt;
      &lt;/parent&gt;
      &lt;permissions xsi:type="bus:nmtokenArrayProp" xsi:nil="true"/&gt;
      &lt;policies xsi:type="bus:policyArrayProp" xsi:nil="true"/&gt;
      &lt;position xsi:type="bus:nonNegativeIntegerProp" xsi:nil="true"/&gt;
      &lt;searchPath xsi:type="bus:stringProp" xsi:nil="true"/&gt;
      &lt;storeID xsi:type="bus:guidProp" xsi:nil="true"/&gt;
      &lt;tenantID xsi:type="bus:stringProp" xsi:nil="true"/&gt;
      &lt;usage xsi:type="bus:nmtokenProp" xsi:nil="true"/&gt;
      &lt;version xsi:type="bus:positiveIntegerProp" xsi:nil="true"/&gt;
      &lt;defaultDescription xsi:type="bus:stringProp" xsi:nil="true"/&gt;
      &lt;defaultScreenTip xsi:type="bus:stringProp" xsi:nil="true"/&gt;
      &lt;description xsi:type="bus:multilingualStringProp" xsi:nil="true"/&gt;
      &lt;displaySequence xsi:type="bus:nonNegativeIntegerProp" xsi:nil="true"/&gt;
      &lt;hidden xsi:type="bus:booleanProp" xsi:nil="true"/&gt;
      &lt;iconURI xsi:type="bus:anyURIProp" xsi:nil="true"/&gt;
      &lt;screenTip xsi:type="bus:multilingualStringProp" xsi:nil="true"/&gt;
      &lt;shown xsi:type="bus:booleanProp" xsi:nil="true"/&gt;
      &lt;viewed xsi:type="bus:booleanProp" xsi:nil="true"/&gt;
      &lt;options xsi:type="bus:optionArrayProp"&gt;
        &lt;schemaInfo xsi:type="bus:schemaInfo" xsi:nil="true"/&gt;
        &lt;value SOAP-ENC:arrayType="bus:option[33]" xsi:type="SOAP-ENC:Array"&gt;
          &lt;value xsi:type="bus:deploymentOptionAuditLevel"&gt;
            &lt;name xsi:type="bus:deploymentOptionEnum"&gt;recordingLevel&lt;/name&gt;
            &lt;value xsi:type="bus:auditLevelEnum"&gt;full&lt;/value&gt;
          &lt;/value&gt;
          ${deployment_options}
          ${add_password_option}
        &lt;/value&gt;
      &lt;/options&gt;
      &lt;parameters xsi:type="bus:parameterValueArrayProp" xsi:nil="true"/&gt;
      &lt;retentions xsi:type="bus:retentionRuleArrayProp" xsi:nil="true"/&gt;
      &lt;routingServerGroup xsi:type="bus:stringProp" xsi:nil="true"/&gt;
      &lt;routingServerGroupEdition xsi:type="bus:stringProp" xsi:nil="true"/&gt;
    &lt;/objects&gt;
  &lt;/objects&gt;
  &lt;options xsi:type="ns5:addOptions" xmlns:ns5="http://developer.cognos.com/schemas/bibus/3/"&gt;
    &lt;dataEncoding xsi:type="ns5:encodingEnum" xsi:nil="true"/&gt;
    &lt;faultIfObjectReferenced xsi:type="xsd:boolean"&gt;false&lt;/faultIfObjectReferenced&gt;
    &lt;ignoreInvalidObjectReference xsi:type="xsd:boolean"&gt;false&lt;/ignoreInvalidObjectReference&gt;
    &lt;returnProperties xsi:type="ns5:propEnum" xsi:nil="true"/&gt;
    &lt;updateAction xsi:type="ns5:updateActionEnum"&gt;replace&lt;/updateAction&gt;
  &lt;/options&gt;
&lt;/ns1:add&gt;
  &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/api/soap</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="SOAPAction">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/contentManagerService/201701/</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set add_password_option">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${password_nv_option}</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">if (Parameters == "") {
  add_password_option = ''
} else {
  add_password_option = '&lt;value xsi:type="bus:deploymentOptionString"&gt;' +
                            Parameters + 
                            '&lt;/value&gt;'
}
vars.put("add_password_option", add_password_option)                  
</stringProp>
            </JSR223PreProcessor>
            <hashTree />
            <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="add setCookieVar">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">busHeader = vars.get("busHeader")
cookieVars = "&lt;item xsi:type=\"bus:setCookieVar\"&gt;\n" + 
			"						&lt;name xsi:type=\"xsd:string\" xml:space=\"preserve\"&gt;cea-ssa&lt;/name&gt;\n" + 
			"						&lt;value xsi:type=\"xsd:string\" xml:space=\"preserve\"&gt;"+ vars.get("COOKIE_cea-ssa")+"&lt;/value&gt;\n" + 
			"						&lt;maxAge xsi:type=\"xsd:int\"&gt;0&lt;/maxAge&gt;\n" + 
			"					&lt;/item&gt;\n" + 
			"					&lt;item xsi:type=\"bus:setCookieVar\"&gt;\n" + 
			"						&lt;name xsi:type=\"xsd:string\" xml:space=\"preserve\"&gt;usersessionid&lt;/name&gt;\n" + 
			"						&lt;value xsi:type=\"xsd:string\" xml:space=\"preserve\"&gt;"+ vars.get("COOKIE_usersessionid")+"&lt;/value&gt;\n" + 
			"						&lt;maxAge xsi:type=\"xsd:int\"&gt;0&lt;/maxAge&gt;\n" + 
			"					&lt;/item&gt;\n" + 
			"					&lt;item xsi:type=\"bus:setCookieVar\"&gt;\n" + 
			"						&lt;name xsi:type=\"xsd:string\" xml:space=\"preserve\"&gt;cam_passport&lt;/name&gt;\n" + 
			"						&lt;value xsi:type=\"xsd:string\" xml:space=\"preserve\"&gt;"+ vars.get("COOKIE_cam_passport")+"&lt;/value&gt;\n" + 
			"						&lt;maxAge xsi:type=\"xsd:int\"&gt;0&lt;/maxAge&gt;\n" + 
			"					&lt;/item&gt;\n" + 
			"					&lt;item xsi:type=\"bus:setCookieVar\"&gt;\n" + 
			"						&lt;name xsi:type=\"xsd:string\"&gt;userCapabilities&lt;/name&gt;\n" + 
			"						&lt;value xsi:type=\"xsd:string\"&gt;"+ vars.get("COOKIE_userCapabilities")+"&lt;/value&gt;\n" + 
			"						&lt;maxAge xsi:type=\"xsd:int\"&gt;0&lt;/maxAge&gt;\n" + 
			"					&lt;/item&gt;\n" + 
			"					&lt;item xsi:type=\"bus:setCookieVar\"&gt;\n" + 
			"						&lt;name xsi:type=\"xsd:string\"&gt;userCapabilitiesEx&lt;/name&gt;\n" + 
			"						&lt;value xsi:type=\"xsd:string\"&gt;"+ vars.get("COOKIE_userCapabilitiesEx")+"&lt;/value&gt;\n" + 
			"						&lt;maxAge xsi:type=\"xsd:int\"&gt;0&lt;/maxAge&gt;\n" + 
			"					&lt;/item&gt;\n" + 
			"				&lt;/setCookieVars&gt;";

busHeader = busHeader.replaceAll("&lt;/setCookieVars&gt;", cookieVars);
busHeader = busHeader.replaceAll("setCookieVar\\[1\\]", "setCookieVar[6]");
vars.put("busHeader", busHeader);</stringProp>
            </JSR223PreProcessor>
            <hashTree />
            <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set policies for parent">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">policies = vars.get("policies");
policies = policies.replaceAll("&lt;item ", "&lt;value ").replaceAll("&lt;/item&gt;", "&lt;/value&gt;");
policies = policies.replaceAll("policy\\[\\]","policy[3]");
policies = policies.replaceAll("xml:space=\"preserve\"", "");
policies = policies.replaceAll("&lt;value xsi:type=\"bus:permission\"&gt;", "&lt;permissions xsi:type=\"bus:permission\"&gt;");
policies = policies.replaceAll("&lt;/value&gt;&lt;permissions ", "&lt;/permissions&gt;&lt;permissions ");
policies = policies.replaceAll("&lt;/value&gt;&lt;/permissions&gt;", "&lt;/permissions&gt;&lt;/permissions&gt;");
policies = policies.replaceAll("CAMID\\(\":PowerPlay Administrators\"\\)", "CAMID(&amp;quot;:PowerPlay Administrators&amp;quot;)");
policies = policies.replaceAll("CAMID\\(\":Report Administrators\"\\)", "CAMID(&amp;quot;:Report Administrators&amp;quot;)");
policies = policies.replaceAll("CAMID\\(\":Server Administrators\"\\)", "CAMID(&amp;quot;:Server Administrators&amp;quot;)");
vars.put("policies", policies);</stringProp>
            </JSR223PreProcessor>
            <hashTree />
            <XPathExtractor enabled="true" guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="get camHeader">
              <stringProp name="XPathExtractor.default" />
              <stringProp name="XPathExtractor.refname">camHeader</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//bus:CAM</stringProp>
              <boolProp name="XPathExtractor.fragment">true</boolProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree />
          </hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="import_${deployment_name}">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="Argument" name="soapAction">
                  <stringProp name="Argument.name">soapAction</stringProp>
                  <stringProp name="Argument.value">http://host.com/xmlns/prod/cognos/monitorService/201701/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree />
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset asyncTimer">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("asyncTimer", "0");
vars.put("asyncTimeNotReached", "true");
vars.put("sendAsync", "true");</stringProp>
            </JSR223Sampler>
            <hashTree />
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="import">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope
  xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
  xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:bus="http://developer.cognos.com/schemas/bibus/3/"
  xmlns:ns1="http://developer.cognos.com/schemas/contentManagerService/1"&gt;
  &lt;SOAP-ENV:Header&gt;
    &lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;
	 &lt;CAF xsi:type="ns1:CAF" xsi:nil="true"/&gt;
	 ${camHeader}
      &lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;
        &lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;
          &lt;item xsi:type="bus:formFieldVar"&gt;
            &lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;
            &lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;
          &lt;/item&gt;
          &lt;item xsi:type="bus:formFieldVar"&gt;
            &lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;
            &lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;
          &lt;/item&gt;
        &lt;/bus:formFieldVars&gt;
      &lt;/bus:hdrSession&gt;
	&lt;userPreferenceVars soapenc:arrayType="ns1:userPreferenceVar[19]" xsi:type="soapenc:Array" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;showHints&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;showAll&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#baseTextDirection&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/baseTextDirectionEnum#Auto&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;automaticPageRefresh&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;30&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;listViewSeparator&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;none&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;showHiddenObjects&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;columnsPerPage&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;3&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;contentLocale&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;en&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;linesPerPage&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;15&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;backgroundSessionLogging&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;1970-01-01 00:00:00&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;format&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;HTML&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;displayMode&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;list&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;skin&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;corporate&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;isToolbarDocked&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;productLocale&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;en&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;showWelcomePage&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;timeZoneID&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;America/New_York&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
		&lt;userPreferenceVars xsi:type="ns1:userPreferenceVar"&gt;
			&lt;name xsi:type="xsd:string"&gt;showOptionSummary&lt;/name&gt;
			&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;
		&lt;/userPreferenceVars&gt;
	&lt;/userPreferenceVars&gt;
      &lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;
        &lt;item xsi:type="bus:dispatcherTransportVar"&gt;
          &lt;name xsi:type="xsd:string"&gt;html&lt;/name&gt;
          &lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;
        &lt;/item&gt;
      &lt;/bus:dispatcherTransportVars&gt;
    &lt;/bus:biBusHeader&gt;
  &lt;/SOAP-ENV:Header&gt;
  &lt;SOAP-ENV:Body&gt;
	&lt;ns2:run SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:ns2="http://developer.cognos.com/schemas/monitorService/1"&gt;
	  &lt;objectPath xsi:type="bus:searchPathSingleObject"&gt;/adminFolder/importDeployment[@name='${deployment_name}']&lt;/objectPath&gt;
	  &lt;parameterValues SOAP-ENC:arrayType="bus:parameterValue[0]" xsi:type="SOAP-ENC:Array"/&gt;
	  &lt;options SOAP-ENC:arrayType="bus:option[1]" xsi:type="SOAP-ENC:Array"&gt;
	    &lt;options xsi:type="bus:deploymentOptionClassEnumArray"&gt;
	      &lt;name xsi:type="bus:deploymentOptionEnum"&gt;upgradeClasses&lt;/name&gt;
	      &lt;value SOAP-ENC:arrayType="bus:classEnum[2]" xsi:type="SOAP-ENC:Array"&gt;
	        &lt;value xsi:type="bus:classEnum"&gt;report&lt;/value&gt;
	        &lt;value xsi:type="bus:classEnum"&gt;query&lt;/value&gt;
	      &lt;/value&gt;
	    &lt;/options&gt;
	  &lt;/options&gt;
	&lt;/ns2:run&gt;
  &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/api/soap</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="SOAPAction">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">${soapAction}.session</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = "&lt;bus:tracking ";
trackingEndTag = "&lt;/bus:tracking&gt;";
response = prev.getResponseDataAsString()
trackingInnerContent = ContentUtil.getOptional(response, trackingStartTag, trackingEndTag);
log.debug("tracking is: " + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put("busTracking", trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, "&lt;bus:status ", "&lt;/bus:status&gt;");
if (status != null) {
	status = status.substring(status.indexOf("&gt;") + 1)
} else {
	status = ContentUtil.getOptional(response, "&lt;status ", "&lt;/status&gt;");
	status = status.substring(status.indexOf("&gt;") + 1)
}

vars.put("conversationStatus", status);
log.info("conversationStatus: " + vars.get("conversationStatus"))</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">log.debug("conversationStatus: " + vars.get("conversationStatus"));
if (vars.get("conversationStatus") != null) {
	if (!vars.get("conversationStatus").equals("conversationComplete")) {
		log.debug("release: " + vars.get("report_busTracking"));
		vars.put("release", "true");
	}
	if (vars.get("conversationStatus").equals("conversationComplete")) {
		vars.remove("release");
		vars.put("sendAsync", "false");
	}
	if (vars.get("conversationStatus").equals("complete")) {
		vars.put("sendAsync", "false");
	}
	if (vars.get("conversationStatus").equals("complete") &amp;&amp; (prev.getResponseDataAsString().contains("&lt;SOAP-ENV:Fault&gt;"))){
		if (vars.get("release") != null) {
			vars.remove("release");
			vars.put("sendAsync", "false");
		}
	}

	//log.info("busTracking: " + vars.get("report_busTracking"));
}
log.debug("sendAsync = " + vars.get("sendAsync"));
vars.put("response", prev.getResponseDataAsString());//getSamplerData());</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <XPathExtractor enabled="true" guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="get entireHeader">
                <stringProp name="XPathExtractor.default" />
                <stringProp name="XPathExtractor.refname">entireHeader</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//bus:biBusHeader</stringProp>
                <boolProp name="XPathExtractor.fragment">true</boolProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">true</boolProp>
              </XPathExtractor>
              <hashTree />
              <XPathExtractor enabled="true" guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="get asyncDetails">
                <stringProp name="XPathExtractor.default" />
                <stringProp name="XPathExtractor.refname">asyncDetails</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//details</stringProp>
                <boolProp name="XPathExtractor.fragment">true</boolProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">true</boolProp>
              </XPathExtractor>
              <hashTree />
              <XPathExtractor enabled="true" guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="get eventID">
                <stringProp name="XPathExtractor.default" />
                <stringProp name="XPathExtractor.refname">eventID</stringProp>
                <stringProp name="XPathExtractor.matchNumber">1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//eventID</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">true</boolProp>
              </XPathExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="prepare for activities loop">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("currentActivitiesHasEventID", "true");</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="While currentActivitiesHasEventID">
              <stringProp name="WhileController.condition">${__groovy("${currentActivitiesHasEventID}"=="true")}</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="current activities">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{"type":"current","filters":{},"pageSize":2000,"sort":{"order":"ascending","sortItem":"startTime"}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/activities</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get eventStatus">
                  <stringProp name="JSONPostProcessor.referenceNames">eventStatus</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.activities[?(@.eventID=="${eventID}")].status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">EVENT_STATUS_NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="continue?">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">EVENT_STATUS_NOT_FOUND = "EVENT_STATUS_NOT_FOUND"
currentActivitiesHasEventID = "false";
eventStatus = vars.get("eventStatus");
if (EVENT_STATUS_NOT_FOUND.equals(eventStatus)) {
	currentActivitiesHasEventID = "false";
} else {
	currentActivitiesHasEventID = "true";
}
vars.put("currentActivitiesHasEventID", currentActivitiesHasEventID);
</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait before checking again">
                  <stringProp name="ConstantTimer.delay">60000</stringProp>
                </ConstantTimer>
                <hashTree />
              </hashTree>
            </hashTree>
            <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait before final check">
              <stringProp name="ConstantTimer.delay">60000</stringProp>
            </ConstantTimer>
            <hashTree />
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="past activities">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"type":"past","filters":{"startTime":"${startTime}","endTime":"${endTime}"},"pageSize":2000}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/activities</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set start and end time">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.time.*;
import java.time.format.DateTimeFormatter;

ZonedDateTime t = ZonedDateTime.now();

vars.put("endTime", t.plusDays(1).format(DateTimeFormatter.ISO_INSTANT))
vars.put("startTime", t.minusDays(1).format(DateTimeFormatter.ISO_INSTANT))</stringProp>
              </JSR223PreProcessor>
              <hashTree />
              <JSONPathAssertion enabled="true" guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="succeeded?">
                <stringProp name="JSON_PATH">$.activities[?(@.defaultName=="${deployment_name}")].status</stringProp>
                <stringProp name="EXPECTED_VALUE">succeeded</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If job">
              <stringProp name="IfController.condition">${__groovy("${type}"=="job")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set jobItem">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("jobItem", vars.get("item"))</stringProp>
              </JSR223Sampler>
              <hashTree />
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include scheduling-service/runJob.jmx">
                </GenericController>
              <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get jobItem">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${jobItem}</stringProp>
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">return args[0]</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get job_name">
            <stringProp name="JSONPostProcessor.referenceNames">job_name</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers" />
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get job_id from navigation_response variable">
            <stringProp name="JSONPostProcessor.referenceNames">job_id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${job_name}")].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">navigation_response</stringProp>
          </JSONPostProcessor>
          <hashTree />
        </hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="run_job_${job_name}">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="run job">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports/${job_id}/executions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get location">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">location</stringProp>
              <stringProp name="RegexExtractor.regex">Location: (.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/vnd.ibm.bi.platform.execution+json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset statusComplete">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put("statusComplete", "false")</stringProp>
          </JSR223Sampler>
          <hashTree />
          <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller">
            <stringProp name="WhileController.condition">${__groovy("${statusComplete}"=="false"  || "${statusComplete}"=="pending" || "${statusComplete}"=="working" || "${statusComplete}"=="executing"  || "${statusComplete}"=="waiting"  || "${statusComplete}"=="inactive"  || "${statusComplete}"=="succeeded")}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get status">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${location}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get status">
                <stringProp name="JSONPostProcessor.referenceNames">statusComplete</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.status</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
                <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="/ check if status not failed ">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1281977283">failed</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">20</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
              </ConstantTimer>
              <hashTree />
              <JSR223PostProcessor enabled="false" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ debug log status">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename" />
                <stringProp name="parameters">${statusComplete}</stringProp>
                <stringProp name="script">log.info("statusComplete= " + args[0])</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
          <ResponseAssertion enabled="false" guiclass="AssertionGui" testclass="ResponseAssertion" testname="/ check status is complete ${statusComplete}">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-599445191">complete</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">statusComplete</stringProp>
            <stringProp name="Assertion.custom_message" />
          </ResponseAssertion>
          <hashTree />
        </hashTree>
      </hashTree>
    </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If module">
              <stringProp name="IfController.condition">${__groovy("${type}"=="module")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include modules/launch.jmx">
                </GenericController>
              <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="launchModule" />
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get module details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("item");</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get module_name">
              <stringProp name="JSONPostProcessor.referenceNames">module_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get module_datacheck">
              <stringProp name="JSONPostProcessor.referenceNames">module_datacheck</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.datacheck</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get BASE_MOD_ID from navigation_response varilable">
              <stringProp name="JSONPostProcessor.referenceNames">BASE_MOD_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${module_name}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">navigation_response</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get module_baseontype">
              <stringProp name="JSONPostProcessor.referenceNames">baseontype</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.baseontype</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}launchModule_${module_name}">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If baseontype database">
              <stringProp name="IfController.condition">${__groovy("${baseontype}"=="database")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If first_open">
                <stringProp name="TestPlan.comments">The perspective request should only be called for the first opens</stringProp>
                <stringProp name="IfController.condition">${__groovy("${tr_prefix}"=="first_")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/perspectives/ca-modeller">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/ca-modeller</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="User-Agent">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-Requested-With">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains defaultAction">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="442813399">defaultAction</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules/">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="type[_name]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">module</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_name]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[_ordinal]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_ordinal]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[enumValue]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">module</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[enumValue]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="shortIdForExpression">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">shortIdForExpression</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="item">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">item</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${BASE_MOD_ID}/metadata</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="false" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get metadataModule">
                  <stringProp name="JSONPostProcessor.referenceNames">metadataModule</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains querySubject">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-424418492">querySubject</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get base_module_metadata">
                  <stringProp name="JSONPostProcessor.referenceNames">base_module_metadata</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="Scope.variable">metadataModule</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get querySubject">
                  <stringProp name="JSONPostProcessor.referenceNames">querySubject</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.querySubject[0]</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">base_module_metadata</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get storeID">
                  <stringProp name="JSONPostProcessor.referenceNames">BASE_MOD_STOREID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..storeID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">store_id</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules?location=~~&amp;session=true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${base_module_metadata}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/?location=~~&amp;session=true</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=modeller&amp;context=%7B%22perspective%22%3A%22modeller%22%2C%22content%22%3A%7B%22mid%22%3A%22i0B96FEC7BD5A46479430CC716B664EFA%22%2C%22_selectedModel%22%3A%5B%7B%22id%22%3A%22i4A3732027209474F9AE6220D0FF15FCF%22%2C%22sourceType%22%3A%22databases%22%2C%22label%22%3A%22EAPPS%22%2C%22title%22%3A%22EAPPS%22%2C%22description%22%3A%22Last%20modified%3A%203%2F31%2F2016%203%3A04%20PM%22%2C%22toolTip%22%3A%22EAPPS%22%2C%22image%22%3A%22images%2Fmodeller%2Fdatabases.svg%22%7D%5D%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get mod_sessionTemp_href">
                  <stringProp name="JSONPostProcessor.referenceNames">mod_sessionTemp_href</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.href</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get mod_sessionTemp_id">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mod_sessionTemp_id</stringProp>
                  <stringProp name="RegexExtractor.regex">\/modules\/(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number" />
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">mod_sessionTemp_href</stringProp>
                </RegexExtractor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/base_modules/">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="type[_name]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">database</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_name]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[_ordinal]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">4</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_ordinal]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[enumValue]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">database</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[enumValue]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="shortIdForExpression">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">shortIdForExpression</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="item">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">item</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/base_modules/${BASE_MOD_STOREID}/metadata</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="false" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get metadataModule">
                  <stringProp name="JSONPostProcessor.referenceNames">metadataModule</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains querySubject">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-424418492">querySubject</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules/feedback">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${mod_sessionTemp_id}/feedback?moduleUrl=</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains feedback">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-191501435">feedback</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="build querySpec">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">querySubject_items = vars.get("querySubject")
def jsonSlurper = new groovy.json.JsonSlurper()
def querySubjectObj = jsonSlurper.parseText(querySubject_items)
def querySubjectItems = querySubjectObj.item
def querySubject_ref = querySubjectObj.identifier

def builder = new groovy.json.JsonBuilder()
def root = builder {
    limit 100
    offset 0
    type 'detail'
}
root.dataItems = []
root.projections = []
i = 0
for(queryItemObj in querySubjectItems) {
    def dataItemBuilder = new groovy.json.JsonBuilder()
    root.dataItems[i] = dataItemBuilder {
                            id ''+i
                            itemId querySubject_ref+'.'+queryItemObj.queryItem.identifier
                        }
    root.projections.add("" + i)
    i = i + 1
}
//assert root instanceof Map
if (!root instanceof Map) {
	SamplerResult.setResponseMessage("modelRef is " + modelRef);
	SamplerResult.setSuccessful(false);
}

querySpec = builder.toString()
vars.put("querySpec", querySpec)</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get query spec">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="type">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">module</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="refreshmd">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">refreshmd</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="qfb">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">none</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">qfb</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="moduleUrl">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value" />
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">moduleUrl</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="querySpec">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${querySpec}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">querySpec</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/datasets/${mod_sessionTemp_id}/data</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains ${module_datacheck}">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="682220635">${module_datacheck}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If baseontype package">
              <stringProp name="IfController.condition">${__groovy("${baseontype}"=="package")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If first_open">
                <stringProp name="TestPlan.comments">The perspective request should only be called for the first opens</stringProp>
                <stringProp name="IfController.condition">${__groovy("${tr_prefix}"=="first_")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/perspectives/ca-modeller">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/ca-modeller</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="User-Agent">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-Requested-With">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains defaultAction">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="442813399">defaultAction</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules/">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="type[_name]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">module</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_name]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[_ordinal]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_ordinal]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[enumValue]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">module</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[enumValue]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="shortIdForExpression">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">shortIdForExpression</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="item">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">item</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${BASE_MOD_ID}/metadata</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="false" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get metadataModule">
                  <stringProp name="JSONPostProcessor.referenceNames">metadataModule</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains querySubject">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-424418492">querySubject</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get base_module_metadata">
                  <stringProp name="JSONPostProcessor.referenceNames">base_module_metadata</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="Scope.variable">metadataModule</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get querySubject">
                  <stringProp name="JSONPostProcessor.referenceNames">querySubject</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.querySubject[0]</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">base_module_metadata</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get storeID">
                  <stringProp name="JSONPostProcessor.referenceNames">BASE_MOD_STOREID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..storeID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">store_id</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules?location=~~&amp;session=true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${base_module_metadata}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/?location=~~&amp;session=true</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=modeller&amp;context=%7B%22perspective%22%3A%22modeller%22%2C%22content%22%3A%7B%22mid%22%3A%22i0B96FEC7BD5A46479430CC716B664EFA%22%2C%22_selectedModel%22%3A%5B%7B%22id%22%3A%22i4A3732027209474F9AE6220D0FF15FCF%22%2C%22sourceType%22%3A%22databases%22%2C%22label%22%3A%22EAPPS%22%2C%22title%22%3A%22EAPPS%22%2C%22description%22%3A%22Last%20modified%3A%203%2F31%2F2016%203%3A04%20PM%22%2C%22toolTip%22%3A%22EAPPS%22%2C%22image%22%3A%22images%2Fmodeller%2Fdatabases.svg%22%7D%5D%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get mod_sessionTemp_href">
                  <stringProp name="JSONPostProcessor.referenceNames">mod_sessionTemp_href</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.href</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get mod_sessionTemp_id">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mod_sessionTemp_id</stringProp>
                  <stringProp name="RegexExtractor.regex">\/modules\/(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number" />
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">mod_sessionTemp_href</stringProp>
                </RegexExtractor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules/">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="type[_name]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">package</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_name]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[_ordinal]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">4</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_ordinal]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[enumValue]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">package</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[enumValue]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="shortIdForExpression">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">shortIdForExpression</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="item">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">item</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${BASE_MOD_ID}/metadata</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains querySubject">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-424418492">querySubject</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules/feedback">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${mod_sessionTemp_id}/feedback?moduleUrl=</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains feedback">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-191501435">feedback</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="build querySpec">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">querySubject_items = vars.get("querySubject")
def jsonSlurper = new groovy.json.JsonSlurper()
def querySubjectObj = jsonSlurper.parseText(querySubject_items)
def querySubjectItems = querySubjectObj.item
def querySubject_ref = querySubjectObj.identifier

def builder = new groovy.json.JsonBuilder()
def root = builder {
    limit 100
    offset 0
    type 'detail'
}
root.dataItems = []
root.projections = []
i = 0
for(queryItemObj in querySubjectItems) {
    def dataItemBuilder = new groovy.json.JsonBuilder()
    root.dataItems[i] = dataItemBuilder {
                            id ''+i
                            itemId querySubject_ref+'.'+queryItemObj.queryItem.identifier
                        }
    root.projections.add("" + i)
    i = i + 1
}
//assert root instanceof Map
if (!root instanceof Map) {
	SamplerResult.setResponseMessage("modelRef is " + modelRef);
	SamplerResult.setSuccessful(false);
}

querySpec = builder.toString()
vars.put("querySpec", querySpec)</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get query spec">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="type">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">module</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="refreshmd">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">refreshmd</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="qfb">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">none</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">qfb</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="moduleUrl">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value" />
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">moduleUrl</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="querySpec">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${querySpec}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">querySpec</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/datasets/${mod_sessionTemp_id}/data</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains ${module_datacheck}">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="682220635">${module_datacheck}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers" />
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If baseontype dataset">
              <stringProp name="IfController.condition">${__groovy("${baseontype}"=="dataset")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If first_open">
                <stringProp name="TestPlan.comments">The perspective request should only be called for the first opens</stringProp>
                <stringProp name="IfController.condition">${__groovy("${tr_prefix}"=="first_")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/perspectives/ca-modeller">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/ca-modeller</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="User-Agent">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-Requested-With">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains defaultAction">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="442813399">defaultAction</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules/">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="type[_name]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">module</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_name]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[_ordinal]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_ordinal]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[enumValue]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">module</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[enumValue]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="shortIdForExpression">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">shortIdForExpression</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="item">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">item</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${BASE_MOD_ID}/metadata</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="false" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get metadataModule">
                  <stringProp name="JSONPostProcessor.referenceNames">metadataModule</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains querySubject">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-424418492">querySubject</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get base_module_metadata">
                  <stringProp name="JSONPostProcessor.referenceNames">base_module_metadata</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="Scope.variable">metadataModule</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get querySubject">
                  <stringProp name="JSONPostProcessor.referenceNames">querySubject</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.querySubject[0]</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">base_module_metadata</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get storeID">
                  <stringProp name="JSONPostProcessor.referenceNames">BASE_MOD_STOREID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..storeID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">store_id</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules?location=~~&amp;session=true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${base_module_metadata}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/?location=~~&amp;session=true</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=modeller&amp;context=%7B%22perspective%22%3A%22modeller%22%2C%22content%22%3A%7B%22mid%22%3A%22i0B96FEC7BD5A46479430CC716B664EFA%22%2C%22_selectedModel%22%3A%5B%7B%22id%22%3A%22i4A3732027209474F9AE6220D0FF15FCF%22%2C%22sourceType%22%3A%22databases%22%2C%22label%22%3A%22EAPPS%22%2C%22title%22%3A%22EAPPS%22%2C%22description%22%3A%22Last%20modified%3A%203%2F31%2F2016%203%3A04%20PM%22%2C%22toolTip%22%3A%22EAPPS%22%2C%22image%22%3A%22images%2Fmodeller%2Fdatabases.svg%22%7D%5D%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get mod_sessionTemp_href">
                  <stringProp name="JSONPostProcessor.referenceNames">mod_sessionTemp_href</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.href</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get mod_sessionTemp_id">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mod_sessionTemp_id</stringProp>
                  <stringProp name="RegexExtractor.regex">\/modules\/(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number" />
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">mod_sessionTemp_href</stringProp>
                </RegexExtractor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/base_modules/">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="type[_name]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">dataset</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_name]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[_ordinal]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">3</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_ordinal]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[enumValue]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">dataset</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[enumValue]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="shortIdForExpression">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">shortIdForExpression</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="item">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">item</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/base_modules/${BASE_MOD_STOREID}/metadata</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="false" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get metadataModule">
                  <stringProp name="JSONPostProcessor.referenceNames">metadataModule</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains querySubject">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-424418492">querySubject</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules/feedback">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${mod_sessionTemp_id}/feedback?moduleUrl=</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains feedback">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-191501435">feedback</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="build querySpec">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">querySubject_items = vars.get("querySubject")
def jsonSlurper = new groovy.json.JsonSlurper()
def querySubjectObj = jsonSlurper.parseText(querySubject_items)
def querySubjectItems = querySubjectObj.item
def querySubject_ref = querySubjectObj.identifier

def builder = new groovy.json.JsonBuilder()
def root = builder {
    limit 100
    offset 0
    type 'detail'
}
root.dataItems = []
root.projections = []
i = 0
for(queryItemObj in querySubjectItems) {
    def dataItemBuilder = new groovy.json.JsonBuilder()
    root.dataItems[i] = dataItemBuilder {
                            id ''+i
                            itemId querySubject_ref+'.'+queryItemObj.queryItem.identifier
                        }
    root.projections.add("" + i)
    i = i + 1
}
//assert root instanceof Map
if (!root instanceof Map) {
	SamplerResult.setResponseMessage("modelRef is " + modelRef);
	SamplerResult.setSuccessful(false);
}

querySpec = builder.toString()
vars.put("querySpec", querySpec)</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get query spec">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="type">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">module</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="refreshmd">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">refreshmd</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="qfb">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">none</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">qfb</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="moduleUrl">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value" />
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">moduleUrl</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="querySpec">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${querySpec}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">querySpec</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/datasets/${mod_sessionTemp_id}/data</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains ${module_datacheck}">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="682220635">${module_datacheck}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers" />
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If baseontype file">
              <stringProp name="IfController.condition">${__groovy("${baseontype}"=="file")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If first_open">
                <stringProp name="TestPlan.comments">The perspective request should only be called for the first opens</stringProp>
                <stringProp name="IfController.condition">${__groovy("${tr_prefix}"=="first_")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/perspectives/ca-modeller">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/ca-modeller</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="User-Agent">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-Requested-With">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains defaultAction">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="442813399">defaultAction</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message" />
                  </ResponseAssertion>
                  <hashTree />
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules/">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="type[_name]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">module</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_name]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[_ordinal]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_ordinal]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[enumValue]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">module</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[enumValue]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="shortIdForExpression">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">shortIdForExpression</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="item">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">item</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${BASE_MOD_ID}/metadata</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains querySubject">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-424418492">querySubject</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get base_module_metadata">
                  <stringProp name="JSONPostProcessor.referenceNames">base_module_metadata</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="Scope.variable">metadataModule</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get querySubject">
                  <stringProp name="JSONPostProcessor.referenceNames">querySubject</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.querySubject[0]</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">base_module_metadata</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get storeID">
                  <stringProp name="JSONPostProcessor.referenceNames">BASE_MOD_STOREID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..storeID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">store_id</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules?location=~~&amp;session=true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${base_module_metadata}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/?location=~~&amp;session=true</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=modeller&amp;context=%7B%22perspective%22%3A%22modeller%22%2C%22content%22%3A%7B%22mid%22%3A%22i0B96FEC7BD5A46479430CC716B664EFA%22%2C%22_selectedModel%22%3A%5B%7B%22id%22%3A%22i4A3732027209474F9AE6220D0FF15FCF%22%2C%22sourceType%22%3A%22databases%22%2C%22label%22%3A%22EAPPS%22%2C%22title%22%3A%22EAPPS%22%2C%22description%22%3A%22Last%20modified%3A%203%2F31%2F2016%203%3A04%20PM%22%2C%22toolTip%22%3A%22EAPPS%22%2C%22image%22%3A%22images%2Fmodeller%2Fdatabases.svg%22%7D%5D%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get mod_sessionTemp_href">
                  <stringProp name="JSONPostProcessor.referenceNames">mod_sessionTemp_href</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.href</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get mod_sessionTemp_id">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mod_sessionTemp_id</stringProp>
                  <stringProp name="RegexExtractor.regex">\/modules\/(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number" />
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">mod_sessionTemp_href</stringProp>
                </RegexExtractor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/base_modules/">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="type[_name]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">file</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_name]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[_ordinal]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[_ordinal]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="type[enumValue]">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">file</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type[enumValue]</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="shortIdForExpression">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">shortIdForExpression</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="item">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">item</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/base_modules/${BASE_MOD_STOREID}/metadata</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains querySubject">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-424418492">querySubject</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules/feedback">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${mod_sessionTemp_id}/feedback?moduleUrl=</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains feedback">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-191501435">feedback</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="build querySpec">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">querySubject_items = vars.get("querySubject")
def jsonSlurper = new groovy.json.JsonSlurper()
def querySubjectObj = jsonSlurper.parseText(querySubject_items)
def querySubjectItems = querySubjectObj.item
def querySubject_ref = querySubjectObj.identifier

def builder = new groovy.json.JsonBuilder()
def root = builder {
    limit 100
    offset 0
    type 'detail'
}
root.dataItems = []
root.projections = []
i = 0
for(queryItemObj in querySubjectItems) {
    def dataItemBuilder = new groovy.json.JsonBuilder()
    root.dataItems[i] = dataItemBuilder {
                            id ''+i
                            itemId querySubject_ref+'.'+queryItemObj.queryItem.identifier
                        }
    root.projections.add("" + i)
    i = i + 1
}
//assert root instanceof Map
if (!root instanceof Map) {
	SamplerResult.setResponseMessage("modelRef is " + modelRef);
	SamplerResult.setSuccessful(false);
}

querySpec = builder.toString()
vars.put("querySpec", querySpec)</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get query spec">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="type">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">module</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="refreshmd">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">refreshmd</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="qfb">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">none</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">qfb</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="moduleUrl">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value" />
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">moduleUrl</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="querySpec">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${querySpec}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">querySpec</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/datasets/${mod_sessionTemp_id}/data</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains ${module_datacheck}">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="682220635">${module_datacheck}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If explore">
              <stringProp name="IfController.condition">${__groovy( "${type}"=="explore" )}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get explore details">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get("item");</stringProp>
              </JSR223Sampler>
              <hashTree>
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get explore_name">
                  <stringProp name="JSONPostProcessor.referenceNames">explore_name</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get explore_datachecks">
                  <stringProp name="JSONPostProcessor.referenceNames">explore_datachecks</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.datacheck[*]</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get explore_id from navigation_response variable">
                  <stringProp name="JSONPostProcessor.referenceNames">explore_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${explore_name}")]..id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">navigation_response</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get explore_type from navigation_response variable">
                  <stringProp name="JSONPostProcessor.referenceNames">explore_type</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${explore_name}")]..type</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">navigation_response</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get explore_action">
                  <stringProp name="JSONPostProcessor.referenceNames">explore_action</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.action</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get explore_editmode">
                  <stringProp name="JSONPostProcessor.referenceNames">explore_editmode</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.editmode</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ include explore/launch.jmx">
                </GenericController>
              <hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If open_source explore">
          <stringProp name="IfController.condition">${__groovy("${explore_action}"=="open_source")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}openSource_explore_${explore_name}">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/perspectives/createBoard">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/createBoard</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value" />
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="false" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/perspectives/explore-loader">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/explore-loader</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
              <stringProp name="TestPlan.comments">disabled for CA 11.1.3 testing. Needed for CA 11.1.2 and CA 11.1.1.</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value" />
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If first_open">
              <stringProp name="TestPlan.comments">The perspective request should only be called for the first opens</stringProp>
              <stringProp name="IfController.condition">${__groovy("${tr_prefix}"=="first_")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/perspectives/explore">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/explore</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value" />
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules/taxonomy">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/taxonomy</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains family">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1281860764">family</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post metadata/module call">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"version":"6.0","container":"C","useSpec":[{"identifier":"ES","type":"${explore_useSpecType}","storeID":"${explore_id}","imports":"*"}],"expressionLocale":"en-us","dataRetrievalMode":"liveConnection","identifier":"C_${explore_stripName}","label":"${explore_name}"}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/?location=~~&amp;session=true</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set explore_useSpecType">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${explore_type}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">explore_useSpecType = args[0]
if ("uploadedFile".equals(explore_useSpecType)) {
	explore_useSpecType = "file"
}
vars.put("explore_useSpecType", explore_useSpecType)
</stringProp>
              </JSR223PreProcessor>
              <hashTree />
              <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set explore_stripName">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">explore_stripName = vars.get("explore_name")
explore_stripName = explore_stripName.replaceAll("\\s","_")
explore_stripName = explore_stripName.replaceAll("\\.","_")
vars.put("explore_stripName", explore_stripName)
</stringProp>
              </JSR223PreProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get explore_assetHref">
                <stringProp name="JSONPostProcessor.referenceNames">explore_assetHref</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.href</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get explore_tempDatasetId">
                <stringProp name="JSONPostProcessor.referenceNames">explore_tempDatasetId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
              </JSONPostProcessor>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get /bi/v1/objects/explore_id?fields=">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                    <stringProp name="Argument.value">userInterfaces,defaultName,searchPath</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${explore_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value" />
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get metadata/modules">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${explore_tempDatasetId}/metadata?shortIdForExpression=true&amp;item=on&amp;type=module</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="save explore_metadata_response">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">explore_temp = prev.getResponseDataAsString()
explore_temp = explore_temp.replaceAll("\\\\","\\\\\\\\")
explore_temp = explore_temp.replaceAll("\"","\\\\\"")
vars.put("explore_metadata_response", explore_temp);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get metadata/modules feedback">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${explore_tempDatasetId}/feedback</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="validation issue ?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2026515471">Total number of errors: 0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="severity error ?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="502282277">"severity":"error"</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="storeID">
                <stringProp name="TestPlan.comments">capture the storeID</stringProp>
                <stringProp name="JSONPostProcessor.referenceNames">storeID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..storeID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="false" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get smarts insights">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="moduleId">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${storeID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">moduleId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/insights/autosuggest/fields?</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
              <stringProp name="TestPlan.comments">GET /ibmcognos/bi/v1/smarts/insights/autosuggest/fields?moduleId=iD1F76A3CD09244F98CE5EE085EB116FC</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion enabled="false" guiclass="AssertionGui" testclass="ResponseAssertion" testname="smarts sentence help ?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1859970039">How can I</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <HeaderManager enabled="false" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=explore</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post smarts/conversation/sentence">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"sentence":"hello","context":{},"userContext":{"defaultName":"${username}","displayName":"${username}","email":null},"appContext":{"mode":"explore","title":"New exploration","isHomepage":false,"id":null,"content":{"isAuthoringMode":true,"module":"explore/view"},"sources":[{"id":"${explore_id}","label":"${explore_name}","type":"${explore_type}"}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/sentence</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="smarts sentence help ?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1859970039">How can I</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post smarts/conversation/continue">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"context":{"dialog":{"executed_state":"utter_ask_howcanhelp","main_intent":"greet"},"restart":true,"module":null,"name":null,"last_action":"utter_ask_howcanhelp","type":null},"userContext":{"defaultName":"${username}","displayName":"${username}","email":null},"appContext":{"mode":"explore","title":"New exploration","isHomepage":false,"id":null,"content":{"isAuthoringMode":true,"module":"explore/view"},"sources":[{"id":"${explore_id}","label":"${explore_name}","type":"${explore_type}"}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/continue</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="smarts continue listen ?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-560180818">"id":"listen"</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post smarts/insights/interesting-fields">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"moduleId":"${explore_id}","sourceType":"${explore_type}","tempModule":"${explore_metadata_response}"}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/insights/interesting-fields</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-20 ?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-937819140">"message":"completed"</stringProp>
                  <stringProp name="-1331841902">"statusCode":"Smarts-IFR-20"</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-48 ?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1331839732">"statusCode":"Smarts-IFR-48"</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get explore_fieldIDForExpression">
                <stringProp name="JSONPostProcessor.referenceNames">explore_fieldIDForExpression</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..recommendation..fieldIDForExpression</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="right number of buttons?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1596180293">${explore_datachecks_matchNr}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">explore_fieldIDForExpression_matchNr</stringProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Initialize counter explore_fieldCount">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("explore_fieldCount", "0");
</stringProp>
            </JSR223Sampler>
            <hashTree />
            <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for all smarts interestingfields">
              <stringProp name="ForeachController.inputVal">explore_fieldIDForExpression</stringProp>
              <stringProp name="ForeachController.returnVal">cur_explore_fieldIDForExpression</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ explore_fieldCount">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">explore_fieldCount = Integer.valueOf(vars.get("explore_fieldCount"));
explore_fieldCount = explore_fieldCount + 1;
vars.put("explore_fieldCount", String.valueOf(explore_fieldCount));</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post smarts/explore/relationship">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{"sourceModuleId":"${explore_id}","sourceType":"${explore_type}","targetFieldIDForExpression":"${cur_explore_fieldIDForExpression}","maxInfluencerFields":10,"showConcepts":false,"includeSmartsExploreSpec":false,"shapedModule":false,"tempModule":"${explore_metadata_response}"}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/explore/relationship?groupingNodes=false&amp;lowestConcept=true</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="SUCCESS ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-122441638">"state":"SUCCESS"</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-20 ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-937819140">"message":"completed"</stringProp>
                    <stringProp name="-1331841902">"statusCode":"Smarts-IFR-20"</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-47 ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1331839763">"statusCode":"Smarts-IFR-47"</stringProp>
                    <stringProp name="-229560911">"message":"Invalid Request JSON input"</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="datacheck in explore_fieldIDForExpression_ALL ?">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">explore_dataCheckTemp = vars.get("explore_datachecks" + "_" + vars.get("explore_fieldCount"));
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\s","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\.","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("__","_");
vars.put("explore_dataCheckTemp", explore_dataCheckTemp)

log.debug(" counter: " + vars.get("explore_fieldCount") + " datacheck details: " + vars.get("explore_dataCheckTemp") + " vs. fieldIDForExpression_ALL details: " + vars.get("explore_fieldIDForExpression" + "_ALL") );

//this assertion will not catch issues where datachecks/buttons have the same name or substring
if (!(vars.get("explore_fieldIDForExpression" + "_ALL").contains(vars.get("explore_dataCheckTemp")))) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(" counter: " + vars.get("explore_fieldCount") + " datacheck details: " + vars.get("explore_dataCheckTemp") + " vs. fieldIDForExpression_ALL details: " + vars.get("explore_fieldIDForExpression" + "_ALL") );
}
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree />
                <JSR223Assertion enabled="false" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="unique datacheck passed ?">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">explore_dataCheckTemp = vars.get("explore_datachecks" + "_" + vars.get("explore_fieldCount"));
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\s","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\.","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("__","_");
vars.put("explore_dataCheckTemp", explore_dataCheckTemp)

log.debug("datacheck details: " + vars.get("explore_dataCheckTemp") + " counter: " + vars.get("explore_fieldCount"));

//if statement is dependent on the datacheck order matching the button order
if (!(vars.get("explore_fieldIDForExpression" + "_" + vars.get("explore_fieldCount")).contains(vars.get("explore_dataCheckTemp")))) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(" counter: " + vars.get("explore_fieldCount") + " datacheck details: " + vars.get("explore_dataCheckTemp") + " vs. button details: " + vars.get("explore_fieldIDForExpression" + "_" + vars.get("explore_fieldCount")) );
}
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="false" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post smarts/explore/relationship">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{"sourceModuleId":"${explore_id}","sourceType":"${explore_type}","targetFieldIDForExpression":"${cur_explore_fieldIDForExpression}","maxInfluencerFields":10,"showConcepts":true,"tempModule":"${explore_metadata_response}"}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/explore/relationship?groupingNodes=true&amp;lowestConcept=true&amp;maxInfluencerFields=9</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="SUCCESS ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-122441638">"state":"SUCCESS"</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-20 ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-937819140">"message":"completed"</stringProp>
                    <stringProp name="-1331841902">"statusCode":"Smarts-IFR-20"</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-47 ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1331839763">"statusCode":"Smarts-IFR-47"</stringProp>
                    <stringProp name="-229560911">"message":"Invalid Request JSON input"</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="datacheck in explore_fieldIDForExpression_ALL ?">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">explore_dataCheckTemp = vars.get("explore_datachecks" + "_" + vars.get("explore_fieldCount"));
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\s","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\.","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("__","_");
vars.put("explore_dataCheckTemp", explore_dataCheckTemp)

log.debug(" counter: " + vars.get("explore_fieldCount") + " datacheck details: " + vars.get("explore_dataCheckTemp") + " vs. fieldIDForExpression_ALL details: " + vars.get("explore_fieldIDForExpression" + "_ALL") );

//this assertion will not catch issues where datachecks/buttons have the same name or substring
if (!(vars.get("explore_fieldIDForExpression" + "_ALL").contains(vars.get("explore_dataCheckTemp")))) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(" counter: " + vars.get("explore_fieldCount") + " datacheck details: " + vars.get("explore_dataCheckTemp") + " vs. fieldIDForExpression_ALL details: " + vars.get("explore_fieldIDForExpression" + "_ALL") );
}
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree />
                <JSR223Assertion enabled="false" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="unique datacheck passed ?">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">explore_dataCheckTemp = vars.get("explore_datachecks" + "_" + vars.get("explore_fieldCount"));
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\s","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\.","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("__","_");
vars.put("explore_dataCheckTemp", explore_dataCheckTemp)

log.debug("datacheck details: " + vars.get("explore_dataCheckTemp") + " counter: " + vars.get("explore_fieldCount"));

//if statement is dependent on the datacheck order matching the button order
if (!(vars.get("explore_fieldIDForExpression" + "_" + vars.get("explore_fieldCount")).contains(vars.get("explore_dataCheckTemp")))) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(" counter: " + vars.get("explore_fieldCount") + " datacheck details: " + vars.get("explore_dataCheckTemp") + " vs. button details: " + vars.get("explore_fieldIDForExpression" + "_" + vars.get("explore_fieldCount")) );
}
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree />
              </hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="false" guiclass="AssertionGui" testclass="ResponseAssertion" testname="right number of executions?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1596180293">${explore_datachecks_matchNr}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">explore_fieldCount</stringProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete temp session">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${explore_tempDatasetId}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="correct number of executions?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1596180293">${explore_datachecks_matchNr}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">explore_fieldCount</stringProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="204 or 200?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1443490196">204|200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController enabled="false" guiclass="IfControllerPanel" testclass="IfController" testname="If open_existing explore">
          <stringProp name="IfController.condition">${__groovy("${explore_action}"=="open_exisiting")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}openExisting_explore_${explore_name}">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/perspectives/explore">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/explore</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value" />
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules/taxonomy">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/taxonomy</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="contains family">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1281860764">family</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post metadata/module call">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"version":"6.0","container":"C","useSpec":[{"identifier":"ES","type":"${explore_useSpecType}","storeID":"${explore_id}","imports":"*"}],"expressionLocale":"en-us","dataRetrievalMode":"liveConnection","identifier":"C_${explore_stripSourceName}","label":"${explore_sourceName}"}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/?location=~~&amp;session=true</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set explore_useSpecType   NEEDS FIXING">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${explore_type}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">explore_useSpecType = args[0]
//if ("uploadedFile".equals(explore_useSpecType)) {
if ("exploration".equals(explore_useSpecType)) {
	explore_useSpecType = "file"
}
vars.put("explore_useSpecType", explore_useSpecType)
vars.put("explore_type", "uploadedFile")
</stringProp>
              </JSR223PreProcessor>
              <hashTree />
              <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set explore_stripSourceName">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">explore_stripSourceName = vars.get("explore_sourceName")
explore_stripSourceName = explore_stripSourceName.replaceAll("\\s","_")
explore_stripSourceName = explore_stripSourceName.replaceAll("\\.","_")
vars.put("explore_stripSourceName", explore_stripSourceName)
</stringProp>
              </JSR223PreProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get explore_assetHref">
                <stringProp name="JSONPostProcessor.referenceNames">explore_assetHref</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.href</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get explore_tempDatasetId">
                <stringProp name="JSONPostProcessor.referenceNames">explore_tempDatasetId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers" />
              </JSONPostProcessor>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get /bi/v1/objects/explore_id?fields=userInterfaces">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                    <stringProp name="Argument.value">userInterfaces,defaultName,searchPath</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${explore_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value" />
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get /bi/v1/objects/explore_id?fields=defaultName">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                    <stringProp name="Argument.value">defaultName%2Ctype%2Cancestors%2Cpermissions%2Cdisabled%2Chidden%2Cowner%2CdefaultScreenTip%2CiconURI%2Ctags</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${explore_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value" />
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get metadata/modules">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${explore_tempDatasetId}/metadata?shortIdForExpression=true&amp;item=on&amp;type=module</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value" />
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get explore_influencers">
                <stringProp name="JSONPostProcessor.referenceNames">explore_influencers</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..idForExpression</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="save explore_metadata_response">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">explore_temp = prev.getResponseDataAsString()
explore_temp = explore_temp.replaceAll("\"","\\\\\"")
vars.put("explore_metadata_response", explore_temp);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree />
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get metadata/modules feedback">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${explore_tempDatasetId}/feedback</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="validation issue ?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2026515471">Total number of errors: 0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="severity error ?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="502282277">"severity":"error"</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post smarts/conversation/sentence">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"sentence":"hello","context":{},"userContext":{"defaultName":"${username}","displayName":"${username}","email":null},"appContext":{"mode":"explore","title":"${explore_name}","isHomepage":false,"id":null,"content":{"boardId":"${explore_id}","isAuthoringMode":true,"module":"explore/view"},"sources":[{"id":"${explore_id}","label":"${explore_sourceName}","type":"${explore_type}","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/sentence</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="smarts sentence utter help ?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="188535985">"last_action":"utter_ask_howcanhelp"</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post smarts/conversation/continue">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"context":{"dialog":{"executed_state":"utter_ask_howcanhelp","main_intent":"greet"},"restart":true,"module":null,"name":null,"last_action":"utter_ask_howcanhelp","type":null},"userContext":{"defaultName":"${username}","displayName":"${username}","email":null},"appContext":{"mode":"explore","title":"${explore_name}","isHomepage":false,"id":null,"content":{"boardId":"${explore_id}","isAuthoringMode":true,"module":"explore/view"},"sources":[{"id":"${explore_id}","label":"${explore_sourceName}","type":"${explore_type}","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/continue</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="smarts continue main_intent message ?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="431858866">{"executed_state":"action_listen","main_intent":"greet"}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post smarts/insights/interesting-fields">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"moduleId":"${explore_id}","sourceType":"${explore_type}","tempModule":"${explore_metadata_response}"}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/insights/interesting-fields</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-20 ?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1025882624">{"statusCode":"Smarts-IFR-20","message":"completed"}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-48 ?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1331839732">"statusCode":"Smarts-IFR-48"</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get explore_fieldIDForExpression">
                <stringProp name="JSONPostProcessor.referenceNames">explore_fieldIDForExpression</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..recommendation..fieldIDForExpression</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="right number of buttons?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1596180293">${explore_datachecks_matchNr}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">explore_fieldIDForExpression_matchNr</stringProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Initialize counter explore_count">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("explore_count", "0");
</stringProp>
            </JSR223Sampler>
            <hashTree />
            <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for all smarts influencers">
              <stringProp name="ForeachController.inputVal">explore_influencers</stringProp>
              <stringProp name="ForeachController.returnVal">cur_explore_influencers</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">1</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ explore_count">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">explore_count = Integer.valueOf(vars.get("explore_count"));
explore_count = explore_count + 1;
vars.put("explore_count", String.valueOf(explore_count));</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post smarts/insights/influencers">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{"moduleId":"${explore_id}","targetFieldIDForExpression":"${cur_explore_influencers}","tuningParams":{"allowCategoryTarget":true,"noCorrelationLimit":true},"tempModule":"${explore_metadata_response}"}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/insights/influencers</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-20 ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-168793056">{"message":"completed","statusCode":"Smarts-IFR-20"}</stringProp>
                    <stringProp name="-122441638">"state":"SUCCESS"</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-47 ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="581135912">{"statusCode":"Smarts-IFR-47","message":"Invalid Request JSON input"}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <ForeachController enabled="false" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for all smarts interestingfields  RELATIONSHIP">
              <stringProp name="ForeachController.inputVal">explore_fieldIDForExpression</stringProp>
              <stringProp name="ForeachController.returnVal">cur_explore_fieldIDForExpression</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ explore_fieldCount">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">explore_fieldCount = Integer.valueOf(vars.get("explore_fieldCount"));
explore_fieldCount = explore_fieldCount + 1;
vars.put("explore_fieldCount", String.valueOf(explore_fieldCount));</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post smarts/explore/relationship">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{"sourceModuleId":"${explore_id}","sourceType":"${explore_type}","targetFieldIDForExpression":"${cur_explore_fieldIDForExpression}","maxInfluencerFields":10,"showConcepts":true,"tempModule":"${explore_metadata_response}"}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/explore/relationship?groupingNodes=true&amp;lowestConcept=true&amp;maxInfluencerFields=10</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-20 ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-168793056">{"message":"completed","statusCode":"Smarts-IFR-20"}</stringProp>
                    <stringProp name="-122441638">"state":"SUCCESS"</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-47 ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="581135912">{"statusCode":"Smarts-IFR-47","message":"Invalid Request JSON input"}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="datacheck passed ?">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">explore_dataCheckTemp = vars.get("explore_datachecks" + "_" + vars.get("explore_fieldCount"));
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\s","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\.","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("__","_");
vars.put("explore_dataCheckTemp", explore_dataCheckTemp)

log.debug("datacheck details: " + vars.get("explore_dataCheckTemp") + " counter: " + vars.get("explore_fieldCount"));

if (!(vars.get("explore_fieldIDForExpression" + "_" + vars.get("explore_fieldCount")).contains(vars.get("explore_dataCheckTemp")))) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(" counter: " + vars.get("explore_fieldCount") + " datacheck details: " + vars.get("explore_dataCheckTemp") + " vs. button details: " + vars.get("explore_fieldIDForExpression" + "_" + vars.get("explore_fieldCount")) );
}
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree />
              </hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <DebugSampler enabled="true" guiclass="TestBeanGUI" testclass="DebugSampler" testname="YO YO YO YO YO">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree />
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post predict/annotations/suggestions ---- NEED ANNOTATION RECORDINGS">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">
{"version":"0.0.1","data":[{"id":"data","dataItems":[{"id":"id1284719014","type":"categorical","itemId":"California_website_visits.City"},{"id":"id152464199","type":"continuous","itemId":"California_website_visits.Website_Visits","aggregate":"sum"}]}],"use":[{"name":"categories","role":"explanatory","type":"categorical","dataItems":["id1284719014"]},{"name":"size","role":"response","type":"continuous","dataItems":["id152464199"]}]}
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/predict/annotations/suggestions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="validation issue ?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1906647877">"type":"continuous"</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <ForeachController enabled="false" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for all smarts interestingfields     RECOMMENDER">
              <stringProp name="ForeachController.inputVal">explore_fieldIDForExpression</stringProp>
              <stringProp name="ForeachController.returnVal">cur_explore_fieldIDForExpression</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ explore_fieldCount">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">explore_fieldCount = Integer.valueOf(vars.get("explore_fieldCount"));
explore_fieldCount = explore_fieldCount + 1;
vars.put("explore_fieldCount", String.valueOf(explore_fieldCount));</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post smarts/explore/relationship">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{"sourceModuleId":"${explore_id}","sourceType":"${explore_type}","targetFieldIDForExpression":"${cur_explore_fieldIDForExpression}","maxInfluencerFields":10,"showConcepts":true,"tempModule":"${explore_metadata_response}"}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/explore/relationship?groupingNodes=true&amp;lowestConcept=true&amp;maxInfluencerFields=10</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-20 ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-168793056">{"message":"completed","statusCode":"Smarts-IFR-20"}</stringProp>
                    <stringProp name="-122441638">"state":"SUCCESS"</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-47 ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="581135912">{"statusCode":"Smarts-IFR-47","message":"Invalid Request JSON input"}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="datacheck passed ?">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">explore_dataCheckTemp = vars.get("explore_datachecks" + "_" + vars.get("explore_fieldCount"));
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\s","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\.","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("__","_");
vars.put("explore_dataCheckTemp", explore_dataCheckTemp)

log.debug("datacheck details: " + vars.get("explore_dataCheckTemp") + " counter: " + vars.get("explore_fieldCount"));

if (!(vars.get("explore_fieldIDForExpression" + "_" + vars.get("explore_fieldCount")).contains(vars.get("explore_dataCheckTemp")))) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(" counter: " + vars.get("explore_fieldCount") + " datacheck details: " + vars.get("explore_dataCheckTemp") + " vs. button details: " + vars.get("explore_fieldIDForExpression" + "_" + vars.get("explore_fieldCount")) );
}
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree />
              </hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <ForeachController enabled="false" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for all smarts interestingfields     ECHO">
              <stringProp name="ForeachController.inputVal">explore_fieldIDForExpression</stringProp>
              <stringProp name="ForeachController.returnVal">cur_explore_fieldIDForExpression</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ explore_fieldCount">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">explore_fieldCount = Integer.valueOf(vars.get("explore_fieldCount"));
explore_fieldCount = explore_fieldCount + 1;
vars.put("explore_fieldCount", String.valueOf(explore_fieldCount));</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post smarts/explore/relationship">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{"sourceModuleId":"${explore_id}","sourceType":"${explore_type}","targetFieldIDForExpression":"${cur_explore_fieldIDForExpression}","maxInfluencerFields":10,"showConcepts":true,"tempModule":"${explore_metadata_response}"}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/explore/relationship?groupingNodes=true&amp;lowestConcept=true&amp;maxInfluencerFields=10</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-20 ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-168793056">{"message":"completed","statusCode":"Smarts-IFR-20"}</stringProp>
                    <stringProp name="-122441638">"state":"SUCCESS"</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-47 ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="581135912">{"statusCode":"Smarts-IFR-47","message":"Invalid Request JSON input"}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="datacheck passed ?">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">explore_dataCheckTemp = vars.get("explore_datachecks" + "_" + vars.get("explore_fieldCount"));
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\s","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\.","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("__","_");
vars.put("explore_dataCheckTemp", explore_dataCheckTemp)

log.debug("datacheck details: " + vars.get("explore_dataCheckTemp") + " counter: " + vars.get("explore_fieldCount"));

if (!(vars.get("explore_fieldIDForExpression" + "_" + vars.get("explore_fieldCount")).contains(vars.get("explore_dataCheckTemp")))) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(" counter: " + vars.get("explore_fieldCount") + " datacheck details: " + vars.get("explore_dataCheckTemp") + " vs. button details: " + vars.get("explore_fieldIDForExpression" + "_" + vars.get("explore_fieldCount")) );
}
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree />
              </hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <ForeachController enabled="false" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for all smarts interestingfields    CHART-INSIGHT">
              <stringProp name="ForeachController.inputVal">explore_fieldIDForExpression</stringProp>
              <stringProp name="ForeachController.returnVal">cur_explore_fieldIDForExpression</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ explore_fieldCount">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">explore_fieldCount = Integer.valueOf(vars.get("explore_fieldCount"));
explore_fieldCount = explore_fieldCount + 1;
vars.put("explore_fieldCount", String.valueOf(explore_fieldCount));</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post smarts/explore/relationship">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{"sourceModuleId":"${explore_id}","sourceType":"${explore_type}","targetFieldIDForExpression":"${cur_explore_fieldIDForExpression}","maxInfluencerFields":10,"showConcepts":true,"tempModule":"${explore_metadata_response}"}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/explore/relationship?groupingNodes=true&amp;lowestConcept=true&amp;maxInfluencerFields=10</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-20 ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-168793056">{"message":"completed","statusCode":"Smarts-IFR-20"}</stringProp>
                    <stringProp name="-122441638">"state":"SUCCESS"</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Smarts-IFR-47 ?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="581135912">{"statusCode":"Smarts-IFR-47","message":"Invalid Request JSON input"}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="datacheck passed ?">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">explore_dataCheckTemp = vars.get("explore_datachecks" + "_" + vars.get("explore_fieldCount"));
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\s","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("\\.","_");
explore_dataCheckTemp = explore_dataCheckTemp.replaceAll("__","_");
vars.put("explore_dataCheckTemp", explore_dataCheckTemp)

log.debug("datacheck details: " + vars.get("explore_dataCheckTemp") + " counter: " + vars.get("explore_fieldCount"));

if (!(vars.get("explore_fieldIDForExpression" + "_" + vars.get("explore_fieldCount")).contains(vars.get("explore_dataCheckTemp")))) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(" counter: " + vars.get("explore_fieldCount") + " datacheck details: " + vars.get("explore_dataCheckTemp") + " vs. button details: " + vars.get("explore_fieldIDForExpression" + "_" + vars.get("explore_fieldCount")) );
}
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree />
              </hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete temp session">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${explore_tempDatasetId}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="correct number of executions?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1596180293">${explore_datachecks_matchNr}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">explore_fieldCount</stringProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="204 or 200?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1443490196">204|200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If dashboard or story">
              <stringProp name="IfController.condition">${__groovy("${type}"=="dashboard" || "${type}"=="story")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ remove previous dashboard_datachecks">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">datacheckCountStr = vars.get("dashboard_datachecks_matchNr");
if (datacheckCountStr != null ) {
	int datacheckCount = Integer.parseInt(datacheckCountStr);
	while(datacheckCount &gt; 0) {
		vars.remove("dashboard_datachecks_" + datacheckCount);
		datacheckCount = datacheckCount - 1;
	}
	vars.remove("dashboard_datachecks");
	vars.remove("dashboard_datachecks_matchNr");
}
</stringProp>
              </JSR223Sampler>
              <hashTree />
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get dashboard details">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get("item");</stringProp>
              </JSR223Sampler>
              <hashTree>
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get dashboard_name">
                  <stringProp name="JSONPostProcessor.referenceNames">dashboard_name</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get dashboard_datachecks">
                  <stringProp name="JSONPostProcessor.referenceNames">dashboard_datachecks</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.datacheck[*]</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get dashboard_id from navigation_response varilable">
                  <stringProp name="JSONPostProcessor.referenceNames">dashboard_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${dashboard_name}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">navigation_response</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get dashboard_action_names">
                  <stringProp name="JSONPostProcessor.referenceNames">dashboard_action_names</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[*].name</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get dashboard_editmode">
                  <stringProp name="JSONPostProcessor.referenceNames">dashboard_editmode</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.editmode</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get suggestionsCount">
                  <stringProp name="JSONPostProcessor.referenceNames">suggestionsCount</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.suggestions</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="JSONPostProcessor.defaultValues">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="check If dashboard Recording exists">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import org.apache.jorphan.io.TextFile;

vars.put("dashboardRecordingExists", "false");

String[] navPath = vars.get("navigation").split(",");
String relDashboardDir = vars.get("data_dir") + "/";
for(i = 1; i &lt; navPath.length+1; i ++){
	relDashboardDir = relDashboardDir + "/" + navPath[i-1]; 
}
String dashboard_name2 = vars.get("dashboard_name");
relDashboardDir = relDashboardDir + "/" + dashboard_name2;
vars.put("relDashboardDir", relDashboardDir);
vars.put("relDashboardDir_enc", relDashboardDir.replaceAll(" ","%20"));

queryspecFile = relDashboardDir + "/" + ("tab_000");
log.debug(Label + ": queryspecFile = " + queryspecFile);
queryspec = new TextFile(queryspecFile);
//response = ""

// define common logging function
def loginfo = {
	String msg -&gt;
	log.info(msg);
	response = response + msg + "\n"
}

if (queryspec.exists()) {
	log.debug(Label + ": file exists");
	vars.put("dashboardRecordingExists", "true");	
} else {
	log.error("recording file does not exist: " + queryspec.getAbsolutePath());
	//vars.put("dashboardRecordingExists", "false");
	prev.setSuccessful(false)
	prev.setResponseMessage("recording file does not exist: " + queryspec.getAbsolutePath());
}
	  
</stringProp>
                </JSR223PostProcessor>
                <hashTree />
                <ResultAction enabled="true" guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler">
                  <intProp name="OnError.action">3</intProp>
                </ResultAction>
                <hashTree />
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ include dashboarding/launch.jmx">
                </GenericController>
              <hashTree>
        <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/objects/dashboardId?fields=specification">
          <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="HTTPArgument" name="fields">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fields</stringProp>
                <stringProp name="Argument.value">defaultName,specification,deploymentReferences.ancestors,deploymentReferences.defaultName,deploymentReferences.id,deploymentReferences.type,owner.defaultName,permissions,disabled,hidden,iconURI,defaultScreenTip,searchPath</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain" />
          <stringProp name="HTTPSampler.port" />
          <stringProp name="HTTPSampler.protocol" />
          <stringProp name="HTTPSampler.contentEncoding" />
          <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${dashboard_id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re" />
          <stringProp name="HTTPSampler.connect_timeout" />
          <stringProp name="HTTPSampler.response_timeout" />
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp elementType="Header" name="Accept-Language">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="Accept">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="User-Agent">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="Referer">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://vottplab26host.com:9800/bi/index.html?perspective=dashboard&amp;context=%7B%22perspective%22%3A%22dashboard%22%2C%22id%22%3A%22i3AFF8E40E6604E8DBE05D1539C7EBFDB%22%2C%22content%22%3A%7B%22isAuthoringMode%22%3Afalse%2C%22boardId%22%3A%22i3AFF8E40E6604E8DBE05D1539C7EBFDB%22%7D%7D</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="X-Requested-With">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="Accept-Encoding">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get newModuleId">
            <stringProp name="JSONPostProcessor.referenceNames">newModuleId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].deploymentReferences[0].objects[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers" />
            <stringProp name="JSONPostProcessor.defaultValues">NO_NEW</stringProp>
          </JSONPostProcessor>
          <hashTree />
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If first_open">
          <stringProp name="TestPlan.comments">Only run the perspectives request for the first opens</stringProp>
          <stringProp name="IfController.condition">${__groovy("${tr_prefix}"=="first_")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/perspectives/${type}">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/${type}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://vottplab26host.com:9800/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/objects/dashboardId?fields=defaultName">
          <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="HTTPArgument" name="fields">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">fields</stringProp>
                <stringProp name="Argument.value">defaultName%2Cspecification%2CdeploymentReferences.defaultName%2CdeploymentReferences.id%2CdeploymentReferences.type%2CdeploymentReferences.searchPath%2Cancestors%2Cowner.defaultName%2Cpermissions%2Cdisabled%2Chidden%2CsearchPath</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain" />
          <stringProp name="HTTPSampler.port" />
          <stringProp name="HTTPSampler.protocol" />
          <stringProp name="HTTPSampler.contentEncoding" />
          <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${dashboard_id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re" />
          <stringProp name="HTTPSampler.connect_timeout" />
          <stringProp name="HTTPSampler.response_timeout" />
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp elementType="Header" name="Accept-Language">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="Accept">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="User-Agent">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="Referer">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://vottplab26host.com:9800/bi/index.html?perspective=dashboard&amp;context=%7B%22perspective%22%3A%22dashboard%22%2C%22id%22%3A%22i3AFF8E40E6604E8DBE05D1539C7EBFDB%22%2C%22content%22%3A%7B%22isAuthoringMode%22%3Afalse%2C%22boardId%22%3A%22i3AFF8E40E6604E8DBE05D1539C7EBFDB%22%7D%7D</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="X-Requested-With">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="Accept-Encoding">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get dashboardSpec">
            <stringProp name="JSONPostProcessor.referenceNames">dashboardSpec</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..specification</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="create dashboard object">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.ibm.jmeter.ca.dataset.*;
import org.apache.commons.lang3.exception.ExceptionUtils;
import net.sf.json.JSONObject;

jsonSlurper = new groovy.json.JsonSlurper()
properties = jsonSlurper.parseText(prev.getResponseDataAsString())

try {
	specification = new Specification(properties.data[0].specification)

	// TODO: shouldn't we be handling all types?
	vars.put("dataSetType", specification.getFirstAssetType())
	
	navigation = new Navigation(vars.get("navigation"))

	deploymentReferences = new DeploymentReferences(
		((JSONObject)properties).getJSONArray("data").get(0).getJSONArray("deploymentReferences"))

	vars.put("firstAssetId", deploymentReferences.getFirstAssetId())
	
	dashboard = new Dashboard(
		properties.data[0].id,
		properties.data[0].defaultName,
		properties.data[0].type,
		navigation,
		specification,
		deploymentReferences)
	vars.putObject("dashboard", dashboard)

	// store searchPath for ca audit headers
	vars.put("x_audit_searchPath", properties.data[0].searchPath)

	// store searchPath of first dataset for ca audit headers
	vars.put("x_audit_dataSearchPath" , properties.data[0].deploymentReferences[0].objects[0].searchPath)

} catch (Exception e) {
	prev.setSuccessful(false);
	prev.setResponseData(ExceptionUtils.getStackTrace(e));
	prev.setResponseMessage(e.getMessage());
}
</stringProp>
          </JSR223PostProcessor>
          <hashTree />
        </hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ remove previous dashboard_widget_requests">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">datacheckCountStr = vars.get("dashboard_widget_request_matchNr");
if (datacheckCountStr != null ) {
	int datacheckCount = Integer.parseInt(datacheckCountStr);
	while(datacheckCount &gt; 0) {
		vars.remove("dashboard_widget_request_" + datacheckCount);
		datacheckCount = datacheckCount - 1;
	}
	vars.remove("dashboard_widget_request");
	vars.remove("dashboard_widget_request_matchNr");
}</stringProp>
        </JSR223Sampler>
        <hashTree />
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ assign urls for dataset calls" />
        <hashTree>
          <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="use file tab_000">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put("recordingFileName", "tab_000")
log.debug("recordingFileName="+vars.get("recordingFileName"))</stringProp>
          </JSR223PreProcessor>
          <hashTree />
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include dashboarding/processRecording.jmx">
            </GenericController>
          <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Assign dataset call urls">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.commons.lang3.exception.ExceptionUtils;

try {
	dashboard = vars.getObject("dashboard")
	requests = dashboard.getDatasetRequests(vars.get("data_dir"), vars.get("recordingFileName"), vars.get("urlPath"))
} catch (Exception e) {
	SampleResult.setResponseMessage(e.getMessage());
	SampleResult.setSuccessful(false);
	SampleResult.setResponseData(ExceptionUtils.getStackTrace(e));
}
</stringProp>
        </JSR223Sampler>
        <hashTree />
      </hashTree>
    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Read each query spec line from file">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">dashboard_widget_request</stringProp>
            <stringProp name="RegexExtractor.regex">(.+datasets.[^\n]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default" />
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree />
        </hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}getMetadata">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="metadata" />
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include dashboarding/metadata.jmx">
              </GenericController>
            <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Initialize dictionary to track widget's value, filterValue and initialize feedback_message">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.util.HashMap;
import java.util.Map;

Map&lt;Integer, ArrayList&lt;String&gt;&gt; widgetFilterValues = new HashMap&lt;Integer, ArrayList&lt;String&gt;&gt;();
vars.putObject("widgetFilterValues",widgetFilterValues);
vars.put("widgetNum", "0");
vars.put("feedback_message", "");

if (vars.get("dataSetType").toLowerCase().contains("dataset")) {
	vars.put("dataSetType", "dataset");
}
if (!vars.get("newModuleId").equals("NO_NEW")) {
	vars.put("firstAssetId", vars.get("newModuleId"));
}
</stringProp>
        </JSR223Sampler>
        <hashTree />
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="Parse and send metadata call" />
        <hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="if test is in edit mode">
            <stringProp name="IfController.condition">${__groovy("${dashboard_editmode}"=="true")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="post module" />
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post module">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{"version":"5.9","container":"C","useSpec":[{"identifier":"ES","type":"${useSpec_type}","storeID":"${firstAssetId}","imports":"*"}],"expressionLocale":"en-us","dataRetrievalMode":"liveConnection","identifier":"newModel","label":"newModel"}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/?location=~~&amp;session=true</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set useSpec_type">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters">${dataSetType}</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">useSpec_type = args[0]
if ("uploadedFile".equals(useSpec_type)) {
	useSpec_type = "file"
}
vars.put("useSpec_type", useSpec_type)
</stringProp>
                </JSR223PreProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get assetHref">
                  <stringProp name="JSONPostProcessor.referenceNames">assetHref</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.href</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get tempDatasetId">
                  <stringProp name="JSONPostProcessor.referenceNames">tempDatasetId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get dataset">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${tempDatasetId}/metadata?shortIdForExpression=true&amp;item=on&amp;type=module</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree />
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="Metadata and Initial Dataset call">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get feedback">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${tempDatasetId}/feedback</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get feedback_message">
                  <stringProp name="TestPlan.comments">expect message=MSR-VRF-1000 No issues were detected during verification.</stringProp>
                  <stringProp name="JSONPostProcessor.referenceNames">feedback_message</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.feedback..message</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NONE</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ replace tempDatasetId">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">totalWidgets = vars.get("dashboard_widget_request_matchNr");
log.debug("totalWidgets=" + totalWidgets);
log.info("totalWidgets=" + totalWidgets);
for(i = 1; i&lt;=Integer.valueOf(totalWidgets); i++){
	log.debug("i=" + String.valueOf(i));
	varName = "dashboard_widget_request_" + String.valueOf(i);
	dbWR = vars.get(varName);
	log.debug("before dbWR=" + dbWR);
	dbWR = dbWR.replaceAll("datasets\\/i[0-9A-F]{32}", "datasets/" + vars.get("tempDatasetId"));
	dbWR = dbWR.replaceAll("type=uploadedFile", "type=module");
	dbWR = dbWR.replaceAll("type=file", "type=module");
	dbWR = dbWR.replaceAll("type=dataSet2", "type=module");
     dbWR = dbWR.replaceAll("type=dataset", "type=module");
     dbWR = dbWR.replaceAll("type=package", "type=module");
     log.debug("after dbWR=" + dbWR);
	vars.put(varName, dbWR);
}
</stringProp>
              </JSR223Sampler>
              <hashTree />
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="if test is not in edit mode">
            <stringProp name="IfController.condition">${__groovy("${dashboard_editmode}"!="true")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Capture the subsetid">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return vars.get("dashboardSpec");</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get dataSetType from dashboardSpec">
                <stringProp name="JSONPostProcessor.referenceNames">subset</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.widgets..data..itemId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="build the subsetIds parameter">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// build this from dashboard spec
import java.util.ArrayList;
import java.util.List;
import java.util.LinkedHashSet;
import java.util.Set;
def subsetstring = vars.get("subset_ALL");

// using a set avoids duplicate items. having it ordered matches order produced by client
Set&lt;String&gt; mainList = new LinkedHashSet&lt;String&gt;();

// for each item, only add unique items
subsetstring.split(",").each { item -&gt;
     // fix items to be url params before adding
	mainList.add("&amp;i=" + item)
	
}
mainList.removeAll{it.startsWith('&amp;i=_multiMeasuresSeries')}


// create a string from the set
subsetIds = mainList.join()
log.debug("value is " + subsetIds)


vars.put("subsetIds", subsetIds)</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If dataSetType is module, do the module metadata call">
              <stringProp name="IfController.condition">${__groovy("${dataSetType}"=="module")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="get info on metadata" />
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get module metadata">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="subsetIds">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${subsetIds}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subsetIds</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding" />
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${firstAssetId}/metadata?shortIdForExpression=true&amp;item=on&amp;type=module </stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree />
              </hashTree>
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If dataSetType is dataset or dataSet2, do the dataset metadata call">
              <stringProp name="IfController.condition">${__groovy("${dataSetType}"=="dataSet2" || "${dataSetType}"=="dataset")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get dataset base_modules metadata">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="type">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${dataSetType}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="shortIdForExpression">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">shortIdForExpression</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="item">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">item</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="subsetIds">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${subsetIds}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">subsetIds</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/base_modules/${firstAssetId}/metadata</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get assetHref">
                  <stringProp name="JSONPostProcessor.referenceNames">assetHref</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.href</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get tempDatasetId">
                  <stringProp name="JSONPostProcessor.referenceNames">tempDatasetId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="Metadata and Initial Dataset call">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get dataset metadata">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding" />
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/datasets/${firstAssetId}?bc=1&amp;module=true&amp;type=${dataSetType}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree />
              </hashTree>
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If dataSetType is live">
              <stringProp name="IfController.condition">${__groovy("${dataSetType}"=="live")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Process dashboardSpec differently for live data">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get("dashboardSpec");</stringProp>
              </JSR223Sampler>
              <hashTree>
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get dataSetType from dashboardSpec">
                  <stringProp name="JSONPostProcessor.referenceNames">dataSetType</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.dataSources..type</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="Metadata and Initial Dataset call">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get live metadata">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding" />
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/datasets/${firstAssetId}?bc=1&amp;module=true&amp;type=${dataSetType}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree />
              </hashTree>
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If dataSetType is uploaded file, do the uploaded file metadata call">
              <stringProp name="IfController.condition">${__groovy("${dataSetType}"=="uploadedFile")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get uploadedFile metadata">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="type">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">file</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="shortIdForExpression">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">shortIdForExpression</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="item">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">item</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="subsetIds">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${subsetIds}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">subsetIds</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/base_modules/${firstAssetId}/metadata</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get assetHref">
                  <stringProp name="JSONPostProcessor.referenceNames">assetHref</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.href</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get tempDatasetId">
                  <stringProp name="JSONPostProcessor.referenceNames">tempDatasetId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If dataSetType is package, do the package metadata call">
              <stringProp name="IfController.condition">${__groovy("${dataSetType}"=="package")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="get info on metadata" />
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get package metadata">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="type">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${dataSetType}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">type</stringProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="shortIdForExpression">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">shortIdForExpression</stringProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="item">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">on</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">item</stringProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="subsetIds">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${subsetIds}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subsetIds</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding" />
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${firstAssetId}/metadata</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree />
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
        </hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}launchDashboard_${dashboard_name}">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="suggestions" />
          <hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ If not in edit mode use suggestion service">
              <stringProp name="IfController.condition">${__groovy(${__groovy("${dashboard_editmode}"!="true" &amp;&amp; "${suggestionsCount}"!="0")})}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ remove previous dashboard_sa_requests">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">datacheckCountStr = vars.get("dashboard_sa_request_matchNr");
if (datacheckCountStr != null ) {
	int datacheckCount = Integer.parseInt(datacheckCountStr);
	while(datacheckCount &gt; 0) {
		vars.remove("dashboard_sa_request_" + datacheckCount);
		datacheckCount = datacheckCount - 1;
	}
	vars.remove("dashboard_sa_request");
	vars.remove("dashboard_sa_request_matchNr");
}</stringProp>
              </JSR223Sampler>
              <hashTree />
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include dashboarding/suggestions.jmx">
                </GenericController>
              <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Dashboard Suggestions Requests" />
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ remove previous dashboard_datachecks">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">datacheckCountStr = vars.get("dashboard_datachecks_matchNr");
if (datacheckCountStr != null ) {
	int datacheckCount = Integer.parseInt(datacheckCountStr);
	while(datacheckCount &gt; 0) {
		vars.remove("dashboard_datachecks_" + datacheckCount);
		datacheckCount = datacheckCount - 1;
	}
	vars.remove("dashboard_datachecks");
	vars.remove("dashboard_datachecks_matchNr");
}
</stringProp>
          </JSR223Sampler>
          <hashTree />
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get dashboard suggestions details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("item");</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get dashboard_suggestion_datachecks">
              <stringProp name="JSONPostProcessor.referenceNames">dashboard_datachecks</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.suggestionsDatacheck[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments" />
              <stringProp name="JSONPostProcessor.defaultValues">{\"annotations</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="Parse and send metadata call" />
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ assign urls" />
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include dashboarding/processRecording.jmx">
                </GenericController>
              <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Assign dataset call urls">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.commons.lang3.exception.ExceptionUtils;

try {
	dashboard = vars.getObject("dashboard")
	requests = dashboard.getDatasetRequests(vars.get("data_dir"), vars.get("recordingFileName"), vars.get("urlPath"))
} catch (Exception e) {
	SampleResult.setResponseMessage(e.getMessage());
	SampleResult.setSuccessful(false);
	SampleResult.setResponseData(ExceptionUtils.getStackTrace(e));
}
</stringProp>
        </JSR223Sampler>
        <hashTree />
      </hashTree>
    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Read each suggestion request from file">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dashboard_sa_request</stringProp>
                <stringProp name="RegexExtractor.regex">(post_file.+suggestions)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments"> (.+/bi/v1/predict/annotations/suggestions)</stringProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="update suggestion datachecks">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">dwr_matchNr = vars.get("dashboard_sa_request_matchNr");
if (dwr_matchNr != null) {
	dsd_matchNr = vars.get("dashboard_datachecks_matchNr");
	if (dsd_matchNr.equals(null)) {
		dsd_matchNr = "0";
	}
	dwr_Nr = Integer.parseInt(dwr_matchNr);
	datacheckCount = Integer.parseInt(dsd_matchNr);
	log.debug("dwr_Nr=" + dwr_Nr + " datacheckCount="+datacheckCount)
	//dwr_Nr=0 datacheckCount=4 
	//assert dwr_Nr != null
	if (dwr_Nr == null) {
		prev.setResponseMessage("dwr_Nr is " + dwr_Nr);
		prev.setSuccessful(false);  
	}
	//assert dwr_Nr &gt;= 0
	if (dwr_Nr &lt;= 0) {
		prev.setResponseMessage("dwr_Nr is " + dwr_Nr);
		prev.setSuccessful(false); 
	}
	//assert datacheckCount != null
	if (datacheckCount == null) {
		prev.setResponseMessage("datacheckCount is " + datacheckCount);
		prev.setSuccessful(false); 
	}
	while(datacheckCount != dwr_Nr) {
		datacheckCount = datacheckCount + 1;
		// create simple datacheck that will be in a valid response
		vars.put("dashboard_datachecks_" + datacheckCount, "{\"annot");
	}
	vars.put("dashboard_datachecks_matchNr", String.valueOf(datacheckCount));
}</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}launchDashboard_SuggestionRequests_${recordingFileName}">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <com.ibm.jmeter.parallel.ParallelSampler enabled="true" guiclass="com.ibm.jmeter.parallel.gui.ParallelRequestGui" testclass="com.ibm.jmeter.parallel.ParallelSampler" testname="Parallel Sampler for dashboard widget calls - suggestion">
              <stringProp name="urlArrayName">dashboard_sa_request</stringProp>
              <stringProp name="datacheckArrayName">dashboard_datachecks</stringProp>
              <stringProp name="resultObjectName">parallelSamplerErrors</stringProp>
            </com.ibm.jmeter.parallel.ParallelSampler>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="datasets" />
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ remove previous dashboard_datachecks">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">datacheckCountStr = vars.get("dashboard_datachecks_matchNr");
if (datacheckCountStr != null ) {
	int datacheckCount = Integer.parseInt(datacheckCountStr);
	while(datacheckCount &gt; 0) {
		vars.remove("dashboard_datachecks_" + datacheckCount);
		datacheckCount = datacheckCount - 1;
	}
	vars.remove("dashboard_datachecks");
	vars.remove("dashboard_datachecks_matchNr");
}
</stringProp>
            </JSR223Sampler>
            <hashTree />
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get dashboard details">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return vars.get("item");</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get dashboard_datachecks">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">item datacheck dashboard_datachecks</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper

itemVarName = args[0]
itemDatacheckKeyName = args[1]
datacheckVariableName = args[2]

item = new JsonSlurper().parseText(vars.get(itemVarName))
datachecks = item[itemDatacheckKeyName]

// if it's a map then we have specific datachecks per version of product
if (datachecks instanceof groovy.json.internal.LazyMap) {

	// must treat datachecks as a multiversion map
     datachecks_mv = datachecks

     // sort the release versions available but skip "default"
	sortedListOfDefinedVersions = []
	for(key in datachecks_mv.keySet()) {
		if ("default".equals(key)) continue // skip
		
		// only care about release version
		key_releaseVersion = key
		sortedListOfDefinedVersions.add(Integer.parseInt(key_releaseVersion.minus(".").minus(".")))
	}
	sortedListOfDefinedVersions = sortedListOfDefinedVersions.sort()

	currentCandidate = 0
	// iterate over sorted list
	for(key in sortedListOfDefinedVersions) {
		
		// looking for lowest key that's &gt;= the release
		if (Integer.parseInt(vars.get("productVerKey").toString()) &gt;= key &amp;&amp; key &gt; currentCandidate) {
			currentCandidate = key
			datachecks = datachecks_mv[key_releaseVersion.toString()]
			//log.info("PRODUCT COMPARISON " + vars.get("productVerKey").toString() + " : " + key.toString() + " : " + currentCandidate.toString() + " : " + key_releaseVersion.toString())
		} else {
			// since it's a sorted list, no point in searching further
			break;
		}
	}
	if (currentCandidate == 0) {
		// no newer candidate found use default
		datachecks = datachecks_mv["default"]
	}
}

// create jmeter friendly array variable
datacheckCount = 0
for(datacheck in datachecks) {
	datacheckCount++
	vars.put(datacheckVariableName + "_" + datacheckCount, datacheck.toString())
	vars.put(datacheckVariableName + "_matchNr", String.valueOf(datacheckCount))
}
</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <com.ibm.jmeter.parallel.ParallelSampler enabled="true" guiclass="com.ibm.jmeter.parallel.gui.ParallelRequestGui" testclass="com.ibm.jmeter.parallel.ParallelSampler" testname="Parallel Sampler for dashboard widget calls - dashboard">
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="urlArrayName">dashboard_widget_request</stringProp>
              <stringProp name="datacheckArrayName">dashboard_datachecks</stringProp>
              <stringProp name="resultObjectName">parallelSamplerErrors</stringProp>
            </com.ibm.jmeter.parallel.ParallelSampler>
            <hashTree>
              <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set headers">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
headerManager = ctx.getCurrentSampler().getHeaderManager();


// x-audit headers are used for CA auditing purposes, they are not required unless you care about audit logging

// x-audit-dataSearchPath: /content/folder%5B@name='Dashboarding'%5D/folder%5B@name='source'%5D/uploadedFile%5B@name='CSV_1000rows100cols.csv'%5D
headerManager.removeHeaderNamed("x-audit-dataSearchPath")
headerManager.add(new Header("x-audit-dataSearchPath",vars.get("x_audit_dataSearchPath")));

// x-audit-type: exploration
headerManager.removeHeaderNamed("x-audit-type")
headerManager.add(new Header("x-audit-type","exploration"));

// x-audit-searchPath
headerManager.removeHeaderNamed("x-audit-searchPath")
headerManager.add(new Header("x-audit-searchPath",vars.get("x_audit_searchPath")));

// x-audit-dashboardId
headerManager.removeHeaderNamed("x-audit-dashboardId")
headerManager.add(new Header("x-audit-dashboardId",vars.get("dashboard_id")));

// remove Connection header twice? -- if not some POST will fail
headerManager.removeHeaderNamed("Connection");
headerManager.removeHeaderNamed("Connection");</stringProp>
              </JSR223PreProcessor>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="executions calls" />
          <hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ If Dashboard Service Requests enabled">
              <stringProp name="IfController.condition">${__groovy("${smartAnnotations}"=="enabled")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include dashboarding/executions.jmx">
                </GenericController>
              <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ remove previous dashboard_datachecks">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">datacheckCountStr = vars.get("dashboard_datachecks_matchNr");
if (datacheckCountStr != null ) {
	int datacheckCount = Integer.parseInt(datacheckCountStr);
	while(datacheckCount &gt; 0) {
		vars.remove("dashboard_datachecks_" + datacheckCount);
		datacheckCount = datacheckCount - 1;
	}
	vars.remove("dashboard_datachecks");
	vars.remove("dashboard_datachecks_matchNr");
}
</stringProp>
        </JSR223Sampler>
        <hashTree />
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get dashboard executions details">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">return vars.get("item");</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get dashboard_execution_datachecks">
            <stringProp name="JSONPostProcessor.referenceNames">dashboard_datachecks</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.executionsDatacheck[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="TestPlan.comments" />
          </JSONPostProcessor>
          <hashTree />
        </hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Initialize dictionary to track widget's value and filterValue ">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.util.HashMap;
import java.util.Map;

Map&lt;Integer, ArrayList&lt;String&gt;&gt; widgetFilterValues = new HashMap&lt;Integer, ArrayList&lt;String&gt;&gt;();
vars.putObject("widgetFilterValues",widgetFilterValues);
vars.put("widgetNum", "0");

if (vars.get("dataSetType").toLowerCase().contains("dataset")) {
	vars.put("dataSetType", "dataset");
}
if (!vars.get("newModuleId").equals("NO_NEW")) {
	vars.put("firstAssetId", vars.get("newModuleId"));
}
</stringProp>
        </JSR223Sampler>
        <hashTree />
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Dashboard Executions Requests" />
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="Parse and send metadata call" />
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ assign urls" />
              <hashTree>
                <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="use file tab_000">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">vars.put("recordingFileName", "tab_000")</stringProp>
                </JSR223PreProcessor>
                <hashTree />
                <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include dashboarding/processRecording.jmx">
                  </GenericController>
                <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Assign dataset call urls">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.commons.lang3.exception.ExceptionUtils;

try {
	dashboard = vars.getObject("dashboard")
	requests = dashboard.getDatasetRequests(vars.get("data_dir"), vars.get("recordingFileName"), vars.get("urlPath"))
} catch (Exception e) {
	SampleResult.setResponseMessage(e.getMessage());
	SampleResult.setSuccessful(false);
	SampleResult.setResponseData(ExceptionUtils.getStackTrace(e));
}
</stringProp>
        </JSR223Sampler>
        <hashTree />
      </hashTree>
    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Read each execution request from file">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dashboard_widget_request</stringProp>
                  <stringProp name="RegexExtractor.regex">(post_file.+execution.+|post_file.+smarts\/explore\/anno.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments"> (.+/bi/v1/predict/annotations/suggestions)</stringProp>
                </RegexExtractor>
                <hashTree />
              </hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset variables for dataset type calls">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">datasetTypesRequestsMade = new ArrayList();
vars.putObject("datasetTypesRequestsMade", datasetTypesRequestsMade);
vars.put("datasetTypeCount", "1");</stringProp>
              </JSR223Sampler>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset Counter ">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("tabIndex", "0");</stringProp>
            </JSR223Sampler>
            <hashTree />
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}launchDashboard_ExecutionRequests">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}launchDashboard_ExecutionRequests">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <com.ibm.jmeter.parallel.ParallelSampler enabled="true" guiclass="com.ibm.jmeter.parallel.gui.ParallelRequestGui" testclass="com.ibm.jmeter.parallel.ParallelSampler" testname="Parallel Sampler for dashboard widget calls - execution">
                  <stringProp name="urlArrayName">dashboard_widget_request</stringProp>
                  <stringProp name="datacheckArrayName">dashboard_datachecks</stringProp>
                  <stringProp name="resultObjectName">parallelSamplerErrors</stringProp>
                </com.ibm.jmeter.parallel.ParallelSampler>
                <hashTree />
              </hashTree>
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="delete the temp session if it was successful">
              <stringProp name="TestPlan.comments">expect something like MSR-VRF-1000 No issues were detected during verification.</stringProp>
              <stringProp name="IfController.condition">${__groovy("${feedback_message}".indexOf("No issues") != -1)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete session">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${tempDatasetId}</stringProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="204 or 200?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1443490196">204|200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
          </hashTree>
        </hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="tabs" />
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include dashboarding/tabs.jmx">
            </GenericController>
          <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset tabIndex ">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">vars.put("tabIndex", "0");</stringProp>
        </JSR223Sampler>
        <hashTree />
        <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname=" ForEach action in actions (tabs)">
          <stringProp name="ForeachController.inputVal">dashboard_action_names</stringProp>
          <stringProp name="ForeachController.returnVal">actionName</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
          <stringProp name="ForeachController.startIndex">0</stringProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set and reset counts">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">tabIndex = Integer.valueOf(vars.get("tabIndex"));
tabIndex = tabIndex + 1;
vars.put("tabIndex", String.valueOf(tabIndex));
log.debug("tabIndex=" + tabIndex);
vars.put("action_datachecks_matchNr", "0")
vars.put("dashboard_action_request_matchNr", "0")</stringProp>
          </JSR223Sampler>
          <hashTree />
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get action_datachecks">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.get("item")
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get actionDetails">
              <stringProp name="JSONPostProcessor.referenceNames">actionDetails</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.actions[?(@.name=="${actionName}")]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">1</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get suggestionsCount">
              <stringProp name="JSONPostProcessor.referenceNames">suggestionsCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.suggestions</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="JSONPostProcessor.defaultValues">1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">actionDetails</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get action_datachecks">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">actionDetails datachecks action_datachecks</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

itemVarName = args[0]
itemDatacheckKeyName = args[1]
datacheckVariableName = args[2]

item = new JsonSlurper().parseText(vars.get(itemVarName))
datachecks = item[itemDatacheckKeyName]

// if it's a map then we have specific datachecks per version of product
if (datachecks instanceof groovy.json.internal.LazyMap) {

	// must treat datachecks as a multiversion map
     datachecks_mv = datachecks

     // sort the release versions available but skip "default"
	sortedListOfDefinedVersions = []
	for(key in datachecks_mv.keySet()) {
		if ("default".equals(key)) continue // skip
		
		// only care about release version
		key_releaseVersion = key
		sortedListOfDefinedVersions.add(Integer.parseInt(key_releaseVersion.minus(".").minus(".")))
	}
	sortedListOfDefinedVersions = sortedListOfDefinedVersions.sort()

	currentCandidate = 0
	// iterate over sorted list
	for(key in sortedListOfDefinedVersions) {
		
		// looking for lowest key that's &gt;= the release
		if (Integer.parseInt(vars.get("productVerKey").toString()) &gt;= key &amp;&amp; key &gt; currentCandidate) {
			currentCandidate = key
			datachecks = datachecks_mv[key_releaseVersion.toString()]
			//log.info("PRODUCT COMPARISON " + vars.get("productVerKey").toString() + " : " + key.toString() + " : " + currentCandidate.toString() + " : " + key_releaseVersion.toString())
		} else {
			// since it's a sorted list, no point in searching further
			break;
		}
	}
	if (currentCandidate == 0) {
		// no newer candidate found use default
		datachecks = datachecks_mv["default"]
	}
}

// create jmeter friendly array variable
datacheckCount = 0
for(datacheck in datachecks) {
	datacheckCount++
	vars.put(datacheckVariableName + "_" + datacheckCount, datacheck.toString())
	vars.put(datacheckVariableName + "_matchNr", String.valueOf(datacheckCount))
}
</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}open_tab_${actionName}">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="Parse and send metadata call" />
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ assign urls" />
              <hashTree>
                <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="use file actionName">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">vars.put("recordingFileName", vars.get("actionName"))</stringProp>
                </JSR223PreProcessor>
                <hashTree />
                <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include dashboarding/processRecording.jmx">
                  </GenericController>
                <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Assign dataset call urls">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.commons.lang3.exception.ExceptionUtils;

try {
	dashboard = vars.getObject("dashboard")
	requests = dashboard.getDatasetRequests(vars.get("data_dir"), vars.get("recordingFileName"), vars.get("urlPath"))
} catch (Exception e) {
	SampleResult.setResponseMessage(e.getMessage());
	SampleResult.setSuccessful(false);
	SampleResult.setResponseData(ExceptionUtils.getStackTrace(e));
}
</stringProp>
        </JSR223Sampler>
        <hashTree />
      </hashTree>
    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Read each query spec line from file">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dashboard_action_request</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+datasets.[^\n]+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default" />
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree />
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If edit mode">
                <stringProp name="IfController.condition">${__groovy("${dashboard_editmode}"=="true")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ replace tempDatasetId">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">totalWidgets = vars.get("dashboard_action_request_matchNr");
log.debug("totalWidgets=" + totalWidgets);
log.info("totalWidgets=" + totalWidgets);
for(i = 1; i&lt;=Integer.valueOf(totalWidgets); i++){
	log.debug("i=" + String.valueOf(i));
	varName = "dashboard_action_request_" + String.valueOf(i);
	dbWR = vars.get(varName);
	log.debug("before dbWR=" + dbWR);
	dbWR = dbWR.replaceAll("datasets\\/i[0-9A-F]{32}", "datasets/" + vars.get("tempDatasetId"));
	dbWR = dbWR.replaceAll("type=uploadedFile", "type=module");
	dbWR = dbWR.replaceAll("type=file", "type=module");
	dbWR = dbWR.replaceAll("type=dataSet2", "type=module");
     dbWR = dbWR.replaceAll("type=dataset", "type=module");
	log.debug("after dbWR=" + dbWR);
	vars.put(varName, dbWR);
}
</stringProp>
                </JSR223Sampler>
                <hashTree />
              </hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset variables for dataset type calls">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">datasetTypesRequestsMade = new ArrayList();
vars.putObject("datasetTypesRequestsMade", datasetTypesRequestsMade);
vars.put("datasetTypeCount", "1");</stringProp>
              </JSR223Sampler>
              <hashTree />
            </hashTree>
            <com.ibm.jmeter.parallel.ParallelSampler enabled="true" guiclass="com.ibm.jmeter.parallel.gui.ParallelRequestGui" testclass="com.ibm.jmeter.parallel.ParallelSampler" testname="Parallel Sampler for dashboard widget calls">
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="urlArrayName">dashboard_action_request</stringProp>
              <stringProp name="datacheckArrayName">action_datachecks</stringProp>
              <stringProp name="resultObjectName">parallelSamplerErrors</stringProp>
            </com.ibm.jmeter.parallel.ParallelSampler>
            <hashTree>
              <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set headers">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
headerManager = ctx.getCurrentSampler().getHeaderManager();

// x-audit headers are used for CA auditing purposes, they are not required unless you care about audit logging

// x-audit-dataSearchPath: /content/folder%5B@name='Dashboarding'%5D/folder%5B@name='source'%5D/uploadedFile%5B@name='CSV_1000rows100cols.csv'%5D
headerManager.removeHeaderNamed("x-audit-dataSearchPath")
headerManager.add(new Header("x-audit-dataSearchPath",vars.get("x_audit_dataSearchPath")));

// x-audit-type: exploration
headerManager.removeHeaderNamed("x-audit-type")
headerManager.add(new Header("x-audit-type","exploration"));

// x-audit-searchPath
headerManager.removeHeaderNamed("x-audit-searchPath")
headerManager.add(new Header("x-audit-searchPath",vars.get("x_audit_searchPath")));

// x-audit-dashboardId
headerManager.removeHeaderNamed("x-audit-dashboardId")
headerManager.add(new Header("x-audit-dashboardId",vars.get("dashboard_id")));

// remove Connection header twice? -- if not some POST will fail
headerManager.removeHeaderNamed("Connection");
headerManager.removeHeaderNamed("Connection");</stringProp>
              </JSR223PreProcessor>
              <hashTree />
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="suggestions">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="suggestions" />
              <hashTree>
                <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ If not in edit mode use suggestion service">
                  <stringProp name="IfController.condition">${__groovy(${__groovy("${dashboard_editmode}"!="true" &amp;&amp; "${suggestionsCount}"!="0")})}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ remove previous dashboard_sa_requests">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">datacheckCountStr = vars.get("dashboard_sa_request_matchNr");
if (datacheckCountStr != null ) {
	int datacheckCount = Integer.parseInt(datacheckCountStr);
	while(datacheckCount &gt; 0) {
		vars.remove("dashboard_sa_request_" + datacheckCount);
		datacheckCount = datacheckCount - 1;
	}
	vars.remove("dashboard_sa_request");
	vars.remove("dashboard_sa_request_matchNr");
}</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                  <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include dashboarding/suggestions.jmx">
                    </GenericController>
                  <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Dashboard Suggestions Requests" />
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ remove previous dashboard_datachecks">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">datacheckCountStr = vars.get("dashboard_datachecks_matchNr");
if (datacheckCountStr != null ) {
	int datacheckCount = Integer.parseInt(datacheckCountStr);
	while(datacheckCount &gt; 0) {
		vars.remove("dashboard_datachecks_" + datacheckCount);
		datacheckCount = datacheckCount - 1;
	}
	vars.remove("dashboard_datachecks");
	vars.remove("dashboard_datachecks_matchNr");
}
</stringProp>
          </JSR223Sampler>
          <hashTree />
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get dashboard suggestions details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("item");</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get dashboard_suggestion_datachecks">
              <stringProp name="JSONPostProcessor.referenceNames">dashboard_datachecks</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.suggestionsDatacheck[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments" />
              <stringProp name="JSONPostProcessor.defaultValues">{\"annotations</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="Parse and send metadata call" />
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ assign urls" />
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include dashboarding/processRecording.jmx">
                </GenericController>
              <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Assign dataset call urls">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.commons.lang3.exception.ExceptionUtils;

try {
	dashboard = vars.getObject("dashboard")
	requests = dashboard.getDatasetRequests(vars.get("data_dir"), vars.get("recordingFileName"), vars.get("urlPath"))
} catch (Exception e) {
	SampleResult.setResponseMessage(e.getMessage());
	SampleResult.setSuccessful(false);
	SampleResult.setResponseData(ExceptionUtils.getStackTrace(e));
}
</stringProp>
        </JSR223Sampler>
        <hashTree />
      </hashTree>
    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Read each suggestion request from file">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dashboard_sa_request</stringProp>
                <stringProp name="RegexExtractor.regex">(post_file.+suggestions)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments"> (.+/bi/v1/predict/annotations/suggestions)</stringProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="update suggestion datachecks">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">dwr_matchNr = vars.get("dashboard_sa_request_matchNr");
if (dwr_matchNr != null) {
	dsd_matchNr = vars.get("dashboard_datachecks_matchNr");
	if (dsd_matchNr.equals(null)) {
		dsd_matchNr = "0";
	}
	dwr_Nr = Integer.parseInt(dwr_matchNr);
	datacheckCount = Integer.parseInt(dsd_matchNr);
	log.debug("dwr_Nr=" + dwr_Nr + " datacheckCount="+datacheckCount)
	//dwr_Nr=0 datacheckCount=4 
	//assert dwr_Nr != null
	if (dwr_Nr == null) {
		prev.setResponseMessage("dwr_Nr is " + dwr_Nr);
		prev.setSuccessful(false);  
	}
	//assert dwr_Nr &gt;= 0
	if (dwr_Nr &lt;= 0) {
		prev.setResponseMessage("dwr_Nr is " + dwr_Nr);
		prev.setSuccessful(false); 
	}
	//assert datacheckCount != null
	if (datacheckCount == null) {
		prev.setResponseMessage("datacheckCount is " + datacheckCount);
		prev.setSuccessful(false); 
	}
	while(datacheckCount != dwr_Nr) {
		datacheckCount = datacheckCount + 1;
		// create simple datacheck that will be in a valid response
		vars.put("dashboard_datachecks_" + datacheckCount, "{\"annot");
	}
	vars.put("dashboard_datachecks_matchNr", String.valueOf(datacheckCount));
}</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}launchDashboard_SuggestionRequests_${recordingFileName}">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <com.ibm.jmeter.parallel.ParallelSampler enabled="true" guiclass="com.ibm.jmeter.parallel.gui.ParallelRequestGui" testclass="com.ibm.jmeter.parallel.ParallelSampler" testname="Parallel Sampler for dashboard widget calls - suggestion">
              <stringProp name="urlArrayName">dashboard_sa_request</stringProp>
              <stringProp name="datacheckArrayName">dashboard_datachecks</stringProp>
              <stringProp name="resultObjectName">parallelSamplerErrors</stringProp>
            </com.ibm.jmeter.parallel.ParallelSampler>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="delete the temp session if it was successful">
          <stringProp name="TestPlan.comments">expect something like MSR-VRF-1000 No issues were detected during verification.</stringProp>
          <stringProp name="IfController.condition">${__groovy("${feedback_message}".indexOf("No issues") != -1)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete session">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${tempDatasetId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="204 or 200?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1443490196">204|200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If fileUpload">
              <stringProp name="IfController.condition">${__groovy("${type}"=="file_upload" || "${type}"=="file_replace_append")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get file upload details">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get("item");</stringProp>
              </JSR223Sampler>
              <hashTree>
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get file name">
                  <stringProp name="JSONPostProcessor.referenceNames">fileName</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include modules/file_upload.jmx">
                </GenericController>
              <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get testcase details">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">return vars.get("item");</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get group_name">
            <stringProp name="JSONPostProcessor.referenceNames">group_name</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
          </JSONPostProcessor>
          <hashTree />
        </hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get list of files">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${fileupload_data_dir}</stringProp>
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">fileupload_data_dir = args[0]
vars.put("isDirectory", "false");
group_name = vars.get("group_name")

File groupFile = new File(fileupload_data_dir, group_name)
log.debug("groupFile: " + groupFile.toString())

File[] files;

if (groupFile.isFile()) {
	
	// just a single file
	files = [groupFile]

} else if(groupFile.isDirectory()) {
	
	// a directory of files
	vars.put("isDirectory", "true");
	files = groupFile.listFiles();
	
} else {
	// is it possible?
	SampleResult.setSuccessful(false);
	SampleResult.setErrorCount(1);
	SampleResult.setResponseMessage("something wrong with file or group name provided in " + vars.get("item"));
	return;
}

// populate jmeter variables
int counter = 0;
for (File file : files) {
	counter = counter + 1;
	String fname = file.getName();
	vars.put("filenames_" + String.valueOf(counter), fname);
}
vars.put("filenames_matchNr", String.valueOf(counter));
</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="/ set fileupload_data_dir">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__P(fileupload_data_dir,../../../testPlans/data)}</stringProp>
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">fileupload_data_dir_param = args[0]

fileupload_data_dir_rel_from_root_param = 'test-jmeter-base/testPlans/data'

fileupload_data_dir_rel_from_bin_param = '../../../testPlans/data'

fileupload_data_dir = ''
// new default
if (new File(fileupload_data_dir_param).exists()) {
	// use the provided value
	fileupload_data_dir = fileupload_data_dir_param
} else if (new File(fileupload_data_dir_rel_from_root_param).exists()) {
	// try default location relative from root
	fileupload_data_dir = fileupload_data_dir_rel_from_root_param
} else if (new File(fileupload_data_dir_rel_from_bin_param).exists()) {
	// try default location relative from bin
	fileupload_data_dir = fileupload_data_dir_rel_from_bin_param
} else {
	// try current location
	fileupload_data_dir = ''
}

vars.put("fileupload_data_dir", fileupload_data_dir)</stringProp>
          </JSR223PreProcessor>
          <hashTree />
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="only file upload">
          <stringProp name="IfController.condition">${__groovy("${type}"=="file_upload")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="file_upload" />
          <hashTree>
            <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each file">
              <stringProp name="ForeachController.inputVal">filenames</stringProp>
              <stringProp name="ForeachController.returnVal">fileName</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">${filenames_matchNr}</stringProp>
            </ForeachController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ check if file exists">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">userInterfaces,owner.id,defaultName,disabled,hidden,permissions,runInAdvancedViewer,canBurst,userInterfaces,extensions,iconURI,defaultScreenTip</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.my_folders/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Delete existing file before uploading new one">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;
vars.put("FILE_DEL","0"); // this is used later to check whether to delete already existing file 
JsonStreamParser jsonStreamReader = new JsonStreamParser(prev.getResponseDataAsString());
String jsonStr = prev.getResponseDataAsString();
JsonElement response = new JsonStreamParser(jsonStr).next().getAsJsonObject();
 //{ 'data': [ "defaultName"....."id"
JsonArray data = response.getAsJsonArray("data");
for (int i =0; i&lt; data.size(); i++) {
	JsonElement element = (JsonObject) data.get(i);
	if (element.isJsonObject()) {
		JsonObject item = element.getAsJsonObject();
		if(item.get("defaultName").getAsString().equals(vars.get("fileName"))) {
			vars.put("FILE_ID", item.get("id").getAsString());
			log.debug("FILE_ID=" + item.get("id").getAsString());
			vars.put("FILE_DEL","1");
			break;
		}
	}
}

log.debug("FILE_ID=" + vars.get("FILE_ID"));
if (vars.get("FILE_ID") == null) {
	log.debug("file did not exist on cm.  Proceed with upload");	
}</stringProp>
                </JSR223PostProcessor>
                <hashTree />
              </hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ assign file_dir and file_ext">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${fileupload_data_dir}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//the variable naming conventions are getting out of hand
groupDirName = "";
if ("true".equals(vars.get("isDirectory"))) {
	groupDirName = "/" + vars.get("group_name");
}

vars.put("file_dir",args[0] + groupDirName + "/" + vars.get("fileName"))

//"C:\\eclipse_work\\jmeterBranched3\\jmeter_main\\testFragments\\watson_analytics\\utilities\\splitBinaryFiles\\XLS_50000rows50cols.xls")

vars.put("file_ext",vars.get("file_dir").substring(vars.get("file_dir").lastIndexOf(".")))

fileSeparator = ""
if(vars.get("file_dir").lastIndexOf("/") == -1){
    //using File.separator doesn't always work - user input may vary
    fileSeparator = "\\"
}else{
    fileSeparator = "/"
}

vars.put("fileName",vars.get("file_dir").substring(vars.get("file_dir").lastIndexOf(fileSeparator)+1))


if(vars.get("file_ext") == ".xls" || vars.get("file_ext") == ".csv"){
	vars.put("segmentContentType","application/vnd.ms-excel")
}else if(vars.get("file_ext") == ".xlsx"){
	vars.put("segmentContentType","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
}else if(vars.get("file_ext") == ".zip"){
	vars.put("segmentContentType","application/zip")
}else if(vars.get("file_ext") == ".gzip"){
	vars.put("segmentContentType","application/x-gtar")
}else {
	vars.put("segmentContentType","application/vnd.ms-excel")
}

</stringProp>
              </JSR223Sampler>
              <hashTree />
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If Controller check if the file has been uploaded.  If so delete it">
                <stringProp name="IfController.condition">${__groovy("${FILE_DEL}"=="1")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ delete the file that exists">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="force">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">force</stringProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="recursive">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">recursive</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding" />
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${FILE_ID}</stringProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Host">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value"> application/json</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value"> gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value"> application/json</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value"> http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Length">
                        <stringProp name="Header.name">Content-Length</stringProp>
                        <stringProp name="Header.value"> 24862477</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Connection">
                        <stringProp name="Header.name">Connection</stringProp>
                        <stringProp name="Header.value"> keep-alive</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                </hashTree>
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="upload" />
              <hashTree>
                <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}Initializing_filename_${fileName}">
                  <stringProp name="TestPlan.comments">Initialing the file to upload</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create file">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding" />
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files?filename=${fileName}&amp;async=true</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="Host">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Language">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Encoding">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value"> gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Content-Type">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="X-Requested-With">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Referer">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Connection">
                          <stringProp name="Header.name">Connection</stringProp>
                          <stringProp name="Header.value"> keep-alive</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract segmentId">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">segmentId</stringProp>
                      <stringProp name="RegexExtractor.regex">\d+</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                    </RegexExtractor>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract X-CA-Affinity">
                      <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                      <stringProp name="RegexExtractor.refname">XCAAffinityHeader</stringProp>
                      <stringProp name="RegexExtractor.regex">X-CA-Affinity: (\d+)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default" />
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                    </RegexExtractor>
                    <hashTree />
                  </hashTree>
                </hashTree>
                <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}segment/chunk10MB_${fileName}">
                  <stringProp name="TestPlan.comments">Segment the file into 10MB chunks</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Read in 10mb chunks and create PUT">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">BufferedInputStream bis = new BufferedInputStream(new FileInputStream(new File(vars.get("file_dir"))));
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug("Available bytes: " + Integer.toString(numBytesAvail));
log.debug("Bytes read: " + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default, US-ASCII
	vars.put("fileSegmentBuffer",new String(Arrays.copyOfRange(buffer, 0, bytesRead), "ISO-8859-1"));
	vars.put("moreSegments","true");
	vars.putObject("inputStream",bis);
}else{
	vars.put("moreSegments","false");
}

vars.put("segmentCounter","1");

/*
 * Read using a 'read' character approach
File file = new File(vars.get("file_dir"));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
InputStreamReader isr = new InputStreamReader(inputStream);
char[] buffer = new char[bufferSize];
isr.read(buffer);

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	vars.put("fileSegmentBuffer",byteStr);
	vars.put("moreSegments","true");
	vars.putObject("fileInputStream",isr);
}else{
	vars.put("moreSegments","false");
}

vars.put("segmentCounter","1");
*/

/* Read using a 'read byte' approach
 
File file = new File(vars.get("file_dir"));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	String byteStr = new String(buffer);
	vars.put("fileSegmentBuffer",byteStr);
	vars.put("moreSegments","true");
	
	vars.putObject("fileInputStream",inputStream);
}else{
	vars.put("moreSegments","false");
}

vars.put("segmentCounter","1");
*/</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                  <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="Submit each segment of file">
                    <stringProp name="WhileController.condition">${__groovy("${moreSegments}")}</stringProp>
                  </WhileController>
                  <hashTree>
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT chunk to server">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp elementType="HTTPArgument" name="">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${fileSegmentBuffer}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=${segmentCounter}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="Host">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept-Language">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept-Encoding">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value"> gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Content-Type">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">${segmentContentType}</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Referer">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Connection">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value"> keep-alive</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="X-CA-Affinity">
                            <stringProp name="Header.name">X-CA-Affinity</stringProp>
                            <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Read next 10mb chunk">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">BufferedInputStream bis = vars.getObject("inputStream");
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug("Available bytes: " + Integer.toString(numBytesAvail));
log.debug("Bytes read: " + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default(UTF-8), US-ASCII
	vars.put("fileSegmentBuffer",new String(Arrays.copyOfRange(buffer, 0, bytesRead), "ISO-8859-1"));
	vars.put("moreSegments","true");
	vars.putObject("inputStream",bis);
}else{
	vars.put("moreSegments","false");
	bis.close();
}


/*
 * Read using a 'read character' approach
InputStreamReader isr = vars.getObject("fileInputStream");
int bufferSize = 10485760; //10mb - this number in bytes
char[] buffer = new char[bufferSize];
int readState = isr.read(buffer);
log.debug(isr.getEncoding());

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	//String byteStr = buffer.toString();
	vars.put("fileSegmentBuffer",byteStr);
	vars.put("moreSegments","true");
}else{
	vars.put("moreSegments","false");
	isr.close();
}
*/

/*
 * Read using a 'read byte' approach

FileInputStream inputStream = vars.getObject("fileInputStream");
log.debug(Integer.toString(inputStream.available()));
int bufferSize = 10485760; //10mb - this number in bytes
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	vars.put("fileSegmentBuffer",new String(buffer));
	vars.put("moreSegments","true");
}else{
	vars.put("moreSegments","false");
	inputStream.close();
}
*/
</stringProp>
                      </JSR223PostProcessor>
                      <hashTree />
                      <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ increment segmentCounter">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">vars.put("segmentCounter",Integer.toString(Integer.parseInt(vars.get("segmentCounter"))+1))</stringProp>
                      </JSR223PostProcessor>
                      <hashTree />
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ retreive taskID from PUTted file">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding" />
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=-1</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="Host">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Language">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Encoding">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value"> gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="X-Requested-With">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Referer">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Connection">
                          <stringProp name="Header.name">Connection</stringProp>
                          <stringProp name="Header.value"> keep-alive</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="X-CA-Affinity">
                          <stringProp name="Header.name">X-CA-Affinity</stringProp>
                          <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract taskID (task id)">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">TASK_ID</stringProp>
                      <stringProp name="RegexExtractor.regex">taskID":"(.+)"</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                    </RegexExtractor>
                    <hashTree />
                  </hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Instantiate REFRESH_DONE=0 and taskTimestamp">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">//This is an internally used variable, so instantiating it here instead of in test plan
vars.put("REFRESH_DONE","0");
vars.put("taskTimestamp",String.valueOf(System.currentTimeMillis()));</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset uploadTimer">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put("uploadTimer", "0");
vars.put("uploadTimeNotReached", "true");
//vars.put("REFRESH_DONE", "0");</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                </hashTree>
                <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_analyzing_${fileName}">
                  <stringProp name="TestPlan.comments">Performing the metadata tasks durning the Analyzing phaze</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="While the data is uploading">
                    <stringProp name="WhileController.condition">${__groovy("${REFRESH_DONE}"=="0")}</stringProp>
                  </WhileController>
                  <hashTree>
                    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update uploadTimer">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">int uploadTimer = Integer.parseInt(vars.get("uploadTimer"));
uploadTimer = uploadTimer + 1;
if (uploadTimer &gt;= 2700) {
	log.error("upload attempt limit reached");
	vars.put("REFRESH_DONE", "-1");
	vars.put("uploadTimeNotReached", "false");
}
vars.put("uploadTimer", "" + uploadTimer);
</stringProp>
                    </JSR223Sampler>
                    <hashTree />
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] Refresh upload completion status">
                      <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments">
                          <elementProp elementType="HTTPArgument" name="_">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${taskTimestamp}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/tasks/${TASK_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="X-CA-Affinity">
                            <stringProp name="Header.name">X-CA-Affinity</stringProp>
                            <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Check response of completion status check">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">if(prev.getResponseDataAsString().contains("\"state\":\"SUCCESS\"")){
	vars.put("REFRESH_DONE","1");
}
if(prev.getResponseDataAsString().contains("\"state\":\"NOT_AVAILABLE\"")){
	vars.put("REFRESH_DONE","-1");
}
                      </stringProp>
                      </JSR223PostProcessor>
                      <hashTree />
                      <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="/ Time between checking refresh status">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </ConstantTimer>
                      <hashTree />
                      <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract BASE_MOD_ID (base module ID)">
                        <stringProp name="TestPlan.comments">this is needed to to extract the base module id so that we know when the task is finished</stringProp>
                        <stringProp name="JSONPostProcessor.referenceNames">BASE_MOD_ID</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers" />
                        <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                      </JSONPostProcessor>
                      <hashTree />
                      <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Increment tasktTimestamp">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">vars.put("taskTimestamp", String.valueOf(Long.parseLong(vars.get("taskTimestamp"))+1));</stringProp>
                      </JSR223PostProcessor>
                      <hashTree />
                    </hashTree>
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="/ Response Assertion file upload complete">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1444">-1</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">20</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">REFRESH_DONE</stringProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
                <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ If Controller check if upload failed">
                  <stringProp name="IfController.condition">${__groovy("${REFRESH_DONE}"=="1")}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_save_${fileName}">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields=*">
                      <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp elementType="HTTPArgument" name="fields">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">*</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">fields</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="359487">${fileName}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.custom_message" />
                      </ResponseAssertion>
                      <hashTree />
                    </hashTree>
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields">
                      <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp elementType="HTTPArgument" name="fields">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">defaultName,owner.defaultName,ancestors,permissions,hidden,disabled</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">fields</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="359487">${fileName}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.custom_message" />
                      </ResponseAssertion>
                      <hashTree />
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If Controller check if the file has been uploaded.  If so delete it">
                <stringProp name="IfController.condition">${__groovy("${FILE_DEL}"=="1")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ delete the file that exists">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="force">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">force</stringProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="recursive">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">recursive</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding" />
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${FILE_ID}</stringProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Host">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value"> application/json</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value"> gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value"> application/json</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value"> http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Length">
                        <stringProp name="Header.name">Content-Length</stringProp>
                        <stringProp name="Header.value"> 24862477</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Connection">
                        <stringProp name="Header.name">Connection</stringProp>
                        <stringProp name="Header.value"> keep-alive</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="only replace and append">
          <stringProp name="IfController.condition">${__groovy("${type}"=="file_replace_append")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="file_replace_append" />
          <hashTree>
            <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each file">
              <stringProp name="ForeachController.inputVal">filenames</stringProp>
              <stringProp name="ForeachController.returnVal">fileName</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">${filenames_matchNr}</stringProp>
            </ForeachController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ check if file exists">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">userInterfaces,owner.id,defaultName,disabled,hidden,permissions,runInAdvancedViewer,canBurst,userInterfaces,extensions,iconURI,defaultScreenTip</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.my_folders/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Delete existing file before uploading new one">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;
vars.put("FILE_DEL","0"); // this is used later to check whether to delete already existing file 
JsonStreamParser jsonStreamReader = new JsonStreamParser(prev.getResponseDataAsString());
String jsonStr = prev.getResponseDataAsString();
JsonElement response = new JsonStreamParser(jsonStr).next().getAsJsonObject();
 //{ 'data': [ "defaultName"....."id"
JsonArray data = response.getAsJsonArray("data");
for (int i =0; i&lt; data.size(); i++) {
	JsonElement element = (JsonObject) data.get(i);
	if (element.isJsonObject()) {
		JsonObject item = element.getAsJsonObject();
		if(item.get("defaultName").getAsString().equals(vars.get("fileName"))) {
			vars.put("FILE_ID", item.get("id").getAsString());
			log.debug("FILE_ID=" + item.get("id").getAsString());
			vars.put("FILE_DEL","1");
			break;
		}
	}
}

log.debug("FILE_ID=" + vars.get("FILE_ID"));
if (vars.get("FILE_ID") == null) {
	log.debug("file did not exist on cm.  Proceed with upload");	
}</stringProp>
                </JSR223PostProcessor>
                <hashTree />
              </hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ assign file_dir and file_ext">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${fileupload_data_dir}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//the variable naming conventions are getting out of hand
groupDirName = "";
if ("true".equals(vars.get("isDirectory"))) {
	groupDirName = "/" + vars.get("group_name");
}

vars.put("file_dir",args[0] + groupDirName + "/" + vars.get("fileName"))

//"C:\\eclipse_work\\jmeterBranched3\\jmeter_main\\testFragments\\watson_analytics\\utilities\\splitBinaryFiles\\XLS_50000rows50cols.xls")

vars.put("file_ext",vars.get("file_dir").substring(vars.get("file_dir").lastIndexOf(".")))

fileSeparator = ""
if(vars.get("file_dir").lastIndexOf("/") == -1){
    //using File.separator doesn't always work - user input may vary
    fileSeparator = "\\"
}else{
    fileSeparator = "/"
}

vars.put("fileName",vars.get("file_dir").substring(vars.get("file_dir").lastIndexOf(fileSeparator)+1))


if(vars.get("file_ext") == ".xls" || vars.get("file_ext") == ".csv"){
	vars.put("segmentContentType","application/vnd.ms-excel")
}else if(vars.get("file_ext") == ".xlsx"){
	vars.put("segmentContentType","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
}else if(vars.get("file_ext") == ".zip"){
	vars.put("segmentContentType","application/zip")
}else if(vars.get("file_ext") == ".gzip"){
	vars.put("segmentContentType","application/x-gtar")
}else {
	vars.put("segmentContentType","application/vnd.ms-excel")
}
</stringProp>
              </JSR223Sampler>
              <hashTree />
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If Controller check if the file has been uploaded.  If so delete it">
                <stringProp name="IfController.condition">${__groovy("${FILE_DEL}"=="1")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ delete the file that exists">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp elementType="HTTPArgument" name="force">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">force</stringProp>
                      </elementProp>
                      <elementProp elementType="HTTPArgument" name="recursive">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">recursive</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding" />
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${FILE_ID}</stringProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Host">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value"> application/json</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value"> gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value"> application/json</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value"> http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Content-Length">
                        <stringProp name="Header.name">Content-Length</stringProp>
                        <stringProp name="Header.value"> 24862477</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Connection">
                        <stringProp name="Header.name">Connection</stringProp>
                        <stringProp name="Header.value"> keep-alive</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                </hashTree>
              </hashTree>
              <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for upload file if no existing file">
                <stringProp name="IfController.condition">${__groovy("${FILE_DEL}"=="1")}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree />
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="upload" />
              <hashTree>
                <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}Initializing_filename_${fileName}">
                  <stringProp name="TestPlan.comments">Initialing the file to upload</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create file">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding" />
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files?filename=${fileName}&amp;async=true</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="Host">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Language">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Encoding">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value"> gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Content-Type">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="X-Requested-With">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Referer">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Connection">
                          <stringProp name="Header.name">Connection</stringProp>
                          <stringProp name="Header.value"> keep-alive</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract segmentId">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">segmentId</stringProp>
                      <stringProp name="RegexExtractor.regex">\d+</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                    </RegexExtractor>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract X-CA-Affinity">
                      <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                      <stringProp name="RegexExtractor.refname">XCAAffinityHeader</stringProp>
                      <stringProp name="RegexExtractor.regex">X-CA-Affinity: (\d+)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default" />
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                    </RegexExtractor>
                    <hashTree />
                  </hashTree>
                </hashTree>
                <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}segment/chunk10MB_${fileName}">
                  <stringProp name="TestPlan.comments">Segment the file into 10MB chunks</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Read in 10mb chunks and create PUT">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">BufferedInputStream bis = new BufferedInputStream(new FileInputStream(new File(vars.get("file_dir"))));
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug("Available bytes: " + Integer.toString(numBytesAvail));
log.debug("Bytes read: " + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default, US-ASCII
	vars.put("fileSegmentBuffer",new String(Arrays.copyOfRange(buffer, 0, bytesRead), "ISO-8859-1"));
	vars.put("moreSegments","true");
	vars.putObject("inputStream",bis);
}else{
	vars.put("moreSegments","false");
}

vars.put("segmentCounter","1");

/*
 * Read using a 'read' character approach
File file = new File(vars.get("file_dir"));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
InputStreamReader isr = new InputStreamReader(inputStream);
char[] buffer = new char[bufferSize];
isr.read(buffer);

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	vars.put("fileSegmentBuffer",byteStr);
	vars.put("moreSegments","true");
	vars.putObject("fileInputStream",isr);
}else{
	vars.put("moreSegments","false");
}

vars.put("segmentCounter","1");
*/

/* Read using a 'read byte' approach
 
File file = new File(vars.get("file_dir"));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	String byteStr = new String(buffer);
	vars.put("fileSegmentBuffer",byteStr);
	vars.put("moreSegments","true");
	
	vars.putObject("fileInputStream",inputStream);
}else{
	vars.put("moreSegments","false");
}

vars.put("segmentCounter","1");
*/</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                  <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="Submit each segment of file">
                    <stringProp name="WhileController.condition">${__groovy("${moreSegments}")}</stringProp>
                  </WhileController>
                  <hashTree>
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT chunk to server">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp elementType="HTTPArgument" name="">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${fileSegmentBuffer}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=${segmentCounter}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="Host">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept-Language">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept-Encoding">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value"> gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Content-Type">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">${segmentContentType}</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Referer">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Connection">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value"> keep-alive</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="X-CA-Affinity">
                            <stringProp name="Header.name">X-CA-Affinity</stringProp>
                            <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Read next 10mb chunk">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">BufferedInputStream bis = vars.getObject("inputStream");
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug("Available bytes: " + Integer.toString(numBytesAvail));
log.debug("Bytes read: " + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default(UTF-8), US-ASCII
	vars.put("fileSegmentBuffer",new String(Arrays.copyOfRange(buffer, 0, bytesRead), "ISO-8859-1"));
	vars.put("moreSegments","true");
	vars.putObject("inputStream",bis);
}else{
	vars.put("moreSegments","false");
	bis.close();
}


/*
 * Read using a 'read character' approach
InputStreamReader isr = vars.getObject("fileInputStream");
int bufferSize = 10485760; //10mb - this number in bytes
char[] buffer = new char[bufferSize];
int readState = isr.read(buffer);
log.debug(isr.getEncoding());

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	//String byteStr = buffer.toString();
	vars.put("fileSegmentBuffer",byteStr);
	vars.put("moreSegments","true");
}else{
	vars.put("moreSegments","false");
	isr.close();
}
*/

/*
 * Read using a 'read byte' approach

FileInputStream inputStream = vars.getObject("fileInputStream");
log.debug(Integer.toString(inputStream.available()));
int bufferSize = 10485760; //10mb - this number in bytes
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	vars.put("fileSegmentBuffer",new String(buffer));
	vars.put("moreSegments","true");
}else{
	vars.put("moreSegments","false");
	inputStream.close();
}
*/
</stringProp>
                      </JSR223PostProcessor>
                      <hashTree />
                      <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ increment segmentCounter">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">vars.put("segmentCounter",Integer.toString(Integer.parseInt(vars.get("segmentCounter"))+1))</stringProp>
                      </JSR223PostProcessor>
                      <hashTree />
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ retreive taskID from PUTted file">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding" />
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=-1</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="Host">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Language">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Encoding">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value"> gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="X-Requested-With">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Referer">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Connection">
                          <stringProp name="Header.name">Connection</stringProp>
                          <stringProp name="Header.value"> keep-alive</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="X-CA-Affinity">
                          <stringProp name="Header.name">X-CA-Affinity</stringProp>
                          <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract taskID (task id)">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">TASK_ID</stringProp>
                      <stringProp name="RegexExtractor.regex">taskID":"(.+)"</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                    </RegexExtractor>
                    <hashTree />
                  </hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Instantiate REFRESH_DONE=0 and taskTimestamp">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">//This is an internally used variable, so instantiating it here instead of in test plan
vars.put("REFRESH_DONE","0");
vars.put("taskTimestamp",String.valueOf(System.currentTimeMillis()));</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset uploadTimer">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put("uploadTimer", "0");
vars.put("uploadTimeNotReached", "true");
//vars.put("REFRESH_DONE", "0");</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                </hashTree>
                <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_analyzing_${fileName}">
                  <stringProp name="TestPlan.comments">Performing the metadata tasks durning the Analyzing phaze</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="While the data is uploading">
                    <stringProp name="WhileController.condition">${__groovy("${REFRESH_DONE}"=="0")}</stringProp>
                  </WhileController>
                  <hashTree>
                    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update uploadTimer">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">int uploadTimer = Integer.parseInt(vars.get("uploadTimer"));
uploadTimer = uploadTimer + 1;
if (uploadTimer &gt;= 2700) {
	log.error("upload attempt limit reached");
	vars.put("REFRESH_DONE", "-1");
	vars.put("uploadTimeNotReached", "false");
}
vars.put("uploadTimer", "" + uploadTimer);
</stringProp>
                    </JSR223Sampler>
                    <hashTree />
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] Refresh upload completion status">
                      <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments">
                          <elementProp elementType="HTTPArgument" name="_">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${taskTimestamp}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/tasks/${TASK_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="X-CA-Affinity">
                            <stringProp name="Header.name">X-CA-Affinity</stringProp>
                            <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Check response of completion status check">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">if(prev.getResponseDataAsString().contains("\"state\":\"SUCCESS\"")){
	vars.put("REFRESH_DONE","1");
}
if(prev.getResponseDataAsString().contains("\"state\":\"NOT_AVAILABLE\"")){
	vars.put("REFRESH_DONE","-1");
}
                      </stringProp>
                      </JSR223PostProcessor>
                      <hashTree />
                      <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="/ Time between checking refresh status">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </ConstantTimer>
                      <hashTree />
                      <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract BASE_MOD_ID (base module ID)">
                        <stringProp name="TestPlan.comments">this is needed to to extract the base module id so that we know when the task is finished</stringProp>
                        <stringProp name="JSONPostProcessor.referenceNames">BASE_MOD_ID</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers" />
                        <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                      </JSONPostProcessor>
                      <hashTree />
                      <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Increment tasktTimestamp">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">vars.put("taskTimestamp", String.valueOf(Long.parseLong(vars.get("taskTimestamp"))+1));</stringProp>
                      </JSR223PostProcessor>
                      <hashTree />
                    </hashTree>
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="/ Response Assertion file upload complete">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1444">-1</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">20</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">REFRESH_DONE</stringProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
                <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ If Controller check if upload failed">
                  <stringProp name="IfController.condition">${__groovy("${REFRESH_DONE}"=="1")}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_save_${fileName}">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields=*">
                      <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp elementType="HTTPArgument" name="fields">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">*</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">fields</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="359487">${fileName}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.custom_message" />
                      </ResponseAssertion>
                      <hashTree />
                    </hashTree>
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields">
                      <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp elementType="HTTPArgument" name="fields">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">defaultName,owner.defaultName,ancestors,permissions,hidden,disabled</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">fields</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="359487">${fileName}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.custom_message" />
                      </ResponseAssertion>
                      <hashTree />
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="file_replace" />
              <hashTree>
                <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}Initializing_filename_${fileName}_replacefile">
                  <stringProp name="TestPlan.comments">Initialing the file to upload</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" filetoUpload">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding" />
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files?filename=${fileName}&amp;async=true</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="Host">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Language">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Encoding">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value"> gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Content-Type">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="X-Requested-With">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Referer">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Connection">
                          <stringProp name="Header.name">Connection</stringProp>
                          <stringProp name="Header.value"> keep-alive</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Id">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">Id</stringProp>
                      <stringProp name="RegexExtractor.regex">"id":"(.+)"</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                    </RegexExtractor>
                    <hashTree />
                    <RegexExtractor enabled="false" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract X-CA-Affinity">
                      <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                      <stringProp name="RegexExtractor.refname">XCAAffinityHeader</stringProp>
                      <stringProp name="RegexExtractor.regex">X-CA-Affinity: (\d+)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default" />
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                    </RegexExtractor>
                    <hashTree />
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="51517">409</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message" />
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">true</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="replace file">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding" />
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/${Id}?filename=${fileName}&amp;async=true</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                    <stringProp name="TestPlan.comments">metadata/files/i7AC151A416B64901AB61D3030E6BD349?filename=NFL_3Sheet.xlsx&amp;async=true</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="Host">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Language">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Encoding">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value"> gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Content-Type">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="X-Requested-With">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Referer">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Connection">
                          <stringProp name="Header.name">Connection</stringProp>
                          <stringProp name="Header.value"> keep-alive</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract segmentId">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">segmentId</stringProp>
                      <stringProp name="RegexExtractor.regex">\d+</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                    </RegexExtractor>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract X-CA-Affinity">
                      <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                      <stringProp name="RegexExtractor.refname">XCAAffinityHeader</stringProp>
                      <stringProp name="RegexExtractor.regex">X-CA-Affinity: (\d+)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default" />
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                    </RegexExtractor>
                    <hashTree />
                  </hashTree>
                </hashTree>
                <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}segment/chunk10MB_${fileName}_replacefile">
                  <stringProp name="TestPlan.comments">Segment the file into 10MB chunks</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Read in 10mb chunks and create PUT">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">BufferedInputStream bis = new BufferedInputStream(new FileInputStream(new File(vars.get("file_dir"))));
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug("Available bytes: " + Integer.toString(numBytesAvail));
log.debug("Bytes read: " + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default, US-ASCII
	vars.put("fileSegmentBuffer",new String(Arrays.copyOfRange(buffer, 0, bytesRead), "ISO-8859-1"));
	vars.put("moreSegments","true");
	vars.putObject("inputStream",bis);
}else{
	vars.put("moreSegments","false");
}

vars.put("segmentCounter","1");

/*
 * Read using a 'read' character approach
File file = new File(vars.get("file_dir"));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
InputStreamReader isr = new InputStreamReader(inputStream);
char[] buffer = new char[bufferSize];
isr.read(buffer);

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	vars.put("fileSegmentBuffer",byteStr);
	vars.put("moreSegments","true");
	vars.putObject("fileInputStream",isr);
}else{
	vars.put("moreSegments","false");
}

vars.put("segmentCounter","1");
*/

/* Read using a 'read byte' approach
 
File file = new File(vars.get("file_dir"));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	String byteStr = new String(buffer);
	vars.put("fileSegmentBuffer",byteStr);
	vars.put("moreSegments","true");
	
	vars.putObject("fileInputStream",inputStream);
}else{
	vars.put("moreSegments","false");
}

vars.put("segmentCounter","1");
*/</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                  <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="Submit each segment of file for replacefile">
                    <stringProp name="WhileController.condition">${__groovy("${moreSegments}")}</stringProp>
                  </WhileController>
                  <hashTree>
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT chunk to server">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp elementType="HTTPArgument" name="">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${fileSegmentBuffer}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=${segmentCounter}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="Host">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept-Language">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept-Encoding">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value"> gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Content-Type">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">${segmentContentType}</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Referer">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Connection">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value"> keep-alive</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="X-CA-Affinity">
                            <stringProp name="Header.name">X-CA-Affinity</stringProp>
                            <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Read next 10mb chunk">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">BufferedInputStream bis = vars.getObject("inputStream");
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug("Available bytes: " + Integer.toString(numBytesAvail));
log.debug("Bytes read: " + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default(UTF-8), US-ASCII
	vars.put("fileSegmentBuffer",new String(Arrays.copyOfRange(buffer, 0, bytesRead), "ISO-8859-1"));
	vars.put("moreSegments","true");
	vars.putObject("inputStream",bis);
}else{
	vars.put("moreSegments","false");
	bis.close();
}


/*
 * Read using a 'read character' approach
InputStreamReader isr = vars.getObject("fileInputStream");
int bufferSize = 10485760; //10mb - this number in bytes
char[] buffer = new char[bufferSize];
int readState = isr.read(buffer);
log.debug(isr.getEncoding());

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	//String byteStr = buffer.toString();
	vars.put("fileSegmentBuffer",byteStr);
	vars.put("moreSegments","true");
}else{
	vars.put("moreSegments","false");
	isr.close();
}
*/

/*
 * Read using a 'read byte' approach

FileInputStream inputStream = vars.getObject("fileInputStream");
log.debug(Integer.toString(inputStream.available()));
int bufferSize = 10485760; //10mb - this number in bytes
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	vars.put("fileSegmentBuffer",new String(buffer));
	vars.put("moreSegments","true");
}else{
	vars.put("moreSegments","false");
	inputStream.close();
}
*/
</stringProp>
                      </JSR223PostProcessor>
                      <hashTree />
                      <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ increment segmentCounter">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">vars.put("segmentCounter",Integer.toString(Integer.parseInt(vars.get("segmentCounter"))+1))</stringProp>
                      </JSR223PostProcessor>
                      <hashTree />
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ retreive taskID from PUTted file for replace file">
                    <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                      <collectionProp name="Arguments.arguments" />
                    </elementProp>
                    <stringProp name="HTTPSampler.domain" />
                    <stringProp name="HTTPSampler.port" />
                    <stringProp name="HTTPSampler.protocol" />
                    <stringProp name="HTTPSampler.contentEncoding" />
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=-1</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re" />
                    <stringProp name="HTTPSampler.connect_timeout" />
                    <stringProp name="HTTPSampler.response_timeout" />
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp elementType="Header" name="Host">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Language">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Accept-Encoding">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value"> gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="X-Requested-With">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Referer">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="Connection">
                          <stringProp name="Header.name">Connection</stringProp>
                          <stringProp name="Header.value"> keep-alive</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="X-CA-Affinity">
                          <stringProp name="Header.name">X-CA-Affinity</stringProp>
                          <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                        </elementProp>
                        <elementProp elementType="Header" name="">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree />
                    <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract taskID (task id)">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">TASK_ID</stringProp>
                      <stringProp name="RegexExtractor.regex">taskID":"(.+)"</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                    </RegexExtractor>
                    <hashTree />
                  </hashTree>
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Instantiate REFRESH_DONE=0 and taskTimestamp replace file">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">//This is an internally used variable, so instantiating it here instead of in test plan
vars.put("REFRESH_DONE","0");
vars.put("taskTimestamp",String.valueOf(System.currentTimeMillis()));</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                  <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset uploadTimer replace file">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters" />
                    <stringProp name="filename" />
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put("uploadTimer", "0");
vars.put("uploadTimeNotReached", "true");
//vars.put("REFRESH_DONE", "0");</stringProp>
                  </JSR223Sampler>
                  <hashTree />
                </hashTree>
                <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_analyzing_${fileName}_replacefile">
                  <stringProp name="TestPlan.comments">Performing the metadata tasks durning the Analyzing phaze</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="While the data is uploading for replace file">
                    <stringProp name="WhileController.condition">${__groovy("${REFRESH_DONE}"=="0")}</stringProp>
                  </WhileController>
                  <hashTree>
                    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update uploadTimer">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">int uploadTimer = Integer.parseInt(vars.get("uploadTimer"));
uploadTimer = uploadTimer + 1;
if (uploadTimer &gt;= 2700) {
	log.error("upload attempt limit reached");
	vars.put("REFRESH_DONE", "-1");
	vars.put("uploadTimeNotReached", "false");
}
vars.put("uploadTimer", "" + uploadTimer);
</stringProp>
                    </JSR223Sampler>
                    <hashTree />
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] Refresh upload completion status for replace file">
                      <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments">
                          <elementProp elementType="HTTPArgument" name="_">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${taskTimestamp}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/tasks/${TASK_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="X-CA-Affinity">
                            <stringProp name="Header.name">X-CA-Affinity</stringProp>
                            <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Check response of completion status check">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">if(prev.getResponseDataAsString().contains("\"state\":\"SUCCESS\"")){
	vars.put("REFRESH_DONE","1");
}
</stringProp>
                      </JSR223PostProcessor>
                      <hashTree />
                      <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="/ Time between checking refresh status">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </ConstantTimer>
                      <hashTree />
                      <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract BASE_MOD_ID (base module ID)">
                        <stringProp name="TestPlan.comments">this is needed to to extract the base module id so that we know when the task is finished</stringProp>
                        <stringProp name="JSONPostProcessor.referenceNames">BASE_MOD_ID</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers" />
                        <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                      </JSONPostProcessor>
                      <hashTree />
                      <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Increment tasktTimestamp">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">vars.put("taskTimestamp", String.valueOf(Long.parseLong(vars.get("taskTimestamp"))+1));</stringProp>
                      </JSR223PostProcessor>
                      <hashTree />
                    </hashTree>
                    <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="/ Response Assertion file upload complete for replace file">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1444">-1</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">20</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">REFRESH_DONE</stringProp>
                      <stringProp name="Assertion.custom_message" />
                    </ResponseAssertion>
                    <hashTree />
                  </hashTree>
                </hashTree>
                <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ If Controller check if upload failed for replace file">
                  <stringProp name="IfController.condition">${__groovy("${REFRESH_DONE}"=="1")}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_save_${fileName}_replace file">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields=*">
                      <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp elementType="HTTPArgument" name="fields">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">*</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">fields</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                      <stringProp name="TestPlan.comments">replace file</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="359487">${fileName}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.custom_message" />
                      </ResponseAssertion>
                      <hashTree />
                    </hashTree>
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields">
                      <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp elementType="HTTPArgument" name="fields">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">defaultName,owner.defaultName,ancestors,permissions,hidden,disabled</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">fields</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                      <stringProp name="TestPlan.comments">replace file</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="359487">${fileName}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.custom_message" />
                      </ResponseAssertion>
                      <hashTree />
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="file_append" />
              <hashTree>
                <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="upload for appendfile" />
                <hashTree>
                  <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}Initializing_filename_${fileName}_appendfile">
                    <stringProp name="TestPlan.comments">Initialing the file to upload</stringProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" filetoupload">
                      <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                        <collectionProp name="Arguments.arguments" />
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files?filename=${fileName}&amp;async=true</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="Host">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept-Language">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept-Encoding">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value"> gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Content-Type">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="X-Requested-With">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Referer">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Connection">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value"> keep-alive</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Id">
                        <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                        <stringProp name="RegexExtractor.refname">Id</stringProp>
                        <stringProp name="RegexExtractor.regex">"id":"(.+)"</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                      </RegexExtractor>
                      <hashTree />
                      <RegexExtractor enabled="false" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract X-CA-Affinity">
                        <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                        <stringProp name="RegexExtractor.refname">XCAAffinityHeader</stringProp>
                        <stringProp name="RegexExtractor.regex">X-CA-Affinity: (\d+)</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default" />
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                      </RegexExtractor>
                      <hashTree />
                      <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="51517">409</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.custom_message" />
                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                        <boolProp name="Assertion.assume_success">true</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                      </ResponseAssertion>
                      <hashTree />
                    </hashTree>
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Append file">
                      <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                        <collectionProp name="Arguments.arguments" />
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/append/${Id}?filename=${fileName}&amp;async=true</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="Host">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept-Language">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept-Encoding">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value"> gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Content-Type">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="X-Requested-With">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Referer">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Connection">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value"> keep-alive</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract segmentId">
                        <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                        <stringProp name="RegexExtractor.refname">segmentId</stringProp>
                        <stringProp name="RegexExtractor.regex">\d+</stringProp>
                        <stringProp name="RegexExtractor.template">$0$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                      </RegexExtractor>
                      <hashTree />
                      <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract X-CA-Affinity">
                        <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                        <stringProp name="RegexExtractor.refname">XCAAffinityHeader</stringProp>
                        <stringProp name="RegexExtractor.regex">X-CA-Affinity: (\d+)</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default" />
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                      </RegexExtractor>
                      <hashTree />
                    </hashTree>
                  </hashTree>
                  <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}segment/chunk10MB_${fileName}_appendfile">
                    <stringProp name="TestPlan.comments">Segment the file into 10MB chunks</stringProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Read in 10mb chunks and create PUT">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">BufferedInputStream bis = new BufferedInputStream(new FileInputStream(new File(vars.get("file_dir"))));
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug("Available bytes: " + Integer.toString(numBytesAvail));
log.debug("Bytes read: " + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default, US-ASCII
	vars.put("fileSegmentBuffer",new String(Arrays.copyOfRange(buffer, 0, bytesRead), "ISO-8859-1"));
	vars.put("moreSegments","true");
	vars.putObject("inputStream",bis);
}else{
	vars.put("moreSegments","false");
}

vars.put("segmentCounter","1");

/*
 * Read using a 'read' character approach
File file = new File(vars.get("file_dir"));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
InputStreamReader isr = new InputStreamReader(inputStream);
char[] buffer = new char[bufferSize];
isr.read(buffer);

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	vars.put("fileSegmentBuffer",byteStr);
	vars.put("moreSegments","true");
	vars.putObject("fileInputStream",isr);
}else{
	vars.put("moreSegments","false");
}

vars.put("segmentCounter","1");
*/

/* Read using a 'read byte' approach
 
File file = new File(vars.get("file_dir"));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	String byteStr = new String(buffer);
	vars.put("fileSegmentBuffer",byteStr);
	vars.put("moreSegments","true");
	
	vars.putObject("fileInputStream",inputStream);
}else{
	vars.put("moreSegments","false");
}

vars.put("segmentCounter","1");
*/</stringProp>
                    </JSR223Sampler>
                    <hashTree />
                    <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="Submit each segment of file for appendfile">
                      <stringProp name="WhileController.condition">${__groovy("${moreSegments}")}</stringProp>
                    </WhileController>
                    <hashTree>
                      <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT chunk to server for appendfile">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp elementType="HTTPArgument" name="">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${fileSegmentBuffer}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain" />
                        <stringProp name="HTTPSampler.port" />
                        <stringProp name="HTTPSampler.protocol" />
                        <stringProp name="HTTPSampler.contentEncoding" />
                        <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=${segmentCounter}</stringProp>
                        <stringProp name="HTTPSampler.method">PUT</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re" />
                        <stringProp name="HTTPSampler.connect_timeout" />
                        <stringProp name="HTTPSampler.response_timeout" />
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp elementType="Header" name="Host">
                              <stringProp name="Header.name">Host</stringProp>
                              <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                            </elementProp>
                            <elementProp elementType="Header" name="Accept">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value"> application/json</stringProp>
                            </elementProp>
                            <elementProp elementType="Header" name="Accept-Language">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                            </elementProp>
                            <elementProp elementType="Header" name="Accept-Encoding">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value"> gzip, deflate</stringProp>
                            </elementProp>
                            <elementProp elementType="Header" name="Content-Type">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">${segmentContentType}</stringProp>
                            </elementProp>
                            <elementProp elementType="Header" name="Referer">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                            </elementProp>
                            <elementProp elementType="Header" name="Connection">
                              <stringProp name="Header.name">Connection</stringProp>
                              <stringProp name="Header.value"> keep-alive</stringProp>
                            </elementProp>
                            <elementProp elementType="Header" name="">
                              <stringProp name="Header.name">Origin</stringProp>
                              <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                            </elementProp>
                            <elementProp elementType="Header" name="X-CA-Affinity">
                              <stringProp name="Header.name">X-CA-Affinity</stringProp>
                              <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree />
                        <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Read next 10mb chunk">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters" />
                          <stringProp name="filename" />
                          <stringProp name="cacheKey">true</stringProp>
                          <stringProp name="script">BufferedInputStream bis = vars.getObject("inputStream");
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug("Available bytes: " + Integer.toString(numBytesAvail));
log.debug("Bytes read: " + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default(UTF-8), US-ASCII
	vars.put("fileSegmentBuffer",new String(Arrays.copyOfRange(buffer, 0, bytesRead), "ISO-8859-1"));
	vars.put("moreSegments","true");
	vars.putObject("inputStream",bis);
}else{
	vars.put("moreSegments","false");
	bis.close();
}


/*
 * Read using a 'read character' approach
InputStreamReader isr = vars.getObject("fileInputStream");
int bufferSize = 10485760; //10mb - this number in bytes
char[] buffer = new char[bufferSize];
int readState = isr.read(buffer);
log.debug(isr.getEncoding());

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	//String byteStr = buffer.toString();
	vars.put("fileSegmentBuffer",byteStr);
	vars.put("moreSegments","true");
}else{
	vars.put("moreSegments","false");
	isr.close();
}
*/

/*
 * Read using a 'read byte' approach

FileInputStream inputStream = vars.getObject("fileInputStream");
log.debug(Integer.toString(inputStream.available()));
int bufferSize = 10485760; //10mb - this number in bytes
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	vars.put("fileSegmentBuffer",new String(buffer));
	vars.put("moreSegments","true");
}else{
	vars.put("moreSegments","false");
	inputStream.close();
}
*/
</stringProp>
                        </JSR223PostProcessor>
                        <hashTree />
                        <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ increment segmentCounter">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters" />
                          <stringProp name="filename" />
                          <stringProp name="cacheKey">true</stringProp>
                          <stringProp name="script">vars.put("segmentCounter",Integer.toString(Integer.parseInt(vars.get("segmentCounter"))+1))</stringProp>
                        </JSR223PostProcessor>
                        <hashTree />
                      </hashTree>
                    </hashTree>
                    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ retreive taskID from PUTted file for appendfile">
                      <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                        <collectionProp name="Arguments.arguments" />
                      </elementProp>
                      <stringProp name="HTTPSampler.domain" />
                      <stringProp name="HTTPSampler.port" />
                      <stringProp name="HTTPSampler.protocol" />
                      <stringProp name="HTTPSampler.contentEncoding" />
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=-1</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re" />
                      <stringProp name="HTTPSampler.connect_timeout" />
                      <stringProp name="HTTPSampler.response_timeout" />
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp elementType="Header" name="Host">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept-Language">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Accept-Encoding">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value"> gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="X-Requested-With">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Referer">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="Connection">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value"> keep-alive</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="X-CA-Affinity">
                            <stringProp name="Header.name">X-CA-Affinity</stringProp>
                            <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                          </elementProp>
                          <elementProp elementType="Header" name="">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree />
                      <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract taskID (task id)">
                        <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                        <stringProp name="RegexExtractor.refname">TASK_ID</stringProp>
                        <stringProp name="RegexExtractor.regex">taskID":"(.+)"</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                      </RegexExtractor>
                      <hashTree />
                    </hashTree>
                    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Instantiate REFRESH_DONE=0 and taskTimestamp">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">//This is an internally used variable, so instantiating it here instead of in test plan
vars.put("REFRESH_DONE","0");
vars.put("taskTimestamp",String.valueOf(System.currentTimeMillis()));</stringProp>
                    </JSR223Sampler>
                    <hashTree />
                    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset uploadTimer">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters" />
                      <stringProp name="filename" />
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put("uploadTimer", "0");
vars.put("uploadTimeNotReached", "true");
//vars.put("REFRESH_DONE", "0");</stringProp>
                    </JSR223Sampler>
                    <hashTree />
                  </hashTree>
                  <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_analyzing_${fileName}_appendfile">
                    <stringProp name="TestPlan.comments">Performing the metadata tasks durning the Analyzing phaze</stringProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="While the data is uploading appendfile">
                      <stringProp name="WhileController.condition">${__groovy("${REFRESH_DONE}"=="0")}</stringProp>
                    </WhileController>
                    <hashTree>
                      <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update uploadTimer">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters" />
                        <stringProp name="filename" />
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">int uploadTimer = Integer.parseInt(vars.get("uploadTimer"));
uploadTimer = uploadTimer + 1;
if (uploadTimer &gt;= 2700) {
	log.error("upload attempt limit reached");
	vars.put("REFRESH_DONE", "-1");
	vars.put("uploadTimeNotReached", "false");
}
vars.put("uploadTimer", "" + uploadTimer);
</stringProp>
                      </JSR223Sampler>
                      <hashTree />
                      <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] Refresh upload completion status for appendfile">
                        <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
                          <collectionProp name="Arguments.arguments">
                            <elementProp elementType="HTTPArgument" name="_">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${taskTimestamp}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">_</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain" />
                        <stringProp name="HTTPSampler.port" />
                        <stringProp name="HTTPSampler.protocol" />
                        <stringProp name="HTTPSampler.contentEncoding" />
                        <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/tasks/${TASK_ID}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re" />
                        <stringProp name="HTTPSampler.connect_timeout" />
                        <stringProp name="HTTPSampler.response_timeout" />
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp elementType="Header" name="">
                              <stringProp name="Header.name">X-Requested-With</stringProp>
                              <stringProp name="Header.value">XMLHttpRequest</stringProp>
                            </elementProp>
                            <elementProp elementType="Header" name="X-CA-Affinity">
                              <stringProp name="Header.name">X-CA-Affinity</stringProp>
                              <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree />
                        <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Check response of completion status check">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters" />
                          <stringProp name="filename" />
                          <stringProp name="cacheKey">true</stringProp>
                          <stringProp name="script">if(prev.getResponseDataAsString().contains("\"state\":\"SUCCESS\"")){
	vars.put("REFRESH_DONE","1");
}
</stringProp>
                        </JSR223PostProcessor>
                        <hashTree />
                        <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="/ Time between checking refresh status">
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                        </ConstantTimer>
                        <hashTree />
                        <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract BASE_MOD_ID (base module ID)">
                          <stringProp name="TestPlan.comments">this is needed to to extract the base module id so that we know when the task is finished</stringProp>
                          <stringProp name="JSONPostProcessor.referenceNames">BASE_MOD_ID</stringProp>
                          <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.id</stringProp>
                          <stringProp name="JSONPostProcessor.match_numbers" />
                          <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                        </JSONPostProcessor>
                        <hashTree />
                        <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Increment tasktTimestamp">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters" />
                          <stringProp name="filename" />
                          <stringProp name="cacheKey">true</stringProp>
                          <stringProp name="script">vars.put("taskTimestamp", String.valueOf(Long.parseLong(vars.get("taskTimestamp"))+1));</stringProp>
                        </JSR223PostProcessor>
                        <hashTree />
                      </hashTree>
                      <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="/ Response Assertion file upload complete">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1444">-1</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">20</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">REFRESH_DONE</stringProp>
                        <stringProp name="Assertion.custom_message" />
                      </ResponseAssertion>
                      <hashTree />
                    </hashTree>
                  </hashTree>
                  <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="/ If Controller check if upload failed for appendfile">
                    <stringProp name="IfController.condition">${__groovy("${REFRESH_DONE}"=="1")}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_save_${fileName}_appendfile">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields=*">
                        <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp elementType="HTTPArgument" name="fields">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">*</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">fields</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain" />
                        <stringProp name="HTTPSampler.port" />
                        <stringProp name="HTTPSampler.protocol" />
                        <stringProp name="HTTPSampler.contentEncoding" />
                        <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re" />
                        <stringProp name="HTTPSampler.connect_timeout" />
                        <stringProp name="HTTPSampler.response_timeout" />
                        <stringProp name="TestPlan.comments">append file</stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp elementType="Header" name="">
                              <stringProp name="Header.name">X-Requested-With</stringProp>
                              <stringProp name="Header.value">XMLHttpRequest</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree />
                        <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="359487">${fileName}</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                          <stringProp name="Assertion.custom_message" />
                        </ResponseAssertion>
                        <hashTree />
                      </hashTree>
                      <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields">
                        <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp elementType="HTTPArgument" name="fields">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">defaultName,owner.defaultName,ancestors,permissions,hidden,disabled</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">fields</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain" />
                        <stringProp name="HTTPSampler.port" />
                        <stringProp name="HTTPSampler.protocol" />
                        <stringProp name="HTTPSampler.contentEncoding" />
                        <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re" />
                        <stringProp name="HTTPSampler.connect_timeout" />
                        <stringProp name="HTTPSampler.response_timeout" />
                        <stringProp name="TestPlan.comments">append file</stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp elementType="Header" name="">
                              <stringProp name="Header.name">X-Requested-With</stringProp>
                              <stringProp name="Header.value">XMLHttpRequest</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree />
                        <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="359487">${fileName}</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                          <stringProp name="Assertion.custom_message" />
                        </ResponseAssertion>
                        <hashTree />
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If content-service">
              <stringProp name="IfController.condition">${__groovy("${type}"=="content-service")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include content-service/content-service.jmx">
                </GenericController>
              <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">return vars.get("item");</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get operationName">
            <stringProp name="JSONPostProcessor.referenceNames">operationName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers" />
          </JSONPostProcessor>
          <hashTree />
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If navigate">
          <stringProp name="IfController.condition">${__groovy("${operationName}"=="navigate")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set navigation">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("item")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="set navigation">
              <stringProp name="JSONPostProcessor.referenceNames">navigation</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.parms[0].navigation</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include common/bi_navigate.jmx">
            </GenericController>
          <hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}navigate">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ prepare folder variables">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// reset the folder_counter
vars.put("folder_counter", "1");

navFromJson = vars.get("navigation")
return navFromJson;

//if (navFromJson.length() &gt; 0) {
//	String [] navigation = navFromJson.split(",");
//	String fullNavigation = "";
//	int navCount = 1;
//	for(String nav: navigation) {
//		fullNavigation += nav +" ";
//		vars.put("folders_" + navCount, nav);
//		navCount = navCount + 1;
//	}
//	log.debug("full navigation is: " + fullNavigation + " with length of " + navigation.length);
//}


</stringProp>
          </JSR223Sampler>
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get folders">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">folders</stringProp>
              <stringProp name="RegexExtractor.regex">([^,]{1,})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If folders to nav">
            <stringProp name="IfController.condition">${__groovy(${folders_matchNr} &gt; 0)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="get public folders once only" />
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get permissions on public folders">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">permissions</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.public_folders</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get public_folders">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.public_folders/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get folder_id">
                  <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${folders_1}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each folder in navigation">
              <stringProp name="ForeachController.inputVal">folders</stringProp>
              <stringProp name="ForeachController.returnVal">folder</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increase folder_counter">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${__V(folder_${folder_counter})}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">folder_counter = Integer.parseInt(vars.get("folder_counter")) + 1
vars.put("folder_counter", String.valueOf(folder_counter))
log.debug(Label + " folder is ${folder} and folder_counter is " + vars.get("folder_counter") + " next is " + args[0])
</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">permissions</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ navigate">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set last_folder_id">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">folder_id = vars.get("folder_id")
if (folder_id != null) {
	vars.put("last_folder_id", folder_id)
}
</stringProp>
                </JSR223PreProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get folder_id">
                  <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${__V(folders_${folder_counter})}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ save navigation_response">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">vars.put("navigation_response",prev.getResponseDataAsString());</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If createObject">
          <stringProp name="IfController.condition">${__groovy("${operationName}"=="createObject")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set objectToCreate">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("item")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="set objectToCreate">
              <stringProp name="JSONPostProcessor.referenceNames">objectToCreate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.parms[0]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include createObject">
            </GenericController>
          <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="createObject" />
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("objectToCreate")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectNameToCreate">
              <stringProp name="JSONPostProcessor.referenceNames">objectNameToCreate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Scope.variable">createObjectBody</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectTypeToCreate">
              <stringProp name="JSONPostProcessor.referenceNames">objectTypeToCreate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.type</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Scope.variable">createObjectBody</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cs_createObject_${objectTypeToCreate}">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__evalVar(objectToCreate)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${last_folder_id}/items</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="object created?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="save objectIdCreatedByScript">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">objectIdCreatedByScript</stringProp>
              <stringProp name="RegexExtractor.regex">Location: (.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NONE</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="save id for object named ${__evalVar(objectNameToCreate)}">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">${__evalVar(objectNameToCreate)}</stringProp>
              <stringProp name="RegexExtractor.regex">i[A-F0-9]{32}</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">objectIdCreatedByScript</stringProp>
            </RegexExtractor>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If createTreeOfFolders">
          <stringProp name="IfController.condition">${__groovy("${operationName}"=="createTreeOfFolders" || "${operationName}" == "createTreeOfFoldersSearch")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="TestPlan.comments">this doens't feel right...</stringProp>
        </IfController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("item")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="set objectToCreate">
              <stringProp name="JSONPostProcessor.referenceNames">objectToCreate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.parms[0]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="set ctof_branches">
              <stringProp name="JSONPostProcessor.referenceNames">ctof_branches</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.parms[1].branches</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="set ctof_children">
              <stringProp name="JSONPostProcessor.referenceNames">ctof_children</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.parms[1].children</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include createObject">
            </GenericController>
          <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="createObject" />
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("objectToCreate")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectNameToCreate">
              <stringProp name="JSONPostProcessor.referenceNames">objectNameToCreate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Scope.variable">createObjectBody</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectTypeToCreate">
              <stringProp name="JSONPostProcessor.referenceNames">objectTypeToCreate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.type</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Scope.variable">createObjectBody</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cs_createObject_${objectTypeToCreate}">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__evalVar(objectToCreate)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${last_folder_id}/items</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="object created?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="save objectIdCreatedByScript">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">objectIdCreatedByScript</stringProp>
              <stringProp name="RegexExtractor.regex">Location: (.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NONE</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="save id for object named ${__evalVar(objectNameToCreate)}">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">${__evalVar(objectNameToCreate)}</stringProp>
              <stringProp name="RegexExtractor.regex">i[A-F0-9]{32}</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">objectIdCreatedByScript</stringProp>
            </RegexExtractor>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ navigate">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="nav_filter">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">nav_filter</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="fields">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fields</stringProp>
                  <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}/items</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 ok?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="/ set folder_id">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__evalVar(objectNameToCreate)}</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("folder_id", vars.get(args[0]))</stringProp>
            </JSR223PreProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ set last_folder_id">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${folder_id}</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("last_folder_id", args[0])</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset ctof_branch_count">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put("ctof_branch_count", "0")</stringProp>
          </JSR223Sampler>
          <hashTree />
          <LoopController enabled="true" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop for branches">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${ctof_branches}</stringProp>
          </LoopController>
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset ctof_children_count">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("ctof_children_count", "0")</stringProp>
            </JSR223Sampler>
            <hashTree />
            <LoopController enabled="true" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop for children">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${ctof_children}</stringProp>
            </LoopController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set objectToCreate">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${ctof_branch_count} ${ctof_children_count}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">log.debug(Label + " defaultName: 'tree_${__threadNum}_" + args[0] + "_" + args[1] + "'")
vars.put("objectToCreate", "{\"defaultName\":\"tree_${__threadNum}_" + args[0] + "_" + args[1] + "\",\"type\":\"folder\"}")</stringProp>
              </JSR223Sampler>
              <hashTree />
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include createObject">
                </GenericController>
              <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="createObject" />
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("objectToCreate")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectNameToCreate">
              <stringProp name="JSONPostProcessor.referenceNames">objectNameToCreate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Scope.variable">createObjectBody</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectTypeToCreate">
              <stringProp name="JSONPostProcessor.referenceNames">objectTypeToCreate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.type</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Scope.variable">createObjectBody</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cs_createObject_${objectTypeToCreate}">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__evalVar(objectToCreate)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${last_folder_id}/items</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="object created?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="save objectIdCreatedByScript">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">objectIdCreatedByScript</stringProp>
              <stringProp name="RegexExtractor.regex">Location: (.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NONE</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="save id for object named ${__evalVar(objectNameToCreate)}">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">${__evalVar(objectNameToCreate)}</stringProp>
              <stringProp name="RegexExtractor.regex">i[A-F0-9]{32}</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">objectIdCreatedByScript</stringProp>
            </RegexExtractor>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increase ctof_children_count">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${ctof_children_count}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("ctof_children_count",
			String.valueOf(
					Integer.parseInt(args[0]) + 1
					)
		)</stringProp>
              </JSR223Sampler>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ navigate">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="nav_filter">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nav_filter</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                    <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}/items</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 ok?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="/ set folder_id">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${__eval(${objectNameToCreate})}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("folder_id", vars.get(args[0]))</stringProp>
              </JSR223PreProcessor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ set last_folder_id">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${folder_id}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("last_folder_id", args[0])</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If search enabled">
              <stringProp name="IfController.condition">${__groovy("${operationName}" == "createTreeOfFoldersSearch")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ build seachItem">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${objectNameToCreate}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def builder = new groovy.json.JsonBuilder()
def root = builder {
    type 'search'
    name 'queryUntilTimeout'
}
root.parms = []
root.parms[0] = {
	query args[0]
	datacheck args[0]
	timeout 30000
}
//assert root instanceof Map
if (!root instanceof Map) {
	SamplerResult.setResponseMessage("modelRef is " + modelRef);
	SamplerResult.setSuccessful(false);
}


vars.put("searchItem", builder.toString())</stringProp>
              </JSR223Sampler>
              <hashTree />
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include search/search.jmx">
                </GenericController>
              <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item name">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">return vars.get("searchItem")</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get name">
            <stringProp name="JSONPostProcessor.referenceNames">name</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers" />
          </JSONPostProcessor>
          <hashTree />
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If search">
          <stringProp name="IfController.condition">${__groovy("${name}"=="queryUntilTimeout")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get search details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("searchItem")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get searchParms">
              <stringProp name="JSONPostProcessor.referenceNames">searchParms</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.parms[0]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get query">
              <stringProp name="JSONPostProcessor.referenceNames">query</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.query</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">searchParms</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get datacheck">
              <stringProp name="JSONPostProcessor.referenceNames">datacheck</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.datacheck</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">searchParms</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get timeout">
              <stringProp name="JSONPostProcessor.referenceNames">timeout</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.timeout</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">searchParms</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="eval the vars">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("query", "${__evalVar(query)}")
vars.put("datacheck", "${__evalVar(datacheck)}")</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
          <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer">
            <stringProp name="ConstantTimer.delay">100</stringProp>
          </ConstantTimer>
          <hashTree />
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset successStatus">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename" />
            <stringProp name="parameters" />
            <stringProp name="script">vars.put("contentFound", "false");
vars.put("successStatus", "false");
vars.put("errorStatus", "false");
vars.putObject("pollStartTime", System.currentTimeMillis());</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree />
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="index">
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="While not found">
              <stringProp name="WhileController.condition">${__groovy("${contentFound}"=="false"  &amp;&amp; "${errorStatus}" != "true")}</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="search">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="query">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">"${query}"</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="_">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__time()}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/search/cm</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="datacheck found?">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">contentFound</stringProp>
                  <stringProp name="RegexExtractor.regex">${datacheck}</stringProp>
                  <stringProp name="RegexExtractor.template" />
                  <stringProp name="RegexExtractor.default">false</stringProp>
                  <stringProp name="RegexExtractor.match_number" />
                </RegexExtractor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 ok?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer">
                  <stringProp name="ConstantTimer.delay">100</stringProp>
                </ConstantTimer>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ check for timeout or bad response">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseCode() != "200") {
	vars.put("errorStatus", "true")
	prev.setSuccessful(false);
	prev.setErrorCount(1);
	prev.setResponseMessage("unexpected response code '" + prev.getResponseCode() + "' received from search");
}

if (System.currentTimeMillis() - (Long) vars.getObject("pollStartTime") &gt;= vars.get("timeout").toLong()) {
	vars.put("errorStatus", "true");
	prev.setResponseCode("500");
	prev.setSuccessful(false);
	prev.setErrorCount(1);
	prev.setResponseMessage("search for '" + vars.get("query") + "' is taking too long");
}</stringProp>
                </JSR223PostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increase ctof_branch_count">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${ctof_branch_count}</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("ctof_branch_count",
			String.valueOf(
					Integer.parseInt(args[0]) + 1
					)
		)</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If moveItemsToNewLocation">
          <stringProp name="IfController.condition">${__groovy("${operationName}"=="moveItemsToNewLocation" || "${operationName}"=="copyItemsToNewLocation" )}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="TestPlan.comments">this doens't feel right...</stringProp>
        </IfController>
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="navigate" />
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set from navigation">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("navigation", "ContentApps,move")</stringProp>
            </JSR223Sampler>
            <hashTree />
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include common/bi_navigate.jmx">
              </GenericController>
            <hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}navigate">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ prepare folder variables">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// reset the folder_counter
vars.put("folder_counter", "1");

navFromJson = vars.get("navigation")
return navFromJson;

//if (navFromJson.length() &gt; 0) {
//	String [] navigation = navFromJson.split(",");
//	String fullNavigation = "";
//	int navCount = 1;
//	for(String nav: navigation) {
//		fullNavigation += nav +" ";
//		vars.put("folders_" + navCount, nav);
//		navCount = navCount + 1;
//	}
//	log.debug("full navigation is: " + fullNavigation + " with length of " + navigation.length);
//}


</stringProp>
          </JSR223Sampler>
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get folders">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">folders</stringProp>
              <stringProp name="RegexExtractor.regex">([^,]{1,})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If folders to nav">
            <stringProp name="IfController.condition">${__groovy(${folders_matchNr} &gt; 0)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="get public folders once only" />
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get permissions on public folders">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">permissions</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.public_folders</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get public_folders">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.public_folders/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get folder_id">
                  <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${folders_1}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each folder in navigation">
              <stringProp name="ForeachController.inputVal">folders</stringProp>
              <stringProp name="ForeachController.returnVal">folder</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increase folder_counter">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${__V(folder_${folder_counter})}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">folder_counter = Integer.parseInt(vars.get("folder_counter")) + 1
vars.put("folder_counter", String.valueOf(folder_counter))
log.debug(Label + " folder is ${folder} and folder_counter is " + vars.get("folder_counter") + " next is " + args[0])
</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">permissions</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ navigate">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set last_folder_id">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">folder_id = vars.get("folder_id")
if (folder_id != null) {
	vars.put("last_folder_id", folder_id)
}
</stringProp>
                </JSR223PreProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get folder_id">
                  <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${__V(folders_${folder_counter})}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ save navigation_response">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">vars.put("navigation_response",prev.getResponseDataAsString());</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="delete from_folder_ if exists" />
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set objectToDelete">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("objectToDelete", "{\"parms\":[{\"defaultName\": \"from_folder_${__threadNum}\", \"navigation\": \"ContentApps,move\"}]}")</stringProp>
            </JSR223Sampler>
            <hashTree />
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include deleteObjectIfExists">
              </GenericController>
            <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="deleteObjectIfExists" />
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("objectToDelete")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get deleteParms">
              <stringProp name="JSONPostProcessor.referenceNames">deleteParms</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.parms[0]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectNameToDelete">
              <stringProp name="JSONPostProcessor.referenceNames">objectNameToDelete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">deleteParms</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get navigation">
              <stringProp name="JSONPostProcessor.referenceNames">navigation</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.navigation</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">deleteParms</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="navigate to get id" />
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include common/bi_navigate.jmx">
              </GenericController>
            <hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}navigate">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ prepare folder variables">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// reset the folder_counter
vars.put("folder_counter", "1");

navFromJson = vars.get("navigation")
return navFromJson;

//if (navFromJson.length() &gt; 0) {
//	String [] navigation = navFromJson.split(",");
//	String fullNavigation = "";
//	int navCount = 1;
//	for(String nav: navigation) {
//		fullNavigation += nav +" ";
//		vars.put("folders_" + navCount, nav);
//		navCount = navCount + 1;
//	}
//	log.debug("full navigation is: " + fullNavigation + " with length of " + navigation.length);
//}


</stringProp>
          </JSR223Sampler>
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get folders">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">folders</stringProp>
              <stringProp name="RegexExtractor.regex">([^,]{1,})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If folders to nav">
            <stringProp name="IfController.condition">${__groovy(${folders_matchNr} &gt; 0)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="get public folders once only" />
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get permissions on public folders">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">permissions</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.public_folders</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get public_folders">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.public_folders/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get folder_id">
                  <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${folders_1}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each folder in navigation">
              <stringProp name="ForeachController.inputVal">folders</stringProp>
              <stringProp name="ForeachController.returnVal">folder</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increase folder_counter">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${__V(folder_${folder_counter})}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">folder_counter = Integer.parseInt(vars.get("folder_counter")) + 1
vars.put("folder_counter", String.valueOf(folder_counter))
log.debug(Label + " folder is ${folder} and folder_counter is " + vars.get("folder_counter") + " next is " + args[0])
</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">permissions</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ navigate">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set last_folder_id">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">folder_id = vars.get("folder_id")
if (folder_id != null) {
	vars.put("last_folder_id", folder_id)
}
</stringProp>
                </JSR223PreProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get folder_id">
                  <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${__V(folders_${folder_counter})}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ save navigation_response">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">vars.put("navigation_response",prev.getResponseDataAsString());</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ return navigation_response">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return vars.get("navigation_response")</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectToDeleteId">
                <stringProp name="JSONPostProcessor.referenceNames">objectToDeleteId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${__eval(${objectNameToDelete})}")].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">DOES_NOT_EXIST</stringProp>
                <stringProp name="Scope.variable">navigation_response</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If object exists">
            <stringProp name="IfController.condition">${__groovy("${objectToDeleteId}"!="DOES_NOT_EXIST")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cs_deleteObject">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="force">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">force</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="recursive">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">recursive</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${objectToDeleteId}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="object deleted?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="a count returned?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1244221547">"count"</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="delete to_folder_ if exists" />
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set objectToDelete">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("objectToDelete", "{\"parms\":[{\"defaultName\": \"to_folder_${__threadNum}\", \"navigation\": \"ContentApps,move\"}]}")</stringProp>
            </JSR223Sampler>
            <hashTree />
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include deleteObjectIfExists">
              </GenericController>
            <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="deleteObjectIfExists" />
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("objectToDelete")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get deleteParms">
              <stringProp name="JSONPostProcessor.referenceNames">deleteParms</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.parms[0]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectNameToDelete">
              <stringProp name="JSONPostProcessor.referenceNames">objectNameToDelete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">deleteParms</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get navigation">
              <stringProp name="JSONPostProcessor.referenceNames">navigation</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.navigation</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">deleteParms</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="navigate to get id" />
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include common/bi_navigate.jmx">
              </GenericController>
            <hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}navigate">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ prepare folder variables">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// reset the folder_counter
vars.put("folder_counter", "1");

navFromJson = vars.get("navigation")
return navFromJson;

//if (navFromJson.length() &gt; 0) {
//	String [] navigation = navFromJson.split(",");
//	String fullNavigation = "";
//	int navCount = 1;
//	for(String nav: navigation) {
//		fullNavigation += nav +" ";
//		vars.put("folders_" + navCount, nav);
//		navCount = navCount + 1;
//	}
//	log.debug("full navigation is: " + fullNavigation + " with length of " + navigation.length);
//}


</stringProp>
          </JSR223Sampler>
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get folders">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">folders</stringProp>
              <stringProp name="RegexExtractor.regex">([^,]{1,})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If folders to nav">
            <stringProp name="IfController.condition">${__groovy(${folders_matchNr} &gt; 0)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="get public folders once only" />
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get permissions on public folders">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">permissions</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.public_folders</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get public_folders">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.public_folders/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get folder_id">
                  <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${folders_1}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each folder in navigation">
              <stringProp name="ForeachController.inputVal">folders</stringProp>
              <stringProp name="ForeachController.returnVal">folder</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increase folder_counter">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${__V(folder_${folder_counter})}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">folder_counter = Integer.parseInt(vars.get("folder_counter")) + 1
vars.put("folder_counter", String.valueOf(folder_counter))
log.debug(Label + " folder is ${folder} and folder_counter is " + vars.get("folder_counter") + " next is " + args[0])
</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">permissions</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ navigate">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set last_folder_id">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">folder_id = vars.get("folder_id")
if (folder_id != null) {
	vars.put("last_folder_id", folder_id)
}
</stringProp>
                </JSR223PreProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get folder_id">
                  <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${__V(folders_${folder_counter})}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ save navigation_response">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">vars.put("navigation_response",prev.getResponseDataAsString());</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ return navigation_response">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return vars.get("navigation_response")</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectToDeleteId">
                <stringProp name="JSONPostProcessor.referenceNames">objectToDeleteId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${__eval(${objectNameToDelete})}")].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">DOES_NOT_EXIST</stringProp>
                <stringProp name="Scope.variable">navigation_response</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If object exists">
            <stringProp name="IfController.condition">${__groovy("${objectToDeleteId}"!="DOES_NOT_EXIST")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cs_deleteObject">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="force">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">force</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="recursive">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">recursive</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${objectToDeleteId}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="object deleted?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="a count returned?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1244221547">"count"</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="create to_folder_ " />
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set objectToCreate">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("objectToCreate", "{\"defaultName\":\"to_folder_${__threadNum}\" ,\"type\":\"folder\"}")</stringProp>
            </JSR223Sampler>
            <hashTree />
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include createObject">
              </GenericController>
            <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="createObject" />
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("objectToCreate")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectNameToCreate">
              <stringProp name="JSONPostProcessor.referenceNames">objectNameToCreate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Scope.variable">createObjectBody</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectTypeToCreate">
              <stringProp name="JSONPostProcessor.referenceNames">objectTypeToCreate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.type</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Scope.variable">createObjectBody</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cs_createObject_${objectTypeToCreate}">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__evalVar(objectToCreate)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${last_folder_id}/items</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="object created?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="save objectIdCreatedByScript">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">objectIdCreatedByScript</stringProp>
              <stringProp name="RegexExtractor.regex">Location: (.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NONE</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="save id for object named ${__evalVar(objectNameToCreate)}">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">${__evalVar(objectNameToCreate)}</stringProp>
              <stringProp name="RegexExtractor.regex">i[A-F0-9]{32}</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">objectIdCreatedByScript</stringProp>
            </RegexExtractor>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set to_folder_id">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__evalVar(objectNameToCreate)}</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("to_folder_id", args[0])</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="create from_folder_ " />
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set objectToCreate">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("objectToCreate", "{\"defaultName\":\"from_folder_${__threadNum}\" ,\"type\":\"folder\"}")</stringProp>
            </JSR223Sampler>
            <hashTree />
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include createObject">
              </GenericController>
            <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="createObject" />
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("objectToCreate")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectNameToCreate">
              <stringProp name="JSONPostProcessor.referenceNames">objectNameToCreate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Scope.variable">createObjectBody</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectTypeToCreate">
              <stringProp name="JSONPostProcessor.referenceNames">objectTypeToCreate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.type</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Scope.variable">createObjectBody</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cs_createObject_${objectTypeToCreate}">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__evalVar(objectToCreate)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${last_folder_id}/items</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="object created?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="save objectIdCreatedByScript">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">objectIdCreatedByScript</stringProp>
              <stringProp name="RegexExtractor.regex">Location: (.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NONE</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="save id for object named ${__evalVar(objectNameToCreate)}">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">${__evalVar(objectNameToCreate)}</stringProp>
              <stringProp name="RegexExtractor.regex">i[A-F0-9]{32}</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">objectIdCreatedByScript</stringProp>
            </RegexExtractor>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set from_folder_id">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__evalVar(${objectNameToCreate})}</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("from_folder_id", args[0])</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ navigate">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="nav_filter">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">nav_filter</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="fields">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fields</stringProp>
                  <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${from_folder_id}/items</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 ok?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ set last_folder_id">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${folder_id}</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("last_folder_id", args[0])</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="/ set folder_id">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__evalVar(objectNameToCreate)}</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("folder_id", vars.get(args[0]))</stringProp>
            </JSR223PreProcessor>
            <hashTree />
          </hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset ctof_branch_count">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put("ctof_branch_count", "0")</stringProp>
          </JSR223Sampler>
          <hashTree />
          <LoopController enabled="true" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop for branches">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset ctof_children_count">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("ctof_children_count", "0")</stringProp>
            </JSR223Sampler>
            <hashTree />
            <LoopController enabled="true" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop for children">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set objectToCreate">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${ctof_branch_count} ${ctof_children_count}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">log.debug(Label + " defaultName: 'tree_${__threadNum}_" + args[0] + "_" + args[1] + "'")
vars.put("objectToCreate", "{\"defaultName\":\"sub_item_${__threadNum}_" + args[0] + "_" + args[1] + "\",\"type\":\"folder\"}")</stringProp>
              </JSR223Sampler>
              <hashTree />
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include createObject">
                </GenericController>
              <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="createObject" />
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("objectToCreate")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectNameToCreate">
              <stringProp name="JSONPostProcessor.referenceNames">objectNameToCreate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Scope.variable">createObjectBody</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectTypeToCreate">
              <stringProp name="JSONPostProcessor.referenceNames">objectTypeToCreate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.type</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Scope.variable">createObjectBody</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cs_createObject_${objectTypeToCreate}">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__evalVar(objectToCreate)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${last_folder_id}/items</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="object created?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="save objectIdCreatedByScript">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">objectIdCreatedByScript</stringProp>
              <stringProp name="RegexExtractor.regex">Location: (.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NONE</stringProp>
              <stringProp name="RegexExtractor.match_number" />
            </RegexExtractor>
            <hashTree />
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="save id for object named ${__evalVar(objectNameToCreate)}">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">${__evalVar(objectNameToCreate)}</stringProp>
              <stringProp name="RegexExtractor.regex">i[A-F0-9]{32}</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">objectIdCreatedByScript</stringProp>
            </RegexExtractor>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increase ctof_children_count">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${ctof_children_count}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("ctof_children_count",
			String.valueOf(
					Integer.parseInt(args[0]) + 1
					)
		)</stringProp>
              </JSR223Sampler>
              <hashTree />
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ navigate">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="nav_filter">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">nav_filter</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="fields">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fields</stringProp>
                  <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${from_folder_id}/items</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 ok?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
            <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="/ set folder_id">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__evalVar(objectNameToCreate)}</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("folder_id", vars.get(args[0]))</stringProp>
            </JSR223PreProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ set last_folder_id">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${folder_id}</stringProp>
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("last_folder_id", args[0])</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectsToCopyOrMove">
              <stringProp name="JSONPostProcessor.referenceNames">objectsToCopyOrMove</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach objectsToCopyOrMove">
            <stringProp name="ForeachController.inputVal">objectsToCopyOrMove</stringProp>
            <stringProp name="ForeachController.returnVal">objectId</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
            <stringProp name="ForeachController.startIndex">0</stringProp>
          </ForeachController>
          <hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If moveItemsToNewLocation">
              <stringProp name="IfController.condition">${__groovy("${operationName}"=="moveItemsToNewLocation" )}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="move">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{"parent":[{"id":"${__evalVar(${to_folder_id})}"}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${objectId}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="204?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49590">204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If copyItemsToNewLocation">
              <stringProp name="IfController.condition">${__groovy("${operationName}"=="copyItemsToNewLocation" )}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="copy">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${__evalVar(${to_folder_id})}/items?recursive=true&amp;source=${objectId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="201?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If deleteObject">
          <stringProp name="IfController.condition">${__groovy("${operationName}"=="deleteObject")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("item")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get deleteParms">
              <stringProp name="JSONPostProcessor.referenceNames">deleteParms</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.parms[0]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectNameToDelete">
              <stringProp name="JSONPostProcessor.referenceNames">objectNameToDelete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">deleteParms</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ check for object id for object to delete">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__eval(${objectNameToDelete})}</stringProp>
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">objectNameToDelete = args[0]
objectNameToDeleteId = vars.get(objectNameToDelete)
log.debug(Label + ": id for '" + objectNameToDelete + "' is: " + objectNameToDeleteId)
if (objectNameToDeleteId == null) {
	SampleResult.setSuccessful(false);
	SampleResult.setErrorCount(1);
	SampleResult.setResponseData("id for object name '" + objectNameToDelete + "' not known. cannot delete.");
	vars.put("callDeleteObject", "false")
} else {
	vars.put("callDeleteObject", "true")
	vars.put("objectNameToDelete", objectNameToDeleteId)
	vars.put(objectNameToDelete, objectNameToDeleteId)
}
</stringProp>
          </JSR223Sampler>
          <hashTree />
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If ${objectNameToDelete} not null">
            <stringProp name="IfController.condition">${__groovy("${callDeleteObject}"=="true")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cs_deleteObject">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="force">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">force</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="recursive">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">recursive</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${__V(${objectNameToDelete})}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="object deleted?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="a count returned?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1244221547">"count"</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="deleted objects count was 0?">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">json = new groovy.json.JsonSlurper().parseText(prev.getResponseDataAsString());
if (json.count == 0) {
	SampleResult.setSuccessful(false);
	SampleResult.setErrorCount(1);
	SampleResult.setResponseMessage("deleted object count was zero");
}</stringProp>
              </JSR223Assertion>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If deleteObjectIfExists">
          <stringProp name="IfController.condition">${__groovy("${operationName}"=="deleteObjectIfExists")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set objectToDelete">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put("objectToDelete", vars.get("item"))</stringProp>
          </JSR223Sampler>
          <hashTree />
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include deleteObjectIfExists">
            </GenericController>
          <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="deleteObjectIfExists" />
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("objectToDelete")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get deleteParms">
              <stringProp name="JSONPostProcessor.referenceNames">deleteParms</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.parms[0]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectNameToDelete">
              <stringProp name="JSONPostProcessor.referenceNames">objectNameToDelete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">deleteParms</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get navigation">
              <stringProp name="JSONPostProcessor.referenceNames">navigation</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.navigation</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">deleteParms</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="navigate to get id" />
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include common/bi_navigate.jmx">
              </GenericController>
            <hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}navigate">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ prepare folder variables">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// reset the folder_counter
vars.put("folder_counter", "1");

navFromJson = vars.get("navigation")
return navFromJson;

//if (navFromJson.length() &gt; 0) {
//	String [] navigation = navFromJson.split(",");
//	String fullNavigation = "";
//	int navCount = 1;
//	for(String nav: navigation) {
//		fullNavigation += nav +" ";
//		vars.put("folders_" + navCount, nav);
//		navCount = navCount + 1;
//	}
//	log.debug("full navigation is: " + fullNavigation + " with length of " + navigation.length);
//}


</stringProp>
          </JSR223Sampler>
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get folders">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">folders</stringProp>
              <stringProp name="RegexExtractor.regex">([^,]{1,})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If folders to nav">
            <stringProp name="IfController.condition">${__groovy(${folders_matchNr} &gt; 0)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="get public folders once only" />
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get permissions on public folders">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">permissions</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.public_folders</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get public_folders">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.public_folders/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get folder_id">
                  <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${folders_1}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <ForeachController enabled="true" guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each folder in navigation">
              <stringProp name="ForeachController.inputVal">folders</stringProp>
              <stringProp name="ForeachController.returnVal">folder</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increase folder_counter">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${__V(folder_${folder_counter})}</stringProp>
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">folder_counter = Integer.parseInt(vars.get("folder_counter")) + 1
vars.put("folder_counter", String.valueOf(folder_counter))
log.debug(Label + " folder is ${folder} and folder_counter is " + vars.get("folder_counter") + " next is " + args[0])
</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get permissions">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">permissions</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ navigate">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="nav_filter">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="fields">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                      <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2CcanBurst%2CsnapShotEnabled</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${folder_id}/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set last_folder_id">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">folder_id = vars.get("folder_id")
if (folder_id != null) {
	vars.put("last_folder_id", folder_id)
}
</stringProp>
                </JSR223PreProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get folder_id">
                  <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${__V(folders_${folder_counter})}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ save navigation_response">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename" />
              <stringProp name="parameters" />
              <stringProp name="script">vars.put("navigation_response",prev.getResponseDataAsString());</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ return navigation_response">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return vars.get("navigation_response")</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get objectToDeleteId">
                <stringProp name="JSONPostProcessor.referenceNames">objectToDeleteId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${__eval(${objectNameToDelete})}")].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">DOES_NOT_EXIST</stringProp>
                <stringProp name="Scope.variable">navigation_response</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If object exists">
            <stringProp name="IfController.condition">${__groovy("${objectToDeleteId}"!="DOES_NOT_EXIST")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cs_deleteObject">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="force">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">force</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="recursive">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">recursive</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${objectToDeleteId}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="object deleted?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="a count returned?">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1244221547">"count"</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
      </hashTree>
    </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If user-profile-service">
              <stringProp name="IfController.condition">${__groovy("${type}"=="user-profile-service")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include user-profile-service/user-profile-service.jmx">
                </GenericController>
              <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">return vars.get("item");</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get operationName">
            <stringProp name="JSONPostProcessor.referenceNames">operationName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers" />
          </JSONPostProcessor>
          <hashTree />
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If setUserPreferences">
          <stringProp name="IfController.condition">${__groovy("${operationName}"=="setUserPreferences")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set userPreferences">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("item")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="set userPreferences">
              <stringProp name="JSONPostProcessor.referenceNames">userPreferences</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.parms[0]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="changeUserPreferences">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${userPreferences}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/users/~/preferences</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="204?">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message" />
            </ResponseAssertion>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If search">
              <stringProp name="IfController.condition">${__groovy("${type}"=="search")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set searchItem">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("searchItem", vars.get("item"))</stringProp>
              </JSR223Sampler>
              <hashTree />
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include search/search.jmx">
                </GenericController>
              <hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item name">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">return vars.get("searchItem")</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get name">
            <stringProp name="JSONPostProcessor.referenceNames">name</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers" />
          </JSONPostProcessor>
          <hashTree />
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If search">
          <stringProp name="IfController.condition">${__groovy("${name}"=="queryUntilTimeout")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get search details">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("searchItem")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get searchParms">
              <stringProp name="JSONPostProcessor.referenceNames">searchParms</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.parms[0]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get query">
              <stringProp name="JSONPostProcessor.referenceNames">query</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.query</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">searchParms</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get datacheck">
              <stringProp name="JSONPostProcessor.referenceNames">datacheck</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.datacheck</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">searchParms</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get timeout">
              <stringProp name="JSONPostProcessor.referenceNames">timeout</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.timeout</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers" />
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">searchParms</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="eval the vars">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("query", "${__evalVar(query)}")
vars.put("datacheck", "${__evalVar(datacheck)}")</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
          <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer">
            <stringProp name="ConstantTimer.delay">100</stringProp>
          </ConstantTimer>
          <hashTree />
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset successStatus">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename" />
            <stringProp name="parameters" />
            <stringProp name="script">vars.put("contentFound", "false");
vars.put("successStatus", "false");
vars.put("errorStatus", "false");
vars.putObject("pollStartTime", System.currentTimeMillis());</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree />
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="index">
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="While not found">
              <stringProp name="WhileController.condition">${__groovy("${contentFound}"=="false"  &amp;&amp; "${errorStatus}" != "true")}</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="search">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="query">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">"${query}"</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="_">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__time()}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/search/cm</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="datacheck found?">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">contentFound</stringProp>
                  <stringProp name="RegexExtractor.regex">${datacheck}</stringProp>
                  <stringProp name="RegexExtractor.template" />
                  <stringProp name="RegexExtractor.default">false</stringProp>
                  <stringProp name="RegexExtractor.match_number" />
                </RegexExtractor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 ok?">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer">
                  <stringProp name="ConstantTimer.delay">100</stringProp>
                </ConstantTimer>
                <hashTree />
                <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ check for timeout or bad response">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters" />
                  <stringProp name="filename" />
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseCode() != "200") {
	vars.put("errorStatus", "true")
	prev.setSuccessful(false);
	prev.setErrorCount(1);
	prev.setResponseMessage("unexpected response code '" + prev.getResponseCode() + "' received from search");
}

if (System.currentTimeMillis() - (Long) vars.getObject("pollStartTime") &gt;= vars.get("timeout").toLong()) {
	vars.put("errorStatus", "true");
	prev.setResponseCode("500");
	prev.setSuccessful(false);
	prev.setErrorCount(1);
	prev.setResponseMessage("search for '" + vars.get("query") + "' is taking too long");
}</stringProp>
                </JSR223PostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If conversation">
              <stringProp name="IfController.condition">${__groovy("${type}"=="sentence_exploration" || "${type}"=="sentence_dashboard")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item variables">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//TODO hardcoded item index
return vars.get("item")</stringProp>
              </JSR223Sampler>
              <hashTree>
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get moduleName from item">
                  <stringProp name="JSONPostProcessor.referenceNames">moduleName</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get columnName from item">
                  <stringProp name="JSONPostProcessor.referenceNames">columnName</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.columnName</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get type from item">
                  <stringProp name="JSONPostProcessor.referenceNames">type</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.type</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get moduleId from navigation_response variable">
                  <stringProp name="JSONPostProcessor.referenceNames">moduleId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${moduleName}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">navigation_response</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include smarts/conversation.jmx">
                </GenericController>
              <hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}conversation">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/set variables for converstion in dashboard or exploration">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">type = vars.get("type")
if (type == "sentence_dashboard") {
	vars.put("mode_type", "dashboard");
	vars.put("module_type", "dashboard/glass/dashboard/DashboardView");
	vars.put("title_type", "New dashboard");
} else {
	vars.put("mode_type", "explore");
	vars.put("module_type", "explore/view");
	vars.put("title_type", "New exploration");
}</stringProp>
          </JSR223Sampler>
          <hashTree />
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="Open conversation slideout">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="open slideout / POST /smarts/conversation/sentence">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"sentence":"hello","context":{"dialog":{"executed_state":"action_listen","main_intent":"greet"},"module":"${moduleId}","name":"${moduleName}","last_action":"action_listen","type":"uploadedFile"},"userContext":{"defaultName":"${username}","displayName":"${username}","givenName":null,"surname":"${username}","email":null},"appContext":{"mode":"${mode_type}","title":"${title_type}","isHomepage":false,"id":null,"includedCharts":["Area","Bar","Bubble","Bullet","Column","Crosstab","Heatmap","HierarchicalPackedBubble","Line","DualAxis","Tiledmap","Marimekko","Network","PackedBubble","Pie","Point","Dial","Scatter","Spiral","StackedBar","StackedColumn","Singleton","List","Treemap","Wordle"],"content":{"boardId":null,"isAuthoringMode":true,"module":"${module_type}"},"sources":[{"id":"${moduleId}","label":"${moduleName}","type":"uploadedFile","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/sentence</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value"> http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value"> gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value"> en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value"> */*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Origin">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1879170103">How can I {{help}} you</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="open slideout / POST /smarts/conversation/continue">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"context":{"dialog":{"executed_state":"utter_ask_howcanhelp","main_intent":"greet"},"restart":true,"module":"${moduleId}","name":"${moduleName}","last_action":"utter_ask_howcanhelp","type":"uploadedFile"},"userContext":{"defaultName":"${username}","displayName":"${username}","givenName":null,"surname":"${username}","email":null},"appContext":{"mode":"${mode_type}","title":"${title_type}","isHomepage":false,"id":null,"includedCharts":["Area","Bar","Bubble","Bullet","Column","Crosstab","Heatmap","HierarchicalPackedBubble","Line","DualAxis","Tiledmap","Marimekko","Network","PackedBubble","Pie","Point","Dial","Scatter","Spiral","StackedBar","StackedColumn","Singleton","List","Treemap","Wordle"],"content":{"boardId":null,"isAuthoringMode":true,"module":"${module_type}"},"sources":[{"id":"${moduleId}","label":"${moduleName}","type":"uploadedFile","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/continue</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value"> http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value"> gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value"> en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value"> */*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Origin">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="559542730">{"id":"listen"}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
          </hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="load data modules">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments" />
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ load data modules / POST /smarts/conversation/sentence">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"sentence":"load data modules","context":{"dialog":{"executed_state":"action_listen","main_intent":"greet"},"module":"${moduleId}","name":"${moduleName}","last_action":"action_listen","type":"uploadedFile"},"userContext":{"defaultName":"${username}","displayName":"${username}","givenName":null,"surname":"${username}","email":null},"appContext":{"mode":"${mode_type}","title":"${title_type}","isHomepage":false,"id":null,"includedCharts":["Area","Bar","Bubble","Bullet","Column","Crosstab","Heatmap","HierarchicalPackedBubble","Line","DualAxis","Tiledmap","Marimekko","Network","PackedBubble","Pie","Point","Dial","Scatter","Spiral","StackedBar","StackedColumn","Singleton","List","Treemap","Wordle"],"content":{"boardId":null,"isAuthoringMode":true,"module":"${module_type}"},"sources":[{"id":"${moduleId}","label":"${moduleName}","type":"uploadedFile","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/sentence</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value"> http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value"> gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value"> en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value"> */*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Origin">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="807494380">I found these:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ load data modules / POST /smarts/conversation/continue">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"context":{"dialog":{"executed_state":"action_show_source","main_intent":"showsource"},"module":"${moduleId}","name":"${moduleName}","last_action":"action_show_source","type":"uploadedFile","events":[{"name":"found","value":"true"},{"name":"source","value":"true"},{"name":"join_required","value":"false"}]},"userContext":{"defaultName":"${username}","displayName":"${username}","givenName":null,"surname":"${username}","email":null},"appContext":{"mode":"${mode_type}","title":"${title_type}","isHomepage":false,"id":null,"includedCharts":["Area","Bar","Bubble","Bullet","Column","Crosstab","Heatmap","HierarchicalPackedBubble","Line","DualAxis","Tiledmap","Marimekko","Network","PackedBubble","Pie","Point","Dial","Scatter","Spiral","StackedBar","StackedColumn","Singleton","List","Treemap","Wordle"],"content":{"boardId":null,"isAuthoringMode":true,"module":"${module_type}"},"sources":[{"id":"${moduleId}","label":"${moduleName}","type":"uploadedFile","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/continue</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value"> http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value"> gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value"> en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value"> */*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Origin">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-656556998">"isError": true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ load data modules / POST /smarts/conversation/continue">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"context":{"dialog":{"executed_state":"utter_end","main_intent":"showsource"},"module":"${moduleId}","name":"${moduleName}","last_action":"utter_end","type":"uploadedFile"},"userContext":{"defaultName":"${username}","displayName":"${username}","givenName":null,"surname":"${username}","email":null},"appContext":{"mode":"${mode_type}","title":"${title_type}","isHomepage":false,"id":null,"includedCharts":["Area","Bar","Bubble","Bullet","Column","Crosstab","Heatmap","HierarchicalPackedBubble","Line","DualAxis","Tiledmap","Marimekko","Network","PackedBubble","Pie","Point","Dial","Scatter","Spiral","StackedBar","StackedColumn","Singleton","List","Treemap","Wordle"],"content":{"boardId":null,"isAuthoringMode":true,"module":"${module_type}"},"sources":[{"id":"${moduleId}","label":"${moduleName}","type":"uploadedFile","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/continue</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value"> http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value"> gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value"> en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value"> */*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Origin">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-656556998">"isError": true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
          </hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="show data module ${moduleName} ">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments" />
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ show data module ${moduleName} / POST /smarts/conversation/sentence">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"sentence":"show data module ${moduleName}","context":{"dialog":{"executed_state":"action_listen","main_intent":"showsource"},"module":"${moduleId}","name":"${moduleName}","last_action":"action_listen","type":"uploadedFile"},"userContext":{"defaultName":"${username}","displayName":"${username}","givenName":null,"surname":"${username}","email":null},"appContext":{"mode":"${mode_type}","title":"${title_type}","isHomepage":false,"id":null,"includedCharts":["Area","Bar","Bubble","Bullet","Column","Crosstab","Heatmap","HierarchicalPackedBubble","Line","DualAxis","Tiledmap","Marimekko","Network","PackedBubble","Pie","Point","Dial","Scatter","Spiral","StackedBar","StackedColumn","Singleton","List","Treemap","Wordle"],"content":{"boardId":null,"isAuthoringMode":true,"module":"${module_type}"},"sources":[{"id":"${moduleId}","label":"${moduleName}","type":"uploadedFile","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/sentence</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value"> http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value"> gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value"> en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value"> */*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Origin">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-346057208">here is a list of relevant fields and some basic information about them</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ show data module ${moduleName} / POST /smarts/conversation/continue">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"context":{"dialog":{"executed_state":"action_show_source","main_intent":"showsource"},"module":"${moduleId}","name":"${moduleName}","last_action":"action_show_source","type":"uploadedFile","events":[{"name":"found","value":"false"},{"name":"source","value":"${moduleName}"},{"name":"join_required","value":"false"}]},"userContext":{"defaultName":"${username}","displayName":"${username}","givenName":null,"surname":"${username}","email":null},"appContext":{"mode":"${mode_type}","title":"${title_type}","isHomepage":false,"id":null,"includedCharts":["Area","Bar","Bubble","Bullet","Column","Crosstab","Heatmap","HierarchicalPackedBubble","Line","DualAxis","Tiledmap","Marimekko","Network","PackedBubble","Pie","Point","Dial","Scatter","Spiral","StackedBar","StackedColumn","Singleton","List","Treemap","Wordle"],"content":{"boardId":null,"isAuthoringMode":true,"module":"${module_type}"},"sources":[{"id":"${moduleId}","label":"${moduleName}","type":"uploadedFile","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/continue</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value"> http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value"> gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value"> en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value"> */*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Origin">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-656556998">"isError": true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
          </hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="show column ${columnName}">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
            <stringProp name="TestPlan.comments" />
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ show column ${columnName}  / POST /smarts/conversation/sentence">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"sentence":"show column ${columnName}","context":{"dialog":{"executed_state":"action_listen","main_intent":"showsource"},"module":"${moduleId}","name":"${moduleName}","last_action":"action_listen","type":"uploadedFile"},"userContext":{"defaultName":"${username}","displayName":"${username}","givenName":null,"surname":"${username}","email":null},"appContext":{"mode":"${mode_type}","title":"${title_type}","isHomepage":false,"id":null,"includedCharts":["Area","Bar","Bubble","Bullet","Column","Crosstab","Heatmap","HierarchicalPackedBubble","Line","DualAxis","Tiledmap","Marimekko","Network","PackedBubble","Pie","Point","Dial","Scatter","Spiral","StackedBar","StackedColumn","Singleton","List","Treemap","Wordle"],"content":{"boardId":null,"isAuthoringMode":true,"module":"${module_type}"},"sources":[{"id":"${moduleId}","label":"${moduleName}","type":"uploadedFile","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/sentence</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
              <stringProp name="TestPlan.comments">simulate clicking on data module</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value"> http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value"> gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value"> en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value"> */*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Origin">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-754529878">and here are some interesting fields related to </stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ show column ${columnName} / POST /smarts/conversation/continue">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"context":{"dialog":{"executed_state":"action_show","main_intent":"show"},"module":"${moduleId}","name":"${moduleName}","last_action":"action_show","type":"uploadedFile","events":[{"name":"found","value":"true"},{"name":"source","value":"true"},{"name":"join_required","value":"false"}]},"userContext":{"defaultName":"${username}","displayName":"${username}","givenName":null,"surname":"${username}","email":null},"appContext":{"mode":"${mode_type}","title":"${title_type}","isHomepage":false,"id":null,"includedCharts":["Area","Bar","Bubble","Bullet","Column","Crosstab","Heatmap","HierarchicalPackedBubble","Line","DualAxis","Tiledmap","Marimekko","Network","PackedBubble","Pie","Point","Dial","Scatter","Spiral","StackedBar","StackedColumn","Singleton","List","Treemap","Wordle"],"content":{"boardId":null,"isAuthoringMode":true,"module":"${module_type}"},"sources":[{"id":"${moduleId}","label":"${moduleName}","type":"uploadedFile","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/continue</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value"> http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value"> gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value"> en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value"> */*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Origin">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-656556998">"isError": true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ show column ${columnName} / POST /smarts/conversation/continue">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"context":{"dialog":{"executed_state":"utter_end","main_intent":"show"},"module":"${moduleId}","name":"${moduleName}","last_action":"utter_end","type":"uploadedFile"},"userContext":{"defaultName":"${username}","displayName":"${username}","givenName":null,"surname":"${username}","email":null},"appContext":{"mode":"${mode_type}","title":"${title_type}","isHomepage":false,"id":null,"includedCharts":["Area","Bar","Bubble","Bullet","Column","Crosstab","Heatmap","HierarchicalPackedBubble","Line","DualAxis","Tiledmap","Marimekko","Network","PackedBubble","Pie","Point","Dial","Scatter","Spiral","StackedBar","StackedColumn","Singleton","List","Treemap","Wordle"],"content":{"boardId":null,"isAuthoringMode":true,"module":"${module_type}"},"sources":[{"id":"${moduleId}","label":"${moduleName}","type":"uploadedFile","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/continue</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value"> http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value"> gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value"> en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value"> */*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Origin">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-656556998">"isError": true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
          </hashTree>
          <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="what influences column ${columnName}">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments" />
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ what influences column ${columnName}  / POST /smarts/conversation/sentence">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"sentence":"what influences column Revenue","context":{"dialog":{"executed_state":"action_listen","main_intent":"show"},"module":"${moduleId}","name":"${moduleName}","last_action":"action_listen","type":"uploadedFile"},"userContext":{"defaultName":"${username}","displayName":"${username}","givenName":null,"surname":"${username}","email":null},"appContext":{"mode":"${mode_type}","title":"${title_type}","isHomepage":false,"id":null,"includedCharts":["Area","Bar","Bubble","Bullet","Column","Crosstab","Heatmap","HierarchicalPackedBubble","Line","DualAxis","Tiledmap","Marimekko","Network","PackedBubble","Pie","Point","Dial","Scatter","Spiral","StackedBar","StackedColumn","Singleton","List","Treemap","Wordle"],"content":{"boardId":null,"isAuthoringMode":true,"module":"${module_type}"},"sources":[{"id":"${moduleId}","label":"${moduleName}","type":"uploadedFile","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/sentence</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
              <stringProp name="TestPlan.comments">simulate clicking on data module</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value"> http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value"> gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value"> en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value"> */*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Origin">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1931753144">Here are the fields that have great influence on </stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ what influences column ${columnName} / POST /smarts/conversation/continue">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"context":{"dialog":{"executed_state":"action_influencer","main_intent":"showinfluencer"},"module":"${moduleId}","name":"${moduleName}","last_action":"action_influencer","type":"uploadedFile","events":[{"name":"found","value":"true"},{"name":"source","value":"true"},{"name":"join_required","value":"false"}]},"userContext":{"defaultName":"${username}","displayName":"${username}","givenName":null,"surname":"${username}","email":null},"appContext":{"mode":"${mode_type}","title":"${title_type}","isHomepage":false,"id":null,"includedCharts":["Area","Bar","Bubble","Bullet","Column","Crosstab","Heatmap","HierarchicalPackedBubble","Line","DualAxis","Tiledmap","Marimekko","Network","PackedBubble","Pie","Point","Dial","Scatter","Spiral","StackedBar","StackedColumn","Singleton","List","Treemap","Wordle"],"content":{"boardId":null,"isAuthoringMode":true,"module":"${module_type}"},"sources":[{"id":"${moduleId}","label":"${moduleName}","type":"uploadedFile","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/continue</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value"> http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value"> gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value"> en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value"> */*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Origin">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-656556998">"isError": true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ what influences column ${columnName} / POST /smarts/conversation/continue">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"context":{"dialog":{"executed_state":"utter_end","main_intent":"showinfluencer"},"module":"${moduleId}","name":"${moduleName}","last_action":"utter_end","type":"uploadedFile"},"userContext":{"defaultName":"${username}","displayName":"${username}","givenName":null,"surname":"${username}","email":null},"appContext":{"mode":"${mode_type}","title":"${title_type}","isHomepage":false,"id":null,"includedCharts":["Area","Bar","Bubble","Bullet","Column","Crosstab","Heatmap","HierarchicalPackedBubble","Line","DualAxis","Tiledmap","Marimekko","Network","PackedBubble","Pie","Point","Dial","Scatter","Spiral","StackedBar","StackedColumn","Singleton","List","Treemap","Wordle"],"content":{"boardId":null,"isAuthoringMode":true,"module":"${module_type}"},"sources":[{"id":"${moduleId}","label":"${moduleName}","type":"uploadedFile","active":true}]},"chatContext":{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/smarts/conversation/continue</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> application/json</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value"> http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value"> gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value"> en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value"> */*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Origin">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-656556998">"isError": true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If datasource">
            <stringProp name="IfController.condition">${__groovy("${type}"=="datasource")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get item type">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("datasource_parameters",vars.get("item"));</stringProp>
            </JSR223Sampler>
            <hashTree />
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ Include datasource/launch.jmx">
              </GenericController>
            <hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}datasource coformance tests steps">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="Define Initial vars">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="Argument" name="step_name">
                <stringProp name="Argument.name">step_name</stringProp>
                <stringProp name="Argument.value">create_data_source_connection</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="ServerName">
                <stringProp name="Argument.name">ServerName</stringProp>
                <stringProp name="Argument.value">NOTSET</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree />
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="load step params">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get("datasource_parameters")</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get step script">
              <stringProp name="JSONPostProcessor.referenceNames">setp_script</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.script</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get step name">
              <stringProp name="JSONPostProcessor.referenceNames">step_name</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <RandomVariableConfig enabled="false" guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="id suffix">
            <stringProp name="maximumValue">10000</stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="outputFormat" />
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed" />
            <stringProp name="variableName">dsid_suffix</stringProp>
          </RandomVariableConfig>
          <hashTree />
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="check if need load settings from csv in current step">
            <stringProp name="IfController.condition">${__groovy("${ServerName}"=="NOTSET")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <CSVDataSet enabled="true" guiclass="TestBeanGUI" testclass="CSVDataSet" testname="load data source information---">
              <stringProp name="filename">${__P(includecontroller.prefix,'..')}/datasource/CreateDS_Parm.csv</stringProp>
              <stringProp name="fileEncoding" />
              <stringProp name="variableNames" />
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
            </CSVDataSet>
            <hashTree />
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get datasource parameters">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var nameprefix=vars.get("DS_Name").replace(/\s/g,"_");
vars.put("ds_prefix",nameprefix);
vars.put("datasource_name",nameprefix+"_DTS_CONFORMANCE_DS");
vars.put("datasource_connection",nameprefix+"_DTS_CONFORMANCE_CON");
vars.put("datasource_datasetName",nameprefix+"_DTS_CONFORMANCE_DATASET");
vars.put("datasource_dataModuleName",nameprefix+"_DTS_CONFORMANCE_DM");
vars.put("datasource_dashboardName",nameprefix+"_DTS_CONFORMANCE_DASHBOARD");
vars.put("datasource_dashboardName_ds",nameprefix+"_DTS_CONFORMANCE_DASHBOARD_DS");
vars.put("datasource_reportName_DM",nameprefix+"_DTS_CONFORMANCE_REPORT");
vars.put("datasource_storyNameA",nameprefix+"_DTS_CONFORMANCE_STORYA");
vars.put("datasource_storyNameA_ds",nameprefix+"_DTS_CONFORMANCE_STORYA_DS");
vars.put("datasource_storyNameB",nameprefix+"_DTS_CONFORMANCE_STORYB");
vars.put("datasource_storyNameB_ds",nameprefix+"_DTS_CONFORMANCE_STORYB_DS");
vars.put("datasource_schemaname",vars.get("Schema"));</stringProp>
            </JSR223Sampler>
            <hashTree />
            <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="debug read conf ${__threadNum}">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">true</boolProp>
            </DebugPostProcessor>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/objects/.my_folders/items">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="fields">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">searchPath</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">fields</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.my_folders</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get my folder search path">
              <stringProp name="JSONPostProcessor.referenceNames">searchPath</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].searchPath</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">datasource_id</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ generate AuthToken">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.ibm.bi.auth.AuthenticityToken;
import com.ibm.bi.auth.BiBase64;
import java.io.ByteArrayOutputStream;
log.debug("usersessionid=" + vars.get("COOKIE_usersessionid"));	
authToken = AuthenticityToken.generateToken(vars.get("COOKIE_usersessionid"));
log.debug("authToken=" + authToken);
vars.put("auth_token", authToken);</stringProp>
          </JSR223Sampler>
          <hashTree />
          <DebugSampler enabled="true" guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug parameters">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree />
          <SwitchController enabled="true" guiclass="SwitchControllerGui" testclass="SwitchController" testname="run data source coformance steps">
            <stringProp name="SwitchController.value">${step_name}</stringProp>
          </SwitchController>
          <hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ create_data_source_connection">
              </GenericController>
            <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="create data source" />
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / get all data sources ${__threadNum}">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="fields">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">defaultName,owner.defaultName,disabled,permissions,hidden,capabilities,modificationTime,type</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">fields</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/datasources</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
            <stringProp name="TestPlan.comments">get data source</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Refer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get original id">
              <stringProp name="JSONPostProcessor.referenceNames">org_dsid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_name}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait other get data sources  thread ${__threadNum}">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree />
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="${DS_Name}:if datasource exists delete it">
            <stringProp name="IfController.condition">${__groovy("${org_dsid}" !="NOTFOUND")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / delete orginal datasource">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="force">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">force</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="recursive">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">recursive</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/datasources/${org_dsid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" />
          <hashTree>
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="CreateNewDS">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / /datasources">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{
	"defaultName": "${datasource_name}",
	"type": "dataSource"
}
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/datasources</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract dataSourceId">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">dataSourceId</stringProp>
                  <stringProp name="RegexExtractor.regex">/bi/v1/objects/(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number" />
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree />
              </hashTree>
            </hashTree>
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="CreateDSConnection">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${step_name} ${DS_Name}:  - Populate connection string template with real values">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">url = vars.get('urlTemplate')

url = url.replaceAll("(?i)&lt;hostname&gt;",vars.get("ServerName"))
url = url.replaceAll("(?i)&lt;host&gt;",vars.get("ServerName"))
url = url.replaceAll("(?i)&lt;port&gt;",vars.get("Port"))
url = url.replaceAll("(?i)&lt;databasename&gt;",vars.get("DBName"))
url = url.replaceAll("(?i)&lt;instancename&gt;",vars.get("InstanceName"))
url = url.replaceAll("(?i)&lt;logintimeout&gt;",vars.get("LoginTimeout"))
url = url.replaceAll("(?i)&lt;oracleserviceid&gt;",vars.get("OracleServiceID"))
url = url.replaceAll("(?i)&lt;hostDescription&gt;",vars.get("ServerName") + ":" + vars.get("Port"))
url = url.replaceAll("INFORMIXSERVER=&lt;server-name&gt;","INFORMIXSERVER=" + vars.get("INFORMIXSERVER"))

url = url.replaceAll("\\[","").replaceAll("\\]","").replaceAll("(?i)&lt;databasename&gt;",vars.get("DBName")) //see defect 199993

vars.put("connectionURL",url)

specialParams = ""

if(vars.get("title") == "DB2 iSeries"){
	specialParams = "^User ID:^?Password:"
}

vars.put("specialParams",specialParams)</stringProp>
              </JSR223Sampler>
              <hashTree />
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${DS_Name}: / /objects/{id}/items">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{
	"defaultName": "${datasource_connection}",
	"type": "dataSourceConnection",
	"permissions": ["execute", "read", "setPolicy", "traverse", "write"],
	"disabled": false,
	"hidden": false,
	"isNew": true,
	"signonOption": "anon",
	"vendor": {
		"code": "${code}",
		"title": "${title}",
		"categoryId": "jdbc",
		"urlTemplate": "${urlTemplate}",
		"driverName": "${driver}",
		"subProtocol": "${protocol}",
		"id": "${code}",
		"module": "bi/admin/datasource/slideout/JdbcConnectionStringPane"
	},
	"connectionString": ";LOCAL;${code};URL=${connectionURL};${subcode}",
	"dataSourceId": "${dataSourceId}"
}
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${dataSourceId}/items</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor">
                  <stringProp name="TestPlan.comments">Extract Status </stringProp>
                  <stringProp name="JSONPostProcessor.referenceNames">vendor_string</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.vendor</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree />
                <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Connection ObjectID Extractor">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">connectionId</stringProp>
                  <stringProp name="RegexExtractor.regex">/bi/v1/objects/(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number" />
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree />
              </hashTree>
            </hashTree>
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="CreateDSSignon">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}:  / /datasources/{dataSourceId}/connections/{connectionId}/signons">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{
	"id": "signon_${__Random(100,999,)}",
	"defaultName": "${datasource_connection}",
	"permissions": ["execute", "read", "setPolicy", "traverse", "write"],
	"disabled": false,
	"hidden": false,
	"isNew": true,
	"type": "dataSourceSignon",
	"credentialsEx": {
		"password": "${PW}",
		"username": "${user}"
	},
	"confirmPassword": "${PW}",
	"updated": true,
	"credentialUserName": "${user}",
	"credentialPassword": "${PW}"
}

</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/datasources/${dataSourceId}/connections/${connectionId}/signons</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="GetEncryptedSignonCredentials">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / /datasources/{dataSourceId}/connections/{connectionId}/signons">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/datasources/${dataSourceId}/connections/${connectionId}/signons</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Signon Credentials Extractor">
                  <stringProp name="JSONPostProcessor.referenceNames">encryptedCredentials</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..credentials</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
            </hashTree>
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="TestDSConnection">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}:  / /datasources/{dataSourceId_HA}/connections/{connectionId_HA}/signonsHANA">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{
	"connectionString": "${specialParams};LOCAL;${code};URL=${connectionURL};${subcode};",
	"credentialString": "${encryptedCredentials}"
}
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/datasourceconnection/test_with_credential</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Data Source Connection Test Results Extractor">
                  <stringProp name="JSONPostProcessor.referenceNames">testStatus;testMessage</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..success;$..messages.*</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0;-1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">testStatusNOTFOUND;testMessageNOTFOUND</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="testStatus Assertion">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="3569038">true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">testStatus</stringProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="testMessage Assertion">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1259015692">${Status}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">testMessage_ALL</stringProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <DurationAssertion enabled="false" guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion">
                  <stringProp name="DurationAssertion.duration">4000</stringProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </DurationAssertion>
                <hashTree />
                <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree />
              </hashTree>
            </hashTree>
            <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="LoadingSchema">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}:  LoadingDS">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/datasources/${dataSourceId}/connections?fields=defaultName,disabled,permissions,owner.defaultName,hidden,capabilities,hasChildren,searchPath,modificationTime,creationTime,ancestors,defaultDescription,connectionString</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}:  get schemas">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="connectionSpec">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">{"connections":[{"datasource":"${datasource_name}","connection":"${datasource_connection}"}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">connectionSpec</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/sources/${connectionId}/schemas</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get schema name">
                  <stringProp name="JSONPostProcessor.referenceNames">schema</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${Schema}")].schema</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get catalog name">
                  <stringProp name="JSONPostProcessor.referenceNames">catalog</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${Schema}")].catalog</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                  <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}:  LoadingSchema">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{
	"schema": "${schema}",
	"catalog":"${catalog}",
	"type": "dataSourceSchema",
	"schemaType": "user",
	"defaultName": "${Schema}",
	"status": "pending"
}
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/sources/${connectionId}/schemas</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: LoadingDS1MetaData">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="connectionSpec">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">{"connections":[{"datasource":"${datasource_name}","connection":"${datasource_connection}"}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">connectionSpec</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/sources/${dataSourceId}/schemas</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor">
                  <stringProp name="TestPlan.comments">Extract Status </stringProp>
                  <stringProp name="JSONPostProcessor.referenceNames">state_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.state</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                  <stringProp name="JSONPostProcessor.defaultValues">notfound</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}:  LoadingSchemaID">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/sources/${dataSourceId}/schemas</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor">
                  <stringProp name="JSONPostProcessor.referenceNames">ds_schem_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.[?(@._meta)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">notfound</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}:  LoadingBaseModel">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/base_modules/${ds_schem_id}?async=true</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Data Source ObjectID Extractor">
                  <stringProp name="RegexExtractor.useHeaders">request_headers</stringProp>
                  <stringProp name="RegexExtractor.refname">based_id</stringProp>
                  <stringProp name="RegexExtractor.regex">/bi/v1/objects/(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number" />
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor">
                  <stringProp name="JSONPostProcessor.referenceNames">taskID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.taskID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">notfound</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ JSR223 Counter">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("asyncCount","0");</stringProp>
            </JSR223Sampler>
            <hashTree />
            <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller">
              <stringProp name="TestPlan.comments"> while not suceeded   ${__javaScript("${myVar}" != "some value",)}</stringProp>
              <stringProp name="WhileController.condition">${__groovy("${state_id}" != "SUCCESS",)}</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}:  LoadingAsync">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/tasks/${taskID}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
                <stringProp name="TestPlan.comments">
http://vottanalytics1:9300/bi/v1/metadata/tasks/35190e18f02ff4501175d4ae9a30785854e0132e</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor">
                  <stringProp name="TestPlan.comments">Extract Status </stringProp>
                  <stringProp name="JSONPostProcessor.referenceNames">state_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.state</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                  <stringProp name="JSONPostProcessor.defaultValues">notfound</stringProp>
                </JSONPostProcessor>
                <hashTree />
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree />
                <JSR223Assertion enabled="true" guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Abort schmea load if it takes too long">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename" />
                  <stringProp name="parameters" />
                  <stringProp name="script">asyncCount = Integer.parseInt(vars.get("asyncCount"))

if(asyncCount &gt;= 20){
	vars.put("state_id","SUCCESS");
	vars.put("asyncCount","0");
}else{
	vars.put("asyncCount",String.valueOf(asyncCount + 1))
}
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree />
                <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait to retrive state">
                  <stringProp name="ConstantTimer.delay">800</stringProp>
                </ConstantTimer>
                <hashTree />
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ create_data_source_dm">
              </GenericController>
            <hashTree>
        <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments">
            <elementProp elementType="Argument" name="parent_folderId">
              <stringProp name="Argument.name">parent_folderId</stringProp>
              <stringProp name="Argument.value">.my_folders</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree />
        <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}:  GetConfiguration">
          <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
            <collectionProp name="Arguments.arguments" />
          </elementProp>
          <stringProp name="HTTPSampler.domain" />
          <stringProp name="HTTPSampler.port" />
          <stringProp name="HTTPSampler.protocol">file</stringProp>
          <stringProp name="HTTPSampler.contentEncoding" />
          <stringProp name="HTTPSampler.path">${__P(includecontroller.prefix,'..')}datasource/data/${ds_prefix}_CreateDataModule.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re" />
          <stringProp name="HTTPSampler.connect_timeout" />
          <stringProp name="HTTPSampler.response_timeout" />
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get querySubject">
            <stringProp name="JSONPostProcessor.referenceNames">querySubject</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.querySubject</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Scope.variable">datasource_id</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get relationship">
            <stringProp name="JSONPostProcessor.referenceNames">relationship</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.relationship</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Scope.variable">datasource_id</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree />
        </hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="GetDatasourceIDAndConnectionID" />
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}:  get data source infomation to extract data source id">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="sourceType">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">databases</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sourceType</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/sources</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get datasource id">
              <stringProp name="JSONPostProcessor.referenceNames">datasource_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.[?(@.label=="${datasource_name}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">datasource_id</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If datasource exists">
            <stringProp name="IfController.condition">${__groovy("${datasource_id}"!== "")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: get data source connections infomation to extract data source connection id">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">defaultName,disabled,permissions,owner.defaultName,hidden,capabilities,hasChildren,modificationTime,creationTime,ancestors,defaultDescription,connectionString,tenantID</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/sources/${datasource_id}/connections</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get data source connection id">
                <stringProp name="JSONPostProcessor.referenceNames">data_source_connection_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[?(@.defaultName=="${datasource_connection}")].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">datasource_id</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If data source connection exists">
          <stringProp name="IfController.condition">${__groovy("${data_source_connection_id}"!== "")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="LoadSchemas" />
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: get schemas infomation of data source">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="connectionSpec">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">{"connections":[{"datasource":"${datasource_name}","connection":"${datasource_connection}"}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">connectionSpec</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/sources/${datasource_id}/schemas</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="getDataStatus">
                <stringProp name="JSONPostProcessor.referenceNames">data_status</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_schemaname}")].status</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">datasource_id</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="getSchema">
                <stringProp name="JSONPostProcessor.referenceNames">schema</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_schemaname}")].schema</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">datasource_id</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="getCatalog">
                <stringProp name="JSONPostProcessor.referenceNames">catalog</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_schemaname}")].catalog</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">datasource_id</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">js</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var schemaContent={
	"type":"dataSourceSchema",
	"schemaType":"user",
	"defaultName":vars.get("datasource_schemaname"),
	"status":"pending"
	}
if(vars.get("schema")){
	schemaContent.schema=vars.get("schema");
	schemaContent.catalog=vars.get("catalog");
}else{
	schemaContent.schema=null;
	schemaContent.catalog=vars.get("catalog");
}

vars.put("schemaContent",JSON.stringify(schemaContent));
var connectionParams={
	"connections":[
	{
		"datasource":vars.get("datasource_name"),
		"connection":vars.get("datasource_connection")
	}]
};
vars.put("connectionparams",encodeURIComponent(JSON.stringify(connectionParams)))</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree />
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If schemas not loaded">
              <stringProp name="IfController.condition">${__groovy("${data_status}"== "not_loaded")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: post load schemas request">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${schemaContent}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/sources/${data_source_connection_id}/schemas</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert http response">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: get schemas infomation of data source to extract schema ID">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="connectionSpec">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">{"connections":[{"datasource":"${datasource_name}","connection":"${datasource_connection}"}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">connectionSpec</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/sources/${datasource_id}/schemas</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="getSchemasID">
                  <stringProp name="JSONPostProcessor.referenceNames">schemas_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_schemaname}")].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">datasource_id</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get load schema task ID">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/base_modules/${schemas_id}?async=true&amp;connectionSpec=${connectionparams}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert http response">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1478545310">20[02]</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get task id">
                  <stringProp name="JSONPostProcessor.referenceNames">task_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.taskID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers" />
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get load schema task status">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments" />
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/tasks/${task_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get task state">
                  <stringProp name="JSONPostProcessor.referenceNames">task_state</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.state</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">datasource_id</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
              <WhileController enabled="true" guiclass="WhileControllerGui" testclass="WhileController" testname="check task state">
                <stringProp name="WhileController.condition">${__groovy("${task_state}"!="SUCCESS")}</stringProp>
              </WhileController>
              <hashTree>
                <ConstantTimer enabled="true" guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer">
                  <stringProp name="ConstantTimer.delay">500</stringProp>
                </ConstantTimer>
                <hashTree />
                <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / check state">
                  <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                    <collectionProp name="Arguments.arguments" />
                  </elementProp>
                  <stringProp name="HTTPSampler.domain" />
                  <stringProp name="HTTPSampler.port" />
                  <stringProp name="HTTPSampler.protocol" />
                  <stringProp name="HTTPSampler.contentEncoding" />
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/tasks/${task_id}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re" />
                  <stringProp name="HTTPSampler.connect_timeout" />
                  <stringProp name="HTTPSampler.response_timeout" />
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp elementType="Header" name="Content-Type">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Language">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="User-Agent">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Referer">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="X-Requested-With">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp elementType="Header" name="Accept-Encoding">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree />
                  <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get task state">
                    <stringProp name="JSONPostProcessor.referenceNames">task_state</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.state</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Scope.variable">datasource_id</stringProp>
                  </JSONPostProcessor>
                  <hashTree />
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="createModule" />
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get data module id with specified name ">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="nav_filter">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">nav_filter</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">userInterfaces,owner.id,defaultName,disabled,hidden,permissions,runInAdvancedViewer,owner.defaultName,modificationTime,canBurst,iconURI,defaultScreenTip,searchPath,defaultPortalAction</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${parent_folderId}/items</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get data module id ">
                <stringProp name="JSONPostProcessor.referenceNames">test_module_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_dataModuleName}")].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">datasource_id</stringProp>
              </JSONPostProcessor>
              <hashTree />
            </hashTree>
            <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If specified data module existing">
              <stringProp name="IfController.condition">${__groovy("${test_module_id}"!== "")}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: delete data module">
                <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="force">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">force</stringProp>
                    </elementProp>
                    <elementProp elementType="HTTPArgument" name="recursive">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">recursive</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${test_module_id}</stringProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert http response">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: open create data module perspective">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/ca-modeller-create</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=home</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: get schemas infomation of data source to storeID">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/sources/${datasource_id}/schemas</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get storeID">
                <stringProp name="JSONPostProcessor.referenceNames">store_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_schemaname}")].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">store_id</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Post empty data module information">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"version":"4.0","container":"C","useSpec":[{"identifier":"M1","type":"database","storeID":"${store_id}","ancestors":[]}],"expressionLocale":"en-us","querySubject":[],"filter":[],"calculation":[],"relationship":[],"parameterMap":[],"metadataTreeView":[{}],"drillGroup":[],"dataRetrievalMode":"liveConnection","identifier":"New_data_module","label":"New data module","property":[],"propertyOverride":[]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules?location=~~&amp;session=true</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get session temp">
                <stringProp name="JSONPostProcessor.referenceNames">session_temp_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">session_temp_id</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert http response">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: get mrus reuslt">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/users/~/mrus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get mrus reuslt">
                <stringProp name="JSONPostProcessor.referenceNames">mrus_reuslt</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">session_temp_id</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="clean mrus result">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put("clean_mrus_reuslt", vars.get("mrus_reuslt").replace('\\',''))
if (vars.get("mrus_reuslt")==""){
  vars.put("clean_mrus_reuslt", "{}")	
}
</stringProp>
              </JSR223PostProcessor>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Post mrus">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${clean_mrus_reuslt}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/users/~/mrus/data</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert http response">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Open reference perspective">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/ca-modeller</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Put  empty data module information">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"version":"4.0","container":"C","useSpec":[{"identifier":"M1","type":"database","storeID":"${store_id}","ancestors":[]}],"expressionLocale":"en-us","querySubject":[],"filter":[],"calculation":[],"relationship":[],"parameterMap":[],"metadataTreeView":[{}],"drillGroup":[],"dataRetrievalMode":"liveConnection","identifier":"New_data_module","label":"New data module","property":[],"propertyOverride":[]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${session_temp_id}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert http response">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get taxonomy information">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/taxonomy</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get detail information of schema">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="type">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">database</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="item">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">item</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="shortIdForExpression">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">shortIdForExpression</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/base_modules/${store_id}/metadata</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="getVersion">
                <stringProp name="JSONPostProcessor.referenceNames">version</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.version</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">datasource_id</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="getMetadataTreeView">
                <stringProp name="JSONPostProcessor.referenceNames">metadataTreeView</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.metadataTreeView</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">datasource_id</stringProp>
              </JSONPostProcessor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">js</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var newModuleContent = {
    "version":vars.get("version"),
    "container":"C",
    "useSpec":[{"identifier":"M1", "type":"database", "storeID":vars.get("store_id"), "ancestors":[]}],
    "expressionLocale":"en-us",
    "querySubject":JSON.parse(vars.get("querySubject")),
    "filter":[],
    "calculation":[],
    "relationship":JSON.parse(vars.get("relationship")),
    "parameterMap":[],
    "metadataTreeView":JSON.parse(vars.get("metadataTreeView")),
    "drillGroup":[],
    "dataRetrievalMode":"liveConnection",
    "identifier":"New_data_module",
    "label":"New data module",
    "property":[],
    "propertyOverride":[]
}
vars.put("submitNewModuleContent",JSON.stringify(newModuleContent));


var saveModuleContent = {
    "version":vars.get("version"),
    "container":"C",
    "useSpec":[{"identifier":"M1", "type":"database", "storeID":vars.get("store_id"), "ancestors":[]}],
    "expressionLocale":"en-us",
    "querySubject":JSON.parse(vars.get("querySubject")),
    "filter":[],
    "calculation":[],
    "relationship":JSON.parse(vars.get("relationship")),
    "parameterMap":[],
    "metadataTreeView":JSON.parse(vars.get("metadataTreeView")),
    "drillGroup":[],
    "dataRetrievalMode":"liveConnection",
    "identifier":vars.get("datasource_dataModuleName"),
    "label":vars.get("datasource_dataModuleName"),
    "property":[],
    "propertyOverride":[]
}
vars.put("submitSaveModuleContent",JSON.stringify(saveModuleContent));


</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree />
            </hashTree>
            <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="Post module detail information" />
            <hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Put new data module request">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${submitNewModuleContent}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${session_temp_id}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert http response">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49590">204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Put  save module request">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${submitSaveModuleContent}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${session_temp_id}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert http response">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49590">204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message" />
                </ResponseAssertion>
                <hashTree />
              </hashTree>
              <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Post save data module into my folder request">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp elementType="HTTPArgument" name="">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${submitSaveModuleContent}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain" />
                <stringProp name="HTTPSampler.port" />
                <stringProp name="HTTPSampler.protocol" />
                <stringProp name="HTTPSampler.contentEncoding" />
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/?location=${parent_folderId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re" />
                <stringProp name="HTTPSampler.connect_timeout" />
                <stringProp name="HTTPSampler.response_timeout" />
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp elementType="Header" name="Content-Type">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Language">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="User-Agent">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Referer">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="X-Requested-With">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp elementType="Header" name="Accept-Encoding">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree />
                <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get module id">
                  <stringProp name="JSONPostProcessor.referenceNames">module_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">store_id</stringProp>
                </JSONPostProcessor>
                <hashTree />
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get data module information">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">defaultName,owner.defaultName,ancestors,permissions,hidden,disabled</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${module_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Check if data module existing in my folder">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="nav_filter">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">nav_filter</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="fields">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">userInterfaces,owner.id,defaultName,disabled,hidden,permissions,runInAdvancedViewer,owner.defaultName,modificationTime,canBurst,iconURI,defaultScreenTip,searchPath,defaultPortalAction</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${parent_folderId}/items</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="Content-Type">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/?perspective=ca-modeller-create&amp;id=ca-modeller-create</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="146695429">"defaultName": "${datasource_dataModuleName}"</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ create_data_source_ds">
              </GenericController>
            <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="create data set" />
        <hashTree>
          <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="ds vars">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="Argument" name="parent_folderId">
                <stringProp name="Argument.name">parent_folderId</stringProp>
                <stringProp name="Argument.value">.my_folders</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="datasource_dataModuleName">
                <stringProp name="Argument.name">datasource_dataModuleName</stringProp>
                <stringProp name="Argument.value">New_data_module1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="datasource_datasetName">
                <stringProp name="Argument.name">datasource_datasetName</stringProp>
                <stringProp name="Argument.value">MySQL_DTS_CONFORMANCE_DATASET</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="selectionFile">
                <stringProp name="Argument.name">selectionFile</stringProp>
                <stringProp name="Argument.value">${__P(includecontroller.prefix,'..')}datasource/data/DB2_dataset_selection.data</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp elementType="Argument" name="ds_prefix">
                <stringProp name="Argument.name">ds_prefix</stringProp>
                <stringProp name="Argument.value">MySQL</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree />
          <JSR223Sampler enabled="false" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ generate AuthToken">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters" />
            <stringProp name="filename" />
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.ibm.bi.auth.AuthenticityToken;
import com.ibm.bi.auth.BiBase64;
import java.io.ByteArrayOutputStream;
log.debug("usersessionid=" + vars.get("COOKIE_usersessionid"));	
authToken = AuthenticityToken.generateToken(vars.get("COOKIE_usersessionid"));
log.debug("authToken=" + authToken);
vars.put("auth_token", authToken);</stringProp>
          </JSR223Sampler>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / Get content from parent folder ds">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="nav_filter">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">nav_filter</stringProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="fields">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2Cowner.defaultName%2CmodificationTime%2CcanBurst%2CiconURI%2CdefaultScreenTip%2CsearchPath%2CdefaultPortalAction</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">fields</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${parent_folderId}/items</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor enabled="false" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="process and generate auth token">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
function Base64() {
	// Note: no return statement here
}


Base64.prototype.encode64 = function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1,
    chr2,
    chr3;
  var enc1,
    enc2,
    enc3,
    enc4;
  var i = 0;

  do {
    chr1 = input.charCodeAt(i++);
    chr2 = input.charCodeAt(i++);
    chr3 = input.charCodeAt(i++);

    enc1 = chr1 &gt;&gt; 2;
    enc2 = ((chr1 &amp; 3) &lt;&lt; 4) | (chr2 &gt;&gt; 4);
    enc3 = ((chr2 &amp; 15) &lt;&lt; 2) | (chr3 &gt;&gt; 6);
    enc4 = chr3 &amp; 63;

    if (isNaN(chr2)) {
      enc3 = enc4 = 64;
    } else if (isNaN(chr3)) {
      enc4 = 64;
    }

    output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) +
         keyStr.charAt(enc3) + keyStr.charAt(enc4);
  } while (i &lt; input.length);

  return output;
};

Base64.prototype.decode64 = function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1,
    chr2,
    chr3;
  var enc1,
    enc2,
    enc3,
    enc4;
  var i = 0;

   // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 &lt;&lt; 2) | (enc2 &gt;&gt; 4);
    chr2 = ((enc2 &amp; 15) &lt;&lt; 4) | (enc3 &gt;&gt; 2);
    chr3 = ((enc3 &amp; 3) &lt;&lt; 6) | enc4;

    output += String.fromCharCode(chr1);

    if (enc3 != 64) {
      output += String.fromCharCode(chr2);
    }
    if (enc4 != 64) {
      output += String.fromCharCode(chr3);
    }
  } while (i &lt; input.length);

  return output;
};

function inspectString(input) {
  var length = input.length;
  var myarray = new Array();

  for (count = 0; count &lt; length; count++) {
  var charCode = input.charCodeAt(count);
  var othercharCode = input.charAt(count);
  myarray[count] = toHex(charCode);
}
  return myarray;
}

// toInt - convert a character array to an integer.
function toInt(stringArray, offset, len) {
   	var val = 0;
   	var minlen = Math.min(len, 4);

   	var stringlen = stringArray.length;
   	var char1 = stringArray.charAt(0);
   	var char2 = stringArray.charAt(1);
   	var char3 = stringArray.charAt(2);
   	var char4 = stringArray.charAt(3);

	// Concatanate the byte array into one variable.
   	for (var i = (minlen - 1); i &gt;= 0; i--) {
     val &lt;&lt;= 8;
   		var thischar = stringArray.charCodeAt(offset + i);
   		var mask = thischar &amp; 0x0FF;
     val |= thischar &amp; 0x00FF;
   	}

  return val;
}
function toHex(dec) {
        // create list of hex characters
  var hexCharacters = '0123456789ABCDEF';
        // if number is out of range return limit
  if (dec &lt; 0)
          {return "00"};
  if (dec &gt; 255)
          {return "FF"};
        // decimal equivalent of first hex character in converted number
  var i = Math.floor(dec / 16);
        // decimal equivalent of second hex character in converted number
  var j = dec % 16;
        // return hexadecimal equivalent
  return hexCharacters.charAt(i) + hexCharacters.charAt(j);
}
function generateAuthToken(userSessionId) {
  var authToken_version = 'V1';
  var cookiestring = userSessionId;
  var base64 = new Base64();
  var token = base64.decode64(cookiestring);// (new Buffer()).toString('ascii');
  // token.substring = function (start, end) {
  //   return token.slice(start, end).toString();
  // };
 
  var version = token.charCodeAt(0) &amp; 0xFF;

	// Extract timelen.
  var szTimelen = token.substring(1, 5);	// timelength
  
  
  var timelen = toInt(szTimelen, 0, 4);

	// Find the length of the user session id.
  var uidlenstart = 5 + timelen;
  var uidlenstop = uidlenstart + 4;
  var szuidlen = token.substring(uidlenstart, uidlenstop);
  var uidlen = toInt(szuidlen, 0, 4);

	// Extract the string for the usersessionid.
  var uidstart = uidlenstop;
  var uidstop = uidstart + uidlen;
  var uid = token.substring(uidstart, uidstop);

	// In a verison 1 USID token we only need the iserSessionID. In version 2+
	// extract the string for the algorithm. Position to the beginning of digest
	// algorithm length, ignore csk value.

  var cskIdLenStart = uidstop;			// cskidlen
  var cskIdLenStop = cskIdLenStart + 4;
  var szcskIdLen = token.substring(cskIdLenStart, cskIdLenStop);
  var cskIdLen = toInt(szcskIdLen, 0, 4);

  var cskidstart = cskIdLenStop;			// cskid
  var cskidstop = cskidstart + cskIdLen;

  if (version &gt;= 2) {
    var digAlgLenStart = cskidstop;			// digAlgLen
    var digAlgLenStop = digAlgLenStart + 4;
    var szdigAlgLen = token.substring(digAlgLenStart, digAlgLenStop);
    var digAlgLen = toInt(szdigAlgLen, 0, 4);

    var digAlgStart = digAlgLenStop;		// digAlg
    var digAlgStop = digAlgStart + digAlgLen;
    var szDigAlg = token.substring(digAlgStart, digAlgStop);

		// Now that we have a value for the algorithm, ensure that
		// it is valid and insert into our digest. This is more for coms
		// issues as it is validated server side.
   
    if (!(szDigAlg in { SHA: '', 'SHA-1': '', SHA1: '', 'SHA-256': '', 'SHA-384': '', 'SHA-512': '' })) {
      return 'bad digest algorithm';
    }

    var digLenStart = digAlgStop;			// diglen
  } else { // version 1
    var digLenStart = cskidstop;			// diglen
  }

  var digLenStop = digLenStart + 4;
  var szdigLen = token.substring(digLenStart, digLenStop);
  var digLen = toInt(szdigLen, 0, 4);

  var digStart = digLenStop;			// dig
  var digStop = digStart + digLen;
  var dig = token.substring(digStart, digStop);

  var authToken = authToken_version + dig;

	// Base64 encode.
  b64 = new Base64();
  var b64Token = b64.encode64(authToken);

	// return b64Token;
  return b64Token;
}
var usersessionid = vars.get("COOKIE_usersessionid")
var token = generateAuthToken(usersessionid);
log.info("Token is "+token);
vars.put('auth_token',token)</stringProp>
            </JSR223PreProcessor>
            <hashTree />
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Refer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get data module id">
              <stringProp name="JSONPostProcessor.referenceNames">datamodule_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_dataModuleName}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get data set id">
              <stringProp name="JSONPostProcessor.referenceNames">dataset_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_datasetName}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="if dataset exists delete it">
            <stringProp name="IfController.condition">${__groovy("${dataset_id}"!="NOTFOUND")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / delete dataset">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="force">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">force</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="recursive">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">recursive</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${dataset_id}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="IF data module exists">
            <stringProp name="IfController.condition">${__groovy("${datamodule_id}"!="NOTFOUND")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / open dataset perspective">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="attributes">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">type</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">attributes</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/datasets</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">authenticityToken</stringProp>
                    <stringProp name="Header.value" />
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">cafContextId</stringProp>
                    <stringProp name="Header.value">${cafContextId}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">authenticityToken</stringProp>
                    <stringProp name="Header.value">${auth_token}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-XSRF-TOKEN</stringProp>
                    <stringProp name="Header.value">${XSRF-TOKEN}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / get data module attribute">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="attributes">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">type</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">attributes</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${datamodule_id}/info</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">authenticityToken</stringProp>
                    <stringProp name="Header.value" />
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">cafContextId</stringProp>
                    <stringProp name="Header.value">${cafContextId}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">authenticityToken</stringProp>
                    <stringProp name="Header.value">${auth_token}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-XSRF-TOKEN</stringProp>
                    <stringProp name="Header.value">${XSRF-TOKEN}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / start report session">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:rns1='http://developer.cognos.com/schemas/reportService/1'&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type="bus:biBusHeader"&gt;&lt;bus:CAM xsi:type="bus:CAM"&gt;&lt;authenticityToken xsi:type="xsd:base64Binary"&gt;${auth_token}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type="bus:CAF"&gt;&lt;contextID xsi:type="xsd:string"&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type="bus:hdrSession"&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType="bus:formFieldVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:formFieldVar"&gt;&lt;name xsi:type="xsd:string"&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType="bus:userPreferenceVar[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type="xsd:string"&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:dispatcherTransportVar[]"&gt;&lt;item xsi:type="bus:dispatcherTransportVar"&gt;&lt;name xsi:type="xsd:string"&gt;rs&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:runSpecification&gt;&lt;bus:specification xsi:type="bus:reportServiceReportSpecification"&gt;&lt;bus:value xsi:type="bus:specification"&gt;&amp;lt;report xmlns=&amp;quot;http://developer.cognos.com/schemas/report/14.2/&amp;quot;           useStyleVersion=&amp;quot;10&amp;quot; expressionLocale=&amp;quot;en-us&amp;quot;&amp;gt;
				&amp;lt;modelPath type=&amp;quot;module&amp;quot;&amp;gt;${searchPath}/module[@name=&amp;amp;apos;${datasource_dataModuleName}&amp;amp;apos;]&amp;lt;/modelPath&amp;gt;
				&amp;lt;drillBehavior/&amp;gt;
				&amp;lt;queries&amp;gt;
					&amp;lt;query name=&amp;quot;Query1&amp;quot;&amp;gt;
						&amp;lt;source&amp;gt;
							&amp;lt;model/&amp;gt;
						&amp;lt;/source&amp;gt;
						&amp;lt;selection/&amp;gt;
					&amp;lt;/query&amp;gt;
				&amp;lt;/queries&amp;gt;
				&amp;lt;layouts&amp;gt;
					
				&amp;lt;layout&amp;gt;
						&amp;lt;reportPages&amp;gt;
							&amp;lt;page name=&amp;quot;Page1&amp;quot;&amp;gt;&amp;lt;style&amp;gt;&amp;lt;defaultStyles&amp;gt;&amp;lt;defaultStyle refStyle=&amp;quot;pg&amp;quot;/&amp;gt;&amp;lt;/defaultStyles&amp;gt;&amp;lt;/style&amp;gt;
								&amp;lt;pageBody&amp;gt;&amp;lt;style&amp;gt;&amp;lt;defaultStyles&amp;gt;&amp;lt;defaultStyle refStyle=&amp;quot;pb&amp;quot;/&amp;gt;&amp;lt;/defaultStyles&amp;gt;&amp;lt;/style&amp;gt;
									&amp;lt;contents&amp;gt;
										&amp;lt;HTMLItem&amp;gt;&amp;lt;XMLAttributes&amp;gt;&amp;lt;XMLAttribute name=&amp;quot;appUsage&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&amp;lt;XMLAttribute output=&amp;quot;HTML&amp;quot; name=&amp;quot;roid&amp;quot; value=&amp;quot;i21&amp;quot;/&amp;gt;&amp;lt;XMLAttribute output=&amp;quot;HTML&amp;quot; name=&amp;quot;specname&amp;quot; value=&amp;quot;HTMLItem&amp;quot;/&amp;gt;&amp;lt;/XMLAttributes&amp;gt;&amp;lt;dataSource&amp;gt;&amp;lt;staticValue&amp;gt;&amp;amp;lt;TABLE roid=&amp;amp;quot;i21&amp;amp;quot; specname=&amp;amp;quot;list&amp;amp;quot; style=&amp;amp;quot;cursor:default;;font-style: normal; font-variant: normal; font-weight: normal; font-size: medium; word-spacing: normal; letter-spacing: normal; text-transform: none; text-align: left; text-indent: 0px; line-height: normal; white-space: normal; overflow-wrap: initial; color: black;;color: rgb(0, 0, 0);;font-size: 8pt;;;border-collapse:collapse;height: 100%&amp;amp;quot; cellpadding=&amp;amp;quot;0&amp;amp;quot; cellspacing=&amp;amp;quot;0&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;TR&amp;amp;gt;&amp;amp;lt;TD roid=&amp;amp;quot;i22&amp;amp;quot; specname=&amp;amp;quot;listColumnTitleStyle&amp;amp;quot; style=&amp;amp;quot;cursor:default;border: 1px dashed silver;;padding-left: 5px; padding-right: 5px;;;text-align: center; vertical-align: top; padding: 4px 5px 4px 6px; background-image: url(&amp;amp;amp;quot;../reportstyles/images/silver_grad.png&amp;amp;amp;quot;); background-position: left top; background-repeat: repeat-x; background-color: rgb(231, 229, 229); color: rgb(51, 51, 51); border: 1px solid silver;;;;width:750px;color:#3C4646;background-color:#F4F4F4;font-family:HelvNeueRomanforIBM;font-size:14px;height:44px;line-height:44px&amp;amp;quot;&amp;amp;gt;&amp;amp;amp;nbsp;&amp;amp;lt;/TD&amp;amp;gt;&amp;amp;lt;/TR&amp;amp;gt;&amp;amp;lt;TR&amp;amp;gt;&amp;amp;lt;TD roid=&amp;amp;quot;i25&amp;amp;quot; specname=&amp;amp;quot;listColumnBodyStyle&amp;amp;quot; style=&amp;amp;quot;cursor:default;border: 1px dashed silver;;padding-left: 5px; padding-right: 5px;;;vertical-align: top; padding: 4px 5px; color: rgb(69, 69, 69); border: 1pt solid rgb(226, 226, 226);;;;color:#6D7777;font-family:HelvNeueRomanforIBM;font-size:14px;border-top:1px solid #ECECEC;border-bottom:1px solid #ECECEC;border-left:1px solid #C8D2D2;border-right:1px solid #C8D2D2;height:44px;line-height:44px;padding: 0 16px;width:90px; height:80px; border-bottom:none;&amp;amp;quot;&amp;amp;gt;&amp;amp;amp;nbsp;&amp;amp;lt;/TD&amp;amp;gt;&amp;amp;lt;/TR&amp;amp;gt;&amp;amp;lt;TR&amp;amp;gt;&amp;amp;lt;TD roid=&amp;amp;quot;i25&amp;amp;quot; specname=&amp;amp;quot;listColumnBodyStyle&amp;amp;quot; style=&amp;amp;quot;cursor:default;font-family: &amp;amp;amp;quot;Helvetica Neue&amp;amp;amp;quot;,Helvetica,&amp;amp;amp;quot;Arial Unicode MS&amp;amp;amp;quot;,&amp;amp;amp;quot;Andale WT&amp;amp;amp;quot;,Tahoma,Arial,&amp;amp;amp;quot;MS UI Gothic&amp;amp;amp;quot;,Gulim,SimSun,PMingLiU,Raghu8,sans-serif; font-size: 14px; font-weight: normal; font-style: normal; color: rgb(34, 34, 34);;border: 1px dashed silver;;padding-left: 5px; padding-right: 5px;;;vertical-align: top; padding: 4px 5px; color: rgb(69, 69, 69); border: 1pt solid rgb(226, 226, 226);;;;color:#6D7777;font-family:HelvNeueRomanforIBM;font-size:14px;border-top:1px solid #ECECEC;border-bottom:1px solid #ECECEC;border-left:1px solid #C8D2D2;border-right:1px solid #C8D2D2;height:44px;line-height:44px;padding: 0 16px;border-top:none; border-bottom:none; text-align:center;&amp;amp;quot;  colspan=&amp;amp;quot;5&amp;amp;quot;&amp;amp;gt;Add data here&amp;amp;lt;/TD&amp;amp;gt;&amp;amp;lt;/TR&amp;amp;gt;&amp;amp;lt;TR&amp;amp;gt;&amp;amp;lt;TD roid=&amp;amp;quot;i25&amp;amp;quot; specname=&amp;amp;quot;listColumnBodyStyle&amp;amp;quot; style=&amp;amp;quot;cursor:default;border: 1px dashed silver;;padding-left: 5px; padding-right: 5px;;;vertical-align: top; padding: 4px 5px; color: rgb(69, 69, 69); border: 1pt solid rgb(226, 226, 226);;;;color:#6D7777;font-family:HelvNeueRomanforIBM;font-size:14px;border-top:1px solid #ECECEC;border-bottom:1px solid #ECECEC;border-left:1px solid #C8D2D2;border-right:1px solid #C8D2D2;height:44px;line-height:44px;padding: 0 16px;border-top:none; height:100%&amp;amp;quot;&amp;amp;gt;&amp;amp;amp;nbsp;&amp;amp;lt;/TD&amp;amp;gt;&amp;amp;lt;/TR&amp;amp;gt;&amp;amp;lt;/TABLE&amp;amp;gt;&amp;lt;/staticValue&amp;gt;&amp;lt;/dataSource&amp;gt;&amp;lt;/HTMLItem&amp;gt;
									&amp;lt;/contents&amp;gt;
								&amp;lt;XMLAttributes&amp;gt;&amp;lt;XMLAttribute output=&amp;quot;HTML&amp;quot; name=&amp;quot;roid&amp;quot; value=&amp;quot;i16&amp;quot;/&amp;gt;&amp;lt;XMLAttribute output=&amp;quot;HTML&amp;quot; name=&amp;quot;specname&amp;quot; value=&amp;quot;pageBody&amp;quot;/&amp;gt;&amp;lt;/XMLAttributes&amp;gt;&amp;lt;/pageBody&amp;gt;
							&amp;lt;XMLAttributes&amp;gt;&amp;lt;XMLAttribute output=&amp;quot;HTML&amp;quot; name=&amp;quot;roid&amp;quot; value=&amp;quot;i12&amp;quot;/&amp;gt;&amp;lt;XMLAttribute output=&amp;quot;HTML&amp;quot; name=&amp;quot;specname&amp;quot; value=&amp;quot;page&amp;quot;/&amp;gt;&amp;lt;/XMLAttributes&amp;gt;&amp;lt;pageHeader&amp;gt;&amp;lt;contents&amp;gt;&amp;lt;pageNumber&amp;gt;&amp;lt;XMLAttributes&amp;gt;&amp;lt;XMLAttribute output=&amp;quot;HTML&amp;quot; name=&amp;quot;isViewerInfo&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&amp;lt;XMLAttribute output=&amp;quot;HTML&amp;quot; name=&amp;quot;specname&amp;quot; value=&amp;quot;pageNumber&amp;quot;/&amp;gt;&amp;lt;/XMLAttributes&amp;gt;&amp;lt;/pageNumber&amp;gt;&amp;lt;/contents&amp;gt;&amp;lt;XMLAttributes&amp;gt;&amp;lt;XMLAttribute output=&amp;quot;HTML&amp;quot; name=&amp;quot;isViewerInfo&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&amp;lt;/XMLAttributes&amp;gt;&amp;lt;/pageHeader&amp;gt;&amp;lt;/page&amp;gt;
						&amp;lt;/reportPages&amp;gt;
					&amp;lt;/layout&amp;gt;&amp;lt;/layouts&amp;gt;
			&amp;lt;XMLAttributes&amp;gt;&amp;lt;XMLAttribute output=&amp;quot;no&amp;quot; name=&amp;quot;RS_CreateExtendedDataItems&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&amp;lt;/XMLAttributes&amp;gt;&amp;lt;/report&amp;gt;&lt;/bus:value&gt;&lt;/bus:specification&gt;&lt;bus:parameterValues xmlns:bus='http://developer.cognos.com/schemas/bibus/3/' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENC:arrayType="bus:parameterValue[]" xsi:type="SOAP-ENC:Array"&gt;&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType="bus:option[]" xsi:type="SOAP-ENC:Array"&gt;&lt;item xsi:type="bus:genericOptionAnyURI"&gt;&lt;bus:name xsi:type="xsd:string"&gt;runOptionEnum#globalParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;[]&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionInt"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:int"&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionStringArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xsd:string[1]"&gt;&lt;item&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:asynchOptionEncoding"&gt;&lt;bus:name xsi:type="bus:asynchOptionEnum"&gt;attachmentEncoding&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:encodingEnum"&gt;MIME&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionString"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;promptFormat&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;XHTMLFRGMT&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionAnyURI"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;outputLocation&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionData"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;data&lt;/bus:name&gt;&lt;bus:value xsi:type="bus:dataEnum"&gt;runWithAllData&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionBoolean"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type="xs:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:runOptionNameValueArray"&gt;&lt;bus:name xsi:type="bus:runOptionEnum"&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="bus:nameValue[]"&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;CVGateway&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type="bus:nameValue"&gt;&lt;name xsi:type="xsd:string"&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type="xsd:string"&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type="bus:genericOptionBoolean"&gt;&lt;bus:name xsi:type="xsd:string"&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;&lt;bus:value xsi:type="xsd:boolean"&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:runSpecification&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201703/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">cafContextId</stringProp>
                    <stringProp name="Header.value">${cafContextId}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">authenticityToken</stringProp>
                    <stringProp name="Header.value">${auth_token}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-XSRF-TOKEN</stringProp>
                    <stringProp name="Header.value">${XSRF-TOKEN}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get soap cafContextId">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">soap_cafContextId</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;bus:contextID xsi:type="xs:string"&gt;(.*)&lt;\/bus:contextID&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get data set selection content">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol">file</stringProp>
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${__P(includecontroller.prefix,'..')}datasource/data/${ds_prefix}_dataset_selection.data</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="process selection file">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">selection</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="process variables in selection">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var selection=vars.get('selection');
var dmName=vars.get('datasource_dataModuleName').replace(/\s/g,'_');
selection=selection.replace(/\$\{datasource_dataModuleName\}/g,dmName);
selection=selection.replace(/\$\{datasource_datasetName\}/g,vars.get("datasource_datasetName"))
selection=selection.replace(/\$\{soap_cafContextId\}/g,vars.get("soap_cafContextId"))
selection=selection.replace(/\$\{searchPath\}/g,vars.get("searchPath"))
selection=selection.replace(/\$\{auth_token\}/g,vars.get("auth_token"))
vars.put('selection',selection);</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / create data set">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${selection}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201703/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">cafContextId</stringProp>
                    <stringProp name="Header.value">${cafContextId}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">authenticityToken</stringProp>
                    <stringProp name="Header.value">${auth_token}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-XSRF-TOKEN</stringProp>
                    <stringProp name="Header.value">${XSRF-TOKEN}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ create_dashboard_dm">
              </GenericController>
            <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="create dashboard from data module" />
        <hashTree>
          <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="Argument" name="parent_folderId">
                <stringProp name="Argument.name">parent_folderId</stringProp>
                <stringProp name="Argument.value">.my_folders</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / Get content from parent folder">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="nav_filter">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">nav_filter</stringProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="fields">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2Cowner.defaultName%2CmodificationTime%2CcanBurst%2CiconURI%2CdefaultScreenTip%2CsearchPath%2CdefaultPortalAction</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">fields</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${parent_folderId}/items</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Refer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get data module id">
              <stringProp name="JSONPostProcessor.referenceNames">datamodule_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_dataModuleName}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get dashboard id">
              <stringProp name="JSONPostProcessor.referenceNames">dashboard_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_dashboardName}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="if dashboard exists delete it">
            <stringProp name="IfController.condition">${__groovy("${dashboard_id}"!="NOTFOUND")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / delete orginal dashboard">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="force">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">force</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="recursive">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">recursive</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${dashboard_id}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="if data module exists">
            <stringProp name="IfController.condition">${__groovy("${datamodule_id}"!="NOTFOUND")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / open perspectives for create dashboard">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/createBoard</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / open perspectives for ui_appbar">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/createBoard</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <JSR223Sampler enabled="false" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="convert spec to string">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
var spec={  
   "name":vars.get("datasource_dashboardName"),
   "layout":{  
      "id":"page0",
      "items":[  
         {  
            "id":"page1",
            "css":"templateBox aspectRatio_default",
            "items":[  
               {  
                  "id":"page2",
                  "style":{  
                     "top":"0%",
                     "left":"0%",
                     "right":"75%",
                     "bottom":"75%"
                  },
                  "type":"templateDropZone",
                  "templateName":"dz1",
                  "relatedLayouts":"|model0000015f37c8927f_00000003|"
               },
               {  
                  "id":"page3",
                  "css":"noBorderLeft",
                  "style":{  
                     "top":"0%",
                     "left":"25%",
                     "right":"50%",
                     "bottom":"75%"
                  },
                  "type":"templateDropZone",
                  "templateName":"dz3"
               },
               {  
                  "id":"page4",
                  "css":"noBorderLeft",
                  "style":{  
                     "top":"0%",
                     "left":"50%",
                     "right":"25%",
                     "bottom":"75%"
                  },
                  "type":"templateDropZone",
                  "templateName":"dz4"
               },
               {  
                  "id":"page5",
                  "css":"noBorderLeft",
                  "style":{  
                     "top":"0%",
                     "left":"75%",
                     "right":"00%",
                     "bottom":"75%"
                  },
                  "type":"templateDropZone",
                  "templateName":"dz5"
               },
               {  
                  "id":"page6",
                  "css":"noBorderTop",
                  "style":{  
                     "top":"25%",
                     "left":"0%",
                     "right":"0%",
                     "bottom":"0%"
                  },
                  "type":"templateDropZone",
                  "templateName":"dz2"
               },
               {  
                  "id":"model0000015f37c8927f_00000003",
                  "style":{  
                     "top":"0.1949317738791423%",
                     "left":"0.1072961373390558%",
                     "height":"24.56140350877193%",
                     "width":"24.78540772532189%"
                  },
                  "type":"widget",
                  "relatedLayouts":"page2"
               }
            ],
            "type":"scalingAbsolute"
         }
      ],
      "type":"container",
      "templateName":"Template4"
   },
   "theme":"defaultTheme",
   "version":1006,
   "eventGroups":[  
      {  
         "id":"page1:1",
         "widgetIds":[  
            "model0000015f37c8927f_00000003"
         ]
      }
   ],
   "dataSources":{  
      "version":"1.0",
      "sources":[  
         {  
            "id":"model0000015f37c86040_00000001",
            "assetId":vars.get("datamodule_id"),
            "type":"module",
            "name":vars.get("datasource_dataModuleName"),
            "shaping":{  
               "embeddedModuleUpToDate":true
            }
         }
      ]
   },
   "pageContext":[  

   ],
   "widgets":{  
      "model0000015f37c8927f_00000003":{  
         "id":"model0000015f37c8927f_00000003",
         "data":{  
            "dataViews":[  
               {  
                  "modelRef":"model0000015f37c86040_00000001",
                  "dataItems":[  
                     {  
                        "id":"model0000015f37c8927f_00000000",
                        "itemId":"PRODUCT_LINE.PRODUCT_LINE_EN",
                        "itemLabel":"Product Line En"
                     },
                     {  
                        "id":"model0000015f37c8c44f_00000000",
                        "itemId":"ORDER_METHOD.ORDER_METHOD_EN",
                        "itemLabel":"Order Method En"
                     },
                     {  
                        "id":"model0000015f37c8eb2c_00000000",
                        "itemId":"ORDER_DETAILS.QUANTITY",
                        "itemLabel":"Quantity"
                     }
                  ]
               }
            ]
         },
         "slotmapping":{  
            "slots":[  
               {  
                  "name":"categories",
                  "dataItems":[  
                     "model0000015f37c8927f_00000000"
                  ],
                  "caption":"x-axis"
               },
               {  
                  "name":"series",
                  "dataItems":[  
                     "model0000015f37c8c44f_00000000"
                  ],
                  "caption":"Color"
               },
               {  
                  "name":"values",
                  "dataItems":[  
                     "model0000015f37c8eb2c_00000000"
                  ],
                  "caption":"y-axis"
               }
            ]
         },
         "type":"live",
         "name":"",
         "visId":"com.ibm.vis.rave2line"
      }
   }
}
vars.put("dashboard_spec",JSON.stringify(spec).replace(/"/g,'\\"'));</stringProp>
            </JSR223Sampler>
            <hashTree />
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get dashboard spec_t">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol">file</stringProp>
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${__P(includecontroller.prefix,'..')}datasource/data/${ds_prefix}_dashboard_spec.data</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="process selection file">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dashboard_spec</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var selection=vars.get('dashboard_spec');
selection=selection.replace(/\$\{datamodule_id\}/g,vars.get("datamodule_id"));
vars.put('dashboard_spec',selection);</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / create dashboard">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{"defaultName":"${datasource_dashboardName}","type":"exploration","specification":"${dashboard_spec}","deploymentReferences":[{"objects":[{"type":"module","searchPath":"storeID(\"${datamodule_id}\")"}],"name":{"en-us":"${datamodule_id}"}}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.my_folders/items</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ create_dashboard_ds">
              </GenericController>
            <hashTree>
        <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments">
            <elementProp elementType="Argument" name="parent_folderId">
              <stringProp name="Argument.name">parent_folderId</stringProp>
              <stringProp name="Argument.value">.my_folders</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp elementType="Argument" name="configurationFile">
              <stringProp name="Argument.name">configurationFile</stringProp>
              <stringProp name="Argument.value">${__P(includecontroller.prefix,'..')}datasource/data/DB2_CreateDataModule.json</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree />
        <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: GetDatassetIDAndDashboardID">
          <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="HTTPArgument" name="nav_filter">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">nav_filter</stringProp>
              </elementProp>
              <elementProp elementType="HTTPArgument" name="fields">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2Cowner.defaultName%2CmodificationTime%2CcanBurst%2CiconURI%2CdefaultScreenTip%2CsearchPath%2CdefaultPortalAction</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">fields</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain" />
          <stringProp name="HTTPSampler.port" />
          <stringProp name="HTTPSampler.protocol" />
          <stringProp name="HTTPSampler.contentEncoding" />
          <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${parent_folderId}/items</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re" />
          <stringProp name="HTTPSampler.connect_timeout" />
          <stringProp name="HTTPSampler.response_timeout" />
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp elementType="Header" name="User-Agent">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="Accept-Encoding">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="Accept">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="Accept-Language">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="">
                <stringProp name="Header.name">Refer</stringProp>
                <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="">
                <stringProp name="Header.name">Content-type</stringProp>
                <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get data set id">
            <stringProp name="JSONPostProcessor.referenceNames">dataset_id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_datasetName}")].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree />
          <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get dashboard id">
            <stringProp name="JSONPostProcessor.referenceNames">dashboard_id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_dashboardName_ds}")].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree />
        </hashTree>
        <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="if dataset exists">
          <stringProp name="IfController.condition">${__groovy("${dataset_id}" != "")}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="if dashboard exists delete it">
            <stringProp name="IfController.condition">${__groovy("${dashboard_id}" != "")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: delete dashboard">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="force">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">force</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="recursive">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">recursive</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${dashboard_id}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Open create board perspective">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/createBoard</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Refer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: get dataset dashboard specification">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol">file</stringProp>
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${__P(includecontroller.prefix,'..')}datasource/data/${ds_prefix}_dataset_dashboard_spec.data</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="process selection file">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">dataset_dashboard_spec</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default" />
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var selection=vars.get('dataset_dashboard_spec');
selection=selection.replace(/\$\{dataset_id\}/g,vars.get("dataset_id"));
selection=selection.replace(/\$\{datasource_datasetName\}/g,vars.get("datasource_datasetName"));
selection=selection.replace(/\$\{datasource_dashboardName_ds\}/g,vars.get("datasource_dashboardName_ds"));
vars.put('dataset_dashboard_spec',selection);</stringProp>
            </JSR223PostProcessor>
            <hashTree />
            <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Post save dashboard into my folder request">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{"defaultName":"${datasource_dashboardName_ds}","type":"exploration","specification":"${dataset_dashboard_spec}","deploymentReferences":[{"objects":[{"type":"dataSet2","searchPath":"storeID(\"${dataset_id}\")"}],"name":{"en-us":"${dataset_id}"}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${parent_folderId}/items</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Refer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ create_report_dm">
              </GenericController>
            <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="create report from data module" />
        <hashTree>
          <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="Argument" name="parent_folderId">
                <stringProp name="Argument.name">parent_folderId</stringProp>
                <stringProp name="Argument.value">.my_folders</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / Get content from parent folder">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="nav_filter">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">nav_filter</stringProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="fields">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2Cowner.defaultName%2CmodificationTime%2CcanBurst%2CiconURI%2CdefaultScreenTip%2CsearchPath%2CdefaultPortalAction</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">fields</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${parent_folderId}/items</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Refer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get data module id">
              <stringProp name="JSONPostProcessor.referenceNames">datamodule_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_dataModuleName}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report id">
              <stringProp name="JSONPostProcessor.referenceNames">report_id_dm</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_reportName_DM}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree />
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="if report exists delete it">
            <stringProp name="IfController.condition">${__groovy("${report_id_dm}" !="NOTFOUND")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / delete orginal report">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="force">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">force</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="recursive">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">recursive</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id_dm}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="if data module exists">
            <stringProp name="IfController.condition">${__groovy("${datamodule_id}"!="NOTFOUND")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get data report content">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol">file</stringProp>
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${__P(includecontroller.prefix,'..')}datasource/data/${ds_prefix}_datareport.data</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="process selection file">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">selection</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="process variables in selection">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var selection=vars.get('selection');
selection=selection.replace(/\$\{cafContextId\}/g,vars.get("cafContextId"))
selection=selection.replace(/\$\{searchPath\}/g,vars.get("searchPath"))
selection=selection.replace(/\$\{auth_token\}/g,vars.get("auth_token"))
vars.put('selection',selection);</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: / create report">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${selection}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201703/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">cafContextId</stringProp>
                    <stringProp name="Header.value">${cafContextId}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">authenticityToken</stringProp>
                    <stringProp name="Header.value">${auth_token}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-XSRF-TOKEN</stringProp>
                    <stringProp name="Header.value">${XSRF-TOKEN}</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ create_storyA_dm">
              </GenericController>
            <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="create dashboard from data module" />
        <hashTree>
          <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="Argument" name="parent_folderId">
                <stringProp name="Argument.name">parent_folderId</stringProp>
                <stringProp name="Argument.value">.my_folders</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get content from parent folder">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="nav_filter">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">nav_filter</stringProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="fields">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2Cowner.defaultName%2CmodificationTime%2CcanBurst%2CiconURI%2CdefaultScreenTip%2CsearchPath%2CdefaultPortalAction</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">fields</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${parent_folderId}/items</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Refer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get data module id">
              <stringProp name="JSONPostProcessor.referenceNames">datamodule_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_dataModuleName}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get story A id">
              <stringProp name="JSONPostProcessor.referenceNames">story_A_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_storyNameA}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="Check if story A exists">
            <stringProp name="IfController.condition">${__groovy("${story_A_id}"!="NOTFOUND")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: delete orginal story A">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="force">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">force</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="recursive">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">recursive</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${story_A_id}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="if data module exists">
            <stringProp name="IfController.condition">${__groovy("${datamodule_id}"!="NOTFOUND")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: open perspectives for create story">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/createBoard</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get story A specification">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol">file</stringProp>
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${__P(includecontroller.prefix,'..')}datasource/data/${ds_prefix}_storyA_spec.data</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="process selection file">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">storyA_spec</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var selection=vars.get('storyA_spec');
selection=selection.replace(/\$\{datamodule_id\}/g,vars.get("datamodule_id"));
selection=selection.replace(/\$\{datasource_dataModuleName\}/g,vars.get("datasource_dataModuleName"));
selection=selection.replace(/\$\{datasource_storyNameA\}/g,vars.get("datasource_storyNameA"));
vars.put('storyA_spec',selection);</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: create story">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{
	"defaultName": "${datasource_storyNameA}",
	"type": "exploration",
	"specification": "${storyA_spec}",
	"deploymentReferences": [{
		"objects": [{
			"type": "module",
			"searchPath": "storeID(\"${datamodule_id}\")"
		}],
		"name": {
			"en-us": "${datamodule_id}"
		}
	}],
	"iconURI": "#common-catalog",
	"defaultScreenTip": "story"
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.my_folders/items</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ create_storyA_ds">
              </GenericController>
            <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="create dashboard from data set" />
        <hashTree>
          <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="Argument" name="parent_folderId">
                <stringProp name="Argument.name">parent_folderId</stringProp>
                <stringProp name="Argument.value">.my_folders</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get content from parent folder">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="nav_filter">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">nav_filter</stringProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="fields">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2Cowner.defaultName%2CmodificationTime%2CcanBurst%2CiconURI%2CdefaultScreenTip%2CsearchPath%2CdefaultPortalAction</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">fields</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${parent_folderId}/items</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Refer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get data set id">
              <stringProp name="JSONPostProcessor.referenceNames">dataset_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_datasetName}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get story A id">
              <stringProp name="JSONPostProcessor.referenceNames">story_A_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_storyNameA_ds}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="Check if story A exists">
            <stringProp name="IfController.condition">${__groovy("${story_A_id}"!="NOTFOUND")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: delete orginal story A">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="force">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">force</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="recursive">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">recursive</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${story_A_id}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="if data module exists">
            <stringProp name="IfController.condition">${__groovy("${datamodule_id}"!="NOTFOUND")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: open perspectives for create story">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/createBoard</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get dataset story A specification">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol">file</stringProp>
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${__P(includecontroller.prefix,'..')}datasource/data/${ds_prefix}_dataset_storyA_spec.data</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="process selection file">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dataset_storyA_spec</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var selection=vars.get('dataset_storyA_spec');
selection=selection.replace(/\$\{dataset_id\}/g,vars.get("dataset_id"));
selection=selection.replace(/\$\{datasource_datasetName\}/g,vars.get("datasource_datasetName"));
selection=selection.replace(/\$\{datasource_storyNameA_ds\}/g,vars.get("datasource_storyNameA_ds"));
vars.put('dataset_storyA_spec',selection);</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: create story">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{
	"defaultName": "${datasource_storyNameA_ds}",
	"type": "exploration",
	"specification": "${dataset_storyA_spec}",
	"deploymentReferences": [{
		"objects": [{
			"type": "dataSet2",
			"searchPath": "storeID(\"${dataset_id}\")"
		}],
		"name": {
			"en-us": "${dataset_id}"
		}
	}],
	"iconURI": "#common-catalog",
	"defaultScreenTip": "story"
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.my_folders/items</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ create_storyB_dm">
              </GenericController>
            <hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="create dashboard from data module" />
        <hashTree>
          <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="Argument" name="parent_folderId">
                <stringProp name="Argument.name">parent_folderId</stringProp>
                <stringProp name="Argument.value">.my_folders</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree />
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get content from parent folder">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="nav_filter">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">nav_filter</stringProp>
                </elementProp>
                <elementProp elementType="HTTPArgument" name="fields">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">userInterfaces%2Cowner.id%2CdefaultName%2Cdisabled%2Chidden%2Cpermissions%2CrunInAdvancedViewer%2Cowner.defaultName%2CmodificationTime%2CcanBurst%2CiconURI%2CdefaultScreenTip%2CsearchPath%2CdefaultPortalAction</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">fields</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${parent_folderId}/items</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Refer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get data module id">
              <stringProp name="JSONPostProcessor.referenceNames">datamodule_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_dataModuleName}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
            </JSONPostProcessor>
            <hashTree />
            <JSONPostProcessor enabled="true" guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get story B id">
              <stringProp name="JSONPostProcessor.referenceNames">story_B_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[?(@.defaultName=="${datasource_storyNameB}")].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="Check if story B exists">
            <stringProp name="IfController.condition">${__groovy("${story_B_id}"!="NOTFOUND")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: delete orginal story B">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="force">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">force</stringProp>
                  </elementProp>
                  <elementProp elementType="HTTPArgument" name="recursive">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">recursive</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${story_B_id}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="if data module exists">
            <stringProp name="IfController.condition">${__groovy("${datamodule_id}"!="NOTFOUND")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp><boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: open perspectives for create story">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/createBoard</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: Get story B specification">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol">file</stringProp>
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${__P(includecontroller.prefix,'..')}datasource/data/${ds_prefix}_storyB_spec.data</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor enabled="true" guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="process selection file">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">storyB_spec</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default" />
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree />
              <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters" />
                <stringProp name="filename" />
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var selection=vars.get('storyB_spec');
selection=selection.replace(/\$\{datamodule_id\}/g,vars.get("datamodule_id"));
selection=selection.replace(/\$\{datasource_dataModuleName\}/g,vars.get("datasource_dataModuleName"));
selection=selection.replace(/\$\{datasource_storyNameB\}/g,vars.get("datasource_storyNameB"));
vars.put('storyB_spec',selection);</stringProp>
              </JSR223PostProcessor>
              <hashTree />
              <DebugPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree />
            </hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${step_name} ${DS_Name}: create story">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp elementType="HTTPArgument" name="">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{
	"defaultName": "${datasource_storyNameB}",
	"type": "exploration",
	"specification": "${storyB_spec}",
	"deploymentReferences": [{
		"objects": [{
			"type": "module",
			"searchPath": "storeID(\"${datamodule_id}\")"
		}],
		"name": {
			"en-us": "${datamodule_id}"
		}
	}],
	"iconURI": "#common-catalog",
	"defaultScreenTip": "story"
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.my_folders/items</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
        </hashTree>
        <JSR223Sampler enabled="true" guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set tr_prefix and output">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters" />
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">vars.put("tr_prefix", "");
</stringProp>
        </JSR223Sampler>
        <hashTree />
      </hashTree>
    </hashTree>
        <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="final logoff" />
        <hashTree>
          <GenericController enabled="true" guiclass="LogicControllerGui" testclass="GenericController" testname="/ logoff">
            </GenericController>
          <hashTree>
        <TransactionController enabled="true" guiclass="TransactionControllerGui" testclass="TransactionController" testname="logoff">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/users/~/mrus">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/users/~/mrus</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/users/~/mrus/data">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp elementType="HTTPArgument" name="">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{"id":"data","list":[{"formatedPath":"null","id":"null","defaultName":"Dummy Tile - Ignore","type":"null","owner":"null","selfUrl":"/bi/v1/objects/null","permissions":["execute","read","setPolicy","traverse","write"],"hidden":false,"disabled":false,"_timestamp":-1,"timestamp":"9999-99-99T99:99:99.999Z"}],"url":"/bi/v1/users/~/mrus/data","timestamp":"9999-99-99T99:99:99.999Z"}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/users/~/mrus/data</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/login">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/login</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
            <JSR223PostProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="set loggedOn false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters" />
              <stringProp name="filename" />
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put("loggedOn", "false");</stringProp>
            </JSR223PostProcessor>
            <hashTree />
          </hashTree>
          <IfController enabled="true" guiclass="IfControllerPanel" testclass="IfController" testname="If not anonymous">
            <stringProp name="IfController.condition">${__groovy("${sessionType}"!="anonymous")}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/login">
              <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
                <collectionProp name="Arguments.arguments" />
              </elementProp>
              <stringProp name="HTTPSampler.domain" />
              <stringProp name="HTTPSampler.port" />
              <stringProp name="HTTPSampler.protocol" />
              <stringProp name="HTTPSampler.contentEncoding" />
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/login</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re" />
              <stringProp name="HTTPSampler.connect_timeout" />
              <stringProp name="HTTPSampler.response_timeout" />
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp elementType="Header" name="User-Agent">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Encoding">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="X-Requested-With">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Referer">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html</stringProp>
                  </elementProp>
                  <elementProp elementType="Header" name="Accept-Language">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree />
              <ResponseAssertion enabled="true" guiclass="AssertionGui" testclass="ResponseAssertion" testname="expect 441 when auth required">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="443265130">441|401</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message" />
              </ResponseAssertion>
              <hashTree />
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/ui/sso">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding" />
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/ui/sso</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
          <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ /bi/v1/perspectives/login">
            <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments">
              <collectionProp name="Arguments.arguments" />
            </elementProp>
            <stringProp name="HTTPSampler.domain" />
            <stringProp name="HTTPSampler.port" />
            <stringProp name="HTTPSampler.protocol" />
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re" />
            <stringProp name="HTTPSampler.connect_timeout" />
            <stringProp name="HTTPSampler.response_timeout" />
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp elementType="Header" name="User-Agent">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Encoding">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="X-Requested-With">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Referer">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Accept-Language">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp elementType="Header" name="Content-Type">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree />
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
        <JSR223PreProcessor enabled="true" guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="apply xsrf-token">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${XSRF-TOKEN}</stringProp>
          <stringProp name="filename" />
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;

currentSampler = ctx.getCurrentSampler();

if (currentSampler instanceof HTTPSamplerBase &amp;&amp; args.length &gt; 0) {
	xsrfToken = args[0];
	if (!xsrfToken.contains("XSRF-TOKEN") &amp;&amp; !"".equals(xsrfToken)) {
		log.debug("new xsrf-token " + xsrfToken);
		headerManager = currentSampler.getHeaderManager();
		headerManager.removeHeaderNamed("X-XSRF-TOKEN");
		headerManager.add(new Header("X-XSRF-TOKEN", xsrfToken));
	}
}</stringProp>
        </JSR223PreProcessor>
        <hashTree />
        <ConfigTestElement enabled="true" guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults">
          <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments" />
          </elementProp>
          <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
          <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding" />
          <stringProp name="HTTPSampler.path" />
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">8</stringProp>
          <stringProp name="HTTPSampler.embedded_url_re">nothingshouldmatchthis</stringProp>
          <stringProp name="HTTPSampler.proxyHost">${PROXY_HOST}</stringProp>
          <stringProp name="HTTPSampler.proxyPort">${PROXY_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout" />
          <stringProp name="HTTPSampler.response_timeout" />
        </ConfigTestElement>
        <hashTree />
        <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
          <collectionProp name="HeaderManager.headers">
            <elementProp elementType="Header" name="User-Agent&#09;Mozilla/5.0 (Windows NT 6.1; WOW64; rv">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree />
        <CookieManager enabled="true" guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager">
          <collectionProp name="CookieManager.cookies" />
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree />
      </hashTree>
      <ResultCollector enabled="true" guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename" />
      </ResultCollector>
      <hashTree />
      <ResultCollector enabled="true" guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename" />
      </ResultCollector>
      <hashTree />
      <ResultCollector enabled="true" guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - Errors">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${__P(responseErrorFile,errors.xml)}</stringProp>
      </ResultCollector>
      <hashTree />
      <ResultCollector enabled="true" guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename" />
      </ResultCollector>
      <hashTree />
      <kg.apc.jmeter.reporters.AutoStop enabled="true" guiclass="kg.apc.jmeter.reporters.AutoStopGui" testclass="kg.apc.jmeter.reporters.AutoStop" testname="autostop if error rate &gt;10% for 10s">
        <stringProp name="avg_response_time">1000000</stringProp>
        <stringProp name="avg_response_time_length">10</stringProp>
        <stringProp name="error_rate">10</stringProp>
        <stringProp name="error_rate_length">10</stringProp>
        <stringProp name="avg_response_latency">500000</stringProp>
        <stringProp name="avg_response_latency_length">10</stringProp>
      </kg.apc.jmeter.reporters.AutoStop>
      <hashTree />
    </hashTree>
  </hashTree>
</jmeterTestPlan>