<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
      <hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While responseCode==202" enabled="true">
          <stringProp name="WhileController.condition">${__groovy(&quot;${responseCode}&quot;==&quot;202&quot; &amp;&amp; &quot;${responseCode}&quot;!=&quot;ERROR&quot;)}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get conversation update" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${conversationUrl}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="get conversation details from previous response" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//pattern_loc = java.util.regex.Pattern.compile(&quot;Location: (.*)&quot;)
//pattern_xcaa = java.util.regex.Pattern.compile(&quot;X-CA-Affinity: (.*)&quot;)
prevRH = prev.getResponseHeaders()

//pattern.matcher(prevRH).find()
log.debug(Label + &quot; -- &quot; + prevRH)
log.debug(Label + &quot; -- &quot; + &quot;responseCode: ${responseCode}&quot;)

if (prevRH.contains(&quot;X-CA-Affinity&quot;)) {
	// extract using regex match on group 0 item 0
	conversationUrl = (prevRH =~ /Location: (.*)/)[0][1]
	XCAAffinity = (prevRH =~ /X-CA-Affinity: (.*)/)[0][1]

	vars.put(&quot;conversationUrl&quot;, conversationUrl)
	vars.put(&quot;X-CA-Affinity&quot;, XCAAffinity)
	
	log.debug(Label + &quot; -- conv: &quot;+conversationUrl)
	log.debug(Label + &quot; -- xcaa: &quot;+XCAAffinity)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responsdeCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responseCode</stringProp>
              <stringProp name="RegexExtractor.regex">20[02]</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">ERROR</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 received" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1478545310">20[02]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="check restAsyncLoopCount" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">if (&quot;${responseCode}&quot; != 200) {
	loopCount = Integer.parseInt(&quot;${restAsyncLoopCount}&quot;)
	if (loopCount &gt;= 100) {
		log.error(&quot;rest async max 100 iterations reached&quot;)
		prev.setSuccessful(false)
		prev.setResponseMessage(&quot;rest async max 100 iterations reached&quot;)
	} 
	vars.put(&quot;restAsyncLoopCount&quot;, loopCount.toString())
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
