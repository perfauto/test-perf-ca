<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="manual inputs for debugging - normally disabled, do not delete" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="url_base" elementType="Argument">
              <stringProp name="Argument.name">url_base</stringProp>
              <stringProp name="Argument.value">http://${serverName}:${serverPort}${urlPath}/bi</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">mostly for the referer header value</stringProp>
            </elementProp>
            <elementProp name="report_id" elementType="Argument">
              <stringProp name="Argument.name">report_id</stringProp>
              <stringProp name="Argument.value">iB8B0EDF0EDCA442D86FF534AE66CA5B6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">ID from the properties of the report</stringProp>
            </elementProp>
            <elementProp name="report_name" elementType="Argument">
              <stringProp name="Argument.name">report_name</stringProp>
              <stringProp name="Argument.value">master_detail</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="report_output_format" elementType="Argument">
              <stringProp name="Argument.name">report_output_format</stringProp>
              <stringProp name="Argument.value">HTML</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="report_datacheck" elementType="Argument">
              <stringProp name="Argument.name">report_datacheck</stringProp>
              <stringProp name="Argument.value">14,111,228.67</stringProp>
              <stringProp name="Argument.desc">something that only appears in the report output, indicating a successful run</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="report_expected_chart_count" elementType="Argument">
              <stringProp name="Argument.name">report_expected_chart_count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">total number of expected charts in the report output</stringProp>
            </elementProp>
            <elementProp name="report_actions_1" elementType="Argument">
              <stringProp name="Argument.name">report_actions_1</stringProp>
              <stringProp name="Argument.value">nextPage</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="report_actions_datacheck_1" elementType="Argument">
              <stringProp name="Argument.name">report_actions_datacheck_1</stringProp>
              <stringProp name="Argument.value">1,969,460.13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="report_actions_2" elementType="Argument">
              <stringProp name="Argument.name">report_actions_2</stringProp>
              <stringProp name="Argument.value">nextPage</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="report_actions_datacheck_2" elementType="Argument">
              <stringProp name="Argument.name">report_actions_datacheck_2</stringProp>
              <stringProp name="Argument.value">516,972.39</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tr_prefix" elementType="Argument">
              <stringProp name="Argument.name">tr_prefix</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">used for things like &quot;first_&quot; for identifying cold cache requests</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">This &quot;User Defined Variables&quot; test element should be disabled for normal test execution. It contains a list of all inputs required to run this fragment. </stringProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="run report in full interactivity" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}runspec_${report_name}" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="report execution config" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="asyncTimeout" elementType="Argument">
                  <stringProp name="Argument.name">asyncTimeout</stringProp>
                  <stringProp name="Argument.value">300</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="attachmentOption" elementType="Argument">
                  <stringProp name="Argument.name">attachmentOption</stringProp>
                  <stringProp name="Argument.value">&lt;item xsi:type=&quot;bus:asynchOptionEncoding&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;attachmentEncoding&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;bus:encodingEnum&quot;&gt;MIME&lt;/bus:value&gt;&lt;/item&gt;</stringProp>
                  <stringProp name="Argument.desc">this param is used to enable the report output to be a multipart attachment to the runspec response</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="attachmentOption_orig" elementType="Argument">
                  <stringProp name="Argument.name">attachmentOption_orig</stringProp>
                  <stringProp name="Argument.value">&lt;item xsi:type=&quot;bus:asynchOptionEncoding&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;attachmentEncoding&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;bus:encodingEnum&quot;&gt;MIME&lt;/bus:value&gt;&lt;/item&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If first_open" enabled="true">
              <stringProp name="TestPlan.comments">The perspective request should only be called for the first opens</stringProp>
              <stringProp name="IfController.condition">${__groovy(&quot;${tr_prefix}&quot;==&quot;first_&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ open authoring perspective" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/authoring</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ generate AuthToken" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.auth.AuthenticityToken;
import com.ibm.bi.auth.BiBase64;
import java.io.ByteArrayOutputStream;
log.debug(&quot;usersessionid=&quot; + vars.get(&quot;COOKIE_usersessionid&quot;));	
authToken = AuthenticityToken.generateToken(vars.get(&quot;COOKIE_usersessionid&quot;));
log.debug(&quot;authToken=&quot; + authToken);
vars.put(&quot;authToken&quot;, authToken);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get configuration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:bus=&apos;http://developer.cognos.com/schemas/bibus/3/&apos; xmlns:rns1=&apos;http://developer.cognos.com/schemas/reportService/1&apos;&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type=&quot;bus:biBusHeader&quot;&gt;&lt;bus:CAM xsi:type=&quot;bus:CAM&quot;&gt;&lt;authenticityToken xsi:type=&quot;xsd:base64Binary&quot;&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type=&quot;bus:CAF&quot;&gt;&lt;contextID xsi:type=&quot;xsd:string&quot;&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType=&quot;bus:userPreferenceVar[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:dispatcherTransportVar[]&quot;&gt;&lt;item xsi:type=&quot;bus:dispatcherTransportVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;rs&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;bus:getConfiguration&gt;&lt;properties xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:propEnum[]&quot;&gt;&lt;item&gt;supportedContentLocales&lt;/item&gt;&lt;item&gt;supportedCurrencies&lt;/item&gt;&lt;item&gt;supportedFonts&lt;/item&gt;&lt;item&gt;metadataInformationURI&lt;/item&gt;&lt;item&gt;glossaryURI&lt;/item&gt;&lt;/properties&gt;&lt;/bus:getConfiguration&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=authoring&amp;context=%7B%22perspective%22%3A%22authoring%22%2C%22content%22%3A%7B%22module%22%3A%22bi%2Fauthoring%2FrsContentView%22%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22isViewer%22%3Atrue%2C%22isNewFromModule%22%3Afalse%2C%22isNewFromPackage%22%3Afalse%2C%22cmProperties%22%3A%7B%22runInAdvancedViewer%22%3Atrue%2C%22executionPrompt%22%3Atrue%2C%22permissions%22%3A%5B%22execute%22%2C%22read%22%2C%22setPolicy%22%2C%22traverse%22%2C%22write%22%5D%2C%22modificationTime%22%3A%222016-01-05T19%3A47%3A58.420Z%22%2C%22options%22%3Anull%2C%22_meta%22%3A%7B%22links%22%3A%7B%22versions%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fversions%22%7D%2C%22self%22%3A%7B%22mimeType%22%3A%22application%2Fvnd.ibm.bi.report%2Bjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%22%7D%2C%22histories%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fhistories%22%7D%7D%7D%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22type%22%3A%22report%22%2C%22defaultName%22%3A%22small_nonMeasureList_html_av%22%2C%22version%22%3A2%7D%2C%22rsFinalRunOptions%22%3A%7B%22format%22%3A%22HTML%22%2C%22runInAdvancedViewer%22%3Atrue%2C%22prompt%22%3Atrue%7D%7D%7D</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/systemService/201606/</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="/ get stubbed report spec" enabled="true"/>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_model_path" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">report_model_path</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].report.metadataModel[0].searchPath</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_package_path" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">report_package_path</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].report.metadataModelPackage[0].searchPath</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_spec" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">report_spec</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].report.specification</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="get metadataPaths" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">metadataPaths</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//metadataPath/@path</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">report_spec</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              </XPathExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get  report_options" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">report_options</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].report.options</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get  report_module" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">report_module</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].report.module</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="combine all metadataPaths" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;

vars.put(&quot;isPackage&quot;, &quot;true&quot;);
reportmod = vars.get(&quot;report_module&quot;)
if (reportmod.length() &gt; 0) {
	JsonArray report_module = new JsonStreamParser(reportmod).next().getAsJsonArray();
	if(report_module.size() != 0) {
		vars.put(&quot;isPackage&quot;, &quot;false&quot;);
		String moduleId = report_module.get(0).getAsJsonObject().get(&quot;id&quot;).getAsString();
		vars.put(&quot;moduleId&quot;, moduleId);
	}
}

String runSpec_prompt = &quot;true&quot;;
report_options = vars.get(&quot;report_options&quot;)
if (report_options.length() &gt; 0) {
	JsonArray options = new JsonStreamParser(report_options).next().getAsJsonArray();
	if(options.size() &gt; 0) {
		for(int i = 0; i &lt; options.size(); i++) {
			JsonObject option = options.get(i).getAsJsonObject();
			if (&quot;prompt&quot;.equals(option.get(&quot;name&quot;))) {
				runSpec_prompt = ((Boolean)option.get(&quot;value&quot;)).toString();
			}
		}
	}
}
vars.put(&quot;runSpec_prompt&quot;, runSpec_prompt);

// metadataPath variables:
// _0 = (assigned) the default model path, already defined outside of the report spec
// _1 - _n = the non-default model paths, extracted from the report spec
// _matchNr = length, not including the default
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get stubbed report spec" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports/${report_id}/stubbed</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="cafContextId" elementType="Header">
                      <stringProp name="Header.name">cafContextId</stringProp>
                      <stringProp name="Header.value">${cafContextId}</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="authenticityToken" elementType="Header">
                      <stringProp name="Header.name">authenticityToken</stringProp>
                      <stringProp name="Header.value">${authToken}</stringProp>
                    </elementProp>
                    <elementProp name="X-UseRsConsumerMode" elementType="Header">
                      <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=authoring&amp;context=%7B%22perspective%22%3A%22authoring%22%2C%22content%22%3A%7B%22module%22%3A%22bi%2Fauthoring%2FrsContentView%22%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22isViewer%22%3Atrue%2C%22isNewFromModule%22%3Afalse%2C%22isNewFromPackage%22%3Afalse%2C%22cmProperties%22%3A%7B%22runInAdvancedViewer%22%3Atrue%2C%22executionPrompt%22%3Atrue%2C%22permissions%22%3A%5B%22execute%22%2C%22read%22%2C%22setPolicy%22%2C%22traverse%22%2C%22write%22%5D%2C%22modificationTime%22%3A%222016-01-05T19%3A47%3A58.420Z%22%2C%22options%22%3Anull%2C%22_meta%22%3A%7B%22links%22%3A%7B%22versions%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fversions%22%7D%2C%22self%22%3A%7B%22mimeType%22%3A%22application%2Fvnd.ibm.bi.report%2Bjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%22%7D%2C%22histories%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fhistories%22%7D%7D%7D%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22type%22%3A%22report%22%2C%22defaultName%22%3A%22small_nonMeasureList_html_av%22%2C%22version%22%3A2%7D%2C%22rsFinalRunOptions%22%3A%7B%22format%22%3A%22HTML%22%2C%22runInAdvancedViewer%22%3Atrue%2C%22prompt%22%3Atrue%7D%7D%7D</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="reset restAsyncLoopCount" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">vars.put(&quot;restAsyncLoopCount&quot;, &quot;0&quot;)</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responseCode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responseCode</stringProp>
                  <stringProp name="RegexExtractor.regex">20[02]</stringProp>
                  <stringProp name="RegexExtractor.template">$0$</stringProp>
                  <stringProp name="RegexExtractor.default">ERROR</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 received" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1478545310">20[02]</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If responseCode==202" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${responseCode}&quot;==&quot;202&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="restAsyncLoop" enabled="true">
                  <stringProp name="IncludeController.includepath">authoring/runReport/fullInteractivity/restAsyncLoop.jmx</stringProp>
                </IncludeController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="setReportObjectMetadata" enabled="false">
              <stringProp name="BeanShellSampler.query">//2
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;

// model searchpath
// /content/folder[@name=&amp;apos;aaa_Packages&amp;apos;]/package[@name=&amp;apos;GO_Sales_Retailers_DB2_DQM&amp;apos;]/model[last()]
//package searchpath
// /content/folder[@name=&amp;apos;aaa_Packages&amp;apos;]/package[@name=&amp;apos;GO_Sales_Retailers_DB2_DQM&amp;apos;]

JsonStreamParser jsonStreamReader = new JsonStreamParser(prev.getResponseDataAsString());
String jsonStr = prev.getResponseDataAsString();
//log.debug(&quot;jsonStr: &quot; + jsonStr);
JsonElement response = new JsonStreamParser(jsonStr).next().getAsJsonObject();
// { &apos;data&apos;: [ &quot;defaultName&quot;.....&quot;id&quot;
JsonArray data = response.getAsJsonArray(&quot;data&quot;);

reportData = data.get(0).get(&quot;report&quot;).getAsJsonObject(); //reportData.get(&quot;metadataModel&quot;).getAsJsonArray().get(0).get(&quot;searchPath&quot;);

modelSearchPath = reportData.get(&quot;metadataModel&quot;).getAsJsonArray().get(0).get(&quot;searchPath&quot;);
vars.put(&quot;report_model_path&quot;, modelSearchPath.getAsString());

packageSearchPath = reportData.get(&quot;metadataModelPackage&quot;).getAsJsonArray().get(0).get(&quot;searchPath&quot;);
vars.put(&quot;report_package_path&quot;, packageSearchPath.getAsString());

specification = reportData.get(&quot;specification&quot;).getAsString();
vars.put(&quot;report_spec&quot;, specification);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get report_search path from field properties" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="fields" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                    <stringProp name="Argument.value">searchPath,base.id,base.type,base.searchPath</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get report_searchpath" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">report_searchpath</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].searchPath</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ tidy variables for soap requests" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">sp = vars.get(&quot;report_searchpath&quot;);
vars.put(&quot;report_searchpath_tidy&quot;, sp.replaceAll(&quot;&apos;&quot;, &quot;&amp;apos;&quot;));

spec = vars.get(&quot;report_spec&quot;);
spec = spec.replaceAll(&quot;&amp;&quot;, &quot;&amp;amp;&quot;).replaceAll(&quot;&lt;&quot;, &quot;&amp;lt;&quot;).replaceAll(&quot;&gt;&quot;, &quot;&amp;gt;&quot;);
vars.put(&quot;report_spec&quot;, spec);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get fields" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="fields" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">fields</stringProp>
                    <stringProp name="Argument.value">defaultName%2Cowner.defaultName%2Cancestors%2Cpermissions%2Chidden%2Cdisabled</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${report_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=authoring&amp;context=%7B%22perspective%22%3A%22authoring%22%2C%22content%22%3A%7B%22module%22%3A%22bi%2Fauthoring%2FrsContentView%22%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22isViewer%22%3Atrue%2C%22isNewFromModule%22%3Afalse%2C%22isNewFromPackage%22%3Afalse%2C%22cmProperties%22%3A%7B%22runInAdvancedViewer%22%3Atrue%2C%22executionPrompt%22%3Atrue%2C%22permissions%22%3A%5B%22execute%22%2C%22read%22%2C%22setPolicy%22%2C%22traverse%22%2C%22write%22%5D%2C%22modificationTime%22%3A%222016-01-05T19%3A47%3A58.420Z%22%2C%22options%22%3Anull%2C%22_meta%22%3A%7B%22links%22%3A%7B%22versions%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fversions%22%7D%2C%22self%22%3A%7B%22mimeType%22%3A%22application%2Fvnd.ibm.bi.report%2Bjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%22%7D%2C%22histories%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fhistories%22%7D%7D%7D%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22type%22%3A%22report%22%2C%22defaultName%22%3A%22small_nonMeasureList_html_av%22%2C%22version%22%3A2%7D%2C%22rsFinalRunOptions%22%3A%7B%22format%22%3A%22HTML%22%2C%22runInAdvancedViewer%22%3Atrue%2C%22prompt%22%3Atrue%7D%7D%7D</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/ ${tr_prefix}getModels" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="package based" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${isPackage}&quot; == &quot;true&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get model properties" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:bus=&apos;http://developer.cognos.com/schemas/bibus/3/&apos; xmlns:rns1=&apos;http://developer.cognos.com/schemas/reportService/1&apos;&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type=&quot;bus:biBusHeader&quot;&gt;&lt;bus:CAM xsi:type=&quot;bus:CAM&quot;&gt;&lt;authenticityToken xsi:type=&quot;xsd:base64Binary&quot;&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type=&quot;bus:CAF&quot;&gt;&lt;contextID xsi:type=&quot;xsd:string&quot;&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType=&quot;bus:userPreferenceVar[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:dispatcherTransportVar[]&quot;&gt;&lt;item xsi:type=&quot;bus:dispatcherTransportVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;rs&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;bus:query&gt;&lt;requests&gt;&lt;queryRequest&gt;&lt;search&gt;${report_model_path}&lt;/search&gt;&lt;options&gt;&lt;refProps xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:refProp[]&quot;&gt;&lt;item xsi:type=&quot;bus:refProp&quot;&gt;&lt;refPropName&gt;parent&lt;/refPropName&gt;&lt;properties xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:propEnum[]&quot;&gt;&lt;item&gt;defaultName&lt;/item&gt;&lt;item&gt;searchPath&lt;/item&gt;&lt;item&gt;routingServerGroup&lt;/item&gt;&lt;item&gt;effectiveUserCapabilities&lt;/item&gt;&lt;/properties&gt;&lt;/item&gt;&lt;/refProps&gt;&lt;/options&gt;&lt;properties xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:propEnum[]&quot;&gt;&lt;item&gt;searchPath&lt;/item&gt;&lt;item&gt;modificationTime&lt;/item&gt;&lt;item xsi:type=&quot;cm:propEnum&quot;&gt;parent&lt;/item&gt;&lt;/properties&gt;&lt;/queryRequest&gt;&lt;queryRequest&gt;&lt;search&gt;${report_package_path}/packageConfiguration&lt;/search&gt;&lt;properties xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:propEnum[]&quot;&gt;&lt;item&gt;memberDisplayCountLimit&lt;/item&gt;&lt;/properties&gt;&lt;/queryRequest&gt;&lt;/requests&gt;&lt;/bus:query&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="SOAPAction" elementType="Header">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/contentManagerService/201606/</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Cache-Control" elementType="Header">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="Pragma" elementType="Header">
                        <stringProp name="Header.name">Pragma</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                        <stringProp name="Header.value">${report_id}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
                    <collectionProp name="CookieManager.cookies">
                      <elementProp name="X-RsCMStoreID" elementType="Cookie" testname="X-RsCMStoreID">
                        <stringProp name="Cookie.value">${report_id}</stringProp>
                        <stringProp name="Cookie.domain"></stringProp>
                        <stringProp name="Cookie.path"></stringProp>
                        <boolProp name="Cookie.secure">false</boolProp>
                        <longProp name="Cookie.expires">0</longProp>
                        <boolProp name="Cookie.path_specified">true</boolProp>
                        <boolProp name="Cookie.domain_specified">true</boolProp>
                      </elementProp>
                    </collectionProp>
                    <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                  </CookieManager>
                  <hashTree/>
                </hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="updateHeaderWithModelsEtags" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

if (vars.get(&quot;tr_prefix&quot;) != &quot;first_&quot;) {	
	sampler.getHeaderManager().removeHeaderNamed(&quot;If-None-Match&quot;);
	sampler.getHeaderManager().add(new Header(&quot;If-None-Match&quot;, &quot;\&quot;&quot; + vars.get(&quot;etag_info&quot;) + &quot;\&quot;&quot;));
}

//${__BeanShell(vars.get(&quot;metadataPaths_&quot; + vars.get(&quot;metadataPaths_index&quot;)))}
//${__V(metadataPaths_${metadataPaths_index})}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="get Models" enabled="true"/>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getModelsEtags" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">etag_info</stringProp>
                    <stringProp name="RegexExtractor.regex">ETag: &quot;(.*?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/search_path?searchPath default package" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="searchPath" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${report_model_path}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">searchPath</stringProp>
                        </elementProp>
                        <elementProp name="fields" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">fields</stringProp>
                          <stringProp name="Argument.value">id,searchPath,modificationTime,defaultName,options,parent.id,parent.searchPath,parent.defaultName,parent.effectiveUserCapabilities,parent.permissions,parent.routingServerGroup</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/search_path</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="reset restAsyncLoopCount" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put(&quot;restAsyncLoopCount&quot;, &quot;0&quot;)</stringProp>
                    </JSR223PreProcessor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responseCode" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                      <stringProp name="RegexExtractor.refname">responseCode</stringProp>
                      <stringProp name="RegexExtractor.regex">20[02]|304</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">ERROR</stringProp>
                      <stringProp name="RegexExtractor.match_number"></stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 or 304 received" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1240665063">20[02]|304</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/search_path?searchPath packageConfiguration" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="searchPath" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${report_model_path}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">searchPath</stringProp>
                        </elementProp>
                        <elementProp name="fields" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">fields</stringProp>
                          <stringProp name="Argument.value">memberDisplayCountLimit</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/search_path</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="reset restAsyncLoopCount" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put(&quot;restAsyncLoopCount&quot;, &quot;0&quot;)</stringProp>
                    </JSR223PreProcessor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responseCode" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                      <stringProp name="RegexExtractor.refname">responseCode</stringProp>
                      <stringProp name="RegexExtractor.regex">20[02]|304</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">ERROR</stringProp>
                      <stringProp name="RegexExtractor.match_number"></stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 or 304 received" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1240665063">20[02]|304</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If responseCode==202" enabled="true">
                    <stringProp name="IfController.condition">${__groovy(&quot;${responseCode}&quot;==&quot;202&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="restAsyncLoop" enabled="true">
                      <stringProp name="IncludeController.includepath">authoring/runReport/fullInteractivity/restAsyncLoop.jmx</stringProp>
                    </IncludeController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each Extra Models" enabled="true">
                  <stringProp name="ForeachController.inputVal">metadataPaths</stringProp>
                  <stringProp name="ForeachController.returnVal">metadataPath</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getModelsEtags" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">etag_metadataPaths_${metadataPaths_index}</stringProp>
                    <stringProp name="RegexExtractor.regex">ETag: &quot;(.*?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/search_path?searchPath default package" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="searchPath" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${report_model_path}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">searchPath</stringProp>
                        </elementProp>
                        <elementProp name="fields" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">fields</stringProp>
                          <stringProp name="Argument.value">id,searchPath,modificationTime,defaultName,options,parent.id,parent.searchPath,parent.defaultName,parent.effectiveUserCapabilities,parent.permissions,parent.routingServerGroup</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/search_path</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="reset restAsyncLoopCount" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put(&quot;restAsyncLoopCount&quot;, &quot;0&quot;)</stringProp>
                    </JSR223PreProcessor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responseCode" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                      <stringProp name="RegexExtractor.refname">responseCode</stringProp>
                      <stringProp name="RegexExtractor.regex">20[02]|304</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">ERROR</stringProp>
                      <stringProp name="RegexExtractor.match_number"></stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 or 304 received" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1240665063">20[02]|304</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/search_path?searchPath packageConfiguration" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="searchPath" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${report_model_path}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">searchPath</stringProp>
                        </elementProp>
                        <elementProp name="fields" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">fields</stringProp>
                          <stringProp name="Argument.value">memberDisplayCountLimit</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/search_path</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="reset restAsyncLoopCount" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put(&quot;restAsyncLoopCount&quot;, &quot;0&quot;)</stringProp>
                    </JSR223PreProcessor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get responseCode" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                      <stringProp name="RegexExtractor.refname">responseCode</stringProp>
                      <stringProp name="RegexExtractor.regex">20[02]|304</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">ERROR</stringProp>
                      <stringProp name="RegexExtractor.match_number"></stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="assert 200 or 202 or 304 received" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1240665063">20[02]|304</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If responseCode==202" enabled="true">
                    <stringProp name="IfController.condition">${__groovy(&quot;${responseCode}&quot;==&quot;202&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="restAsyncLoop" enabled="true">
                      <stringProp name="IncludeController.includepath">authoring/runReport/fullInteractivity/restAsyncLoop.jmx</stringProp>
                    </IncludeController>
                    <hashTree/>
                  </hashTree>
                  <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
                    <boolProp name="clearEachIteration">false</boolProp>
                    <boolProp name="useExpires">true</boolProp>
                  </CacheManager>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="cafContextId" elementType="Header">
                        <stringProp name="Header.name">cafContextId</stringProp>
                        <stringProp name="Header.value">${cafContextId}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="authenticityToken" elementType="Header">
                        <stringProp name="Header.name">authenticityToken</stringProp>
                        <stringProp name="Header.value">${authToken}</stringProp>
                      </elementProp>
                      <elementProp name="X-UseRsConsumerMode" elementType="Header">
                        <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/index.html?perspective=authoring&amp;context=%7B%22perspective%22%3A%22authoring%22%2C%22content%22%3A%7B%22module%22%3A%22bi%2Fauthoring%2FrsContentView%22%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22isViewer%22%3Atrue%2C%22isNewFromModule%22%3Afalse%2C%22isNewFromPackage%22%3Afalse%2C%22cmProperties%22%3A%7B%22runInAdvancedViewer%22%3Atrue%2C%22executionPrompt%22%3Atrue%2C%22permissions%22%3A%5B%22execute%22%2C%22read%22%2C%22setPolicy%22%2C%22traverse%22%2C%22write%22%5D%2C%22modificationTime%22%3A%222016-01-05T19%3A47%3A58.420Z%22%2C%22options%22%3Anull%2C%22_meta%22%3A%7B%22links%22%3A%7B%22versions%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fversions%22%7D%2C%22self%22%3A%7B%22mimeType%22%3A%22application%2Fvnd.ibm.bi.report%2Bjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%22%7D%2C%22histories%22%3A%7B%22mimeType%22%3A%22application%2Fjson%22%2C%22url%22%3A%22%2Fbi%2Fv1%2Fobjects%2Fi5BBA30D387804649958ACF89810E50C7%2Fhistories%22%7D%7D%7D%2C%22id%22%3A%22i5BBA30D387804649958ACF89810E50C7%22%2C%22type%22%3A%22report%22%2C%22defaultName%22%3A%22small_nonMeasureList_html_av%22%2C%22version%22%3A2%7D%2C%22rsFinalRunOptions%22%3A%7B%22format%22%3A%22HTML%22%2C%22runInAdvancedViewer%22%3Atrue%2C%22prompt%22%3Atrue%7D%7D%7D</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="module based" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${isPackage}&quot; == &quot;false&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/metadata/modules" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${moduleId}/metadata</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getModelsEtags" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">etag_metadataPaths_${metadataPaths_index}</stringProp>
                    <stringProp name="RegexExtractor.regex">ETag: &quot;(.*?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset asyncTimer" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;asyncTimer&quot;, &quot;0&quot;);
vars.put(&quot;asyncTimeNotReached&quot;, &quot;true&quot;);
vars.put(&quot;report_sendAsync&quot;, &quot;true&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/ ${tr_prefix}rs_runSpec_${report_name}" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If report ouput is HTML" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${report_output_format}&quot;==&quot;HTML&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post runspecification " enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:bus=&apos;http://developer.cognos.com/schemas/bibus/3/&apos; xmlns:rns1=&apos;http://developer.cognos.com/schemas/reportService/1&apos;&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type=&quot;bus:biBusHeader&quot;&gt;&lt;bus:CAM xsi:type=&quot;bus:CAM&quot;&gt;&lt;authenticityToken xsi:type=&quot;xsd:base64Binary&quot;&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type=&quot;bus:CAF&quot;&gt;&lt;contextID xsi:type=&quot;xsd:string&quot;&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type=&quot;bus:hdrSession&quot;&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType=&quot;bus:formFieldVar[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item xsi:type=&quot;bus:formFieldVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType=&quot;bus:userPreferenceVar[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:dispatcherTransportVar[]&quot;&gt;&lt;item xsi:type=&quot;bus:dispatcherTransportVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;rs&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:runSpecification&gt;&lt;bus:specification xsi:type=&quot;bus:reportServiceReportSpecification&quot;&gt;&lt;bus:value xsi:type=&quot;bus:specification&quot;&gt;${report_spec}&lt;/bus:value&gt;&lt;/bus:specification&gt;&lt;bus:parameterValues xmlns:bus=&apos;http://developer.cognos.com/schemas/bibus/3/&apos; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; SOAP-ENC:arrayType=&quot;bus:parameterValue[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType=&quot;bus:option[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:int&quot;&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:int&quot;&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionStringArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;xsd:string[1]&quot;&gt;&lt;item&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;${attachmentOption}&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionString&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;promptFormat&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;XHTMLFRGMT&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;${runSpec_prompt}&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputLocation&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionData&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;data&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;bus:dataEnum&quot;&gt;runWithAllData&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionNameValueArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:nameValue[]&quot;&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;CVGateway&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#saveSearchPath&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;${report_searchpath_tidy}&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:runSpecification&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = &quot;&lt;bus:tracking xsi:type=\&quot;bus:tracking\&quot;&gt;&quot;;
trackingEndTag = &quot;&lt;/bus:tracking&gt;&quot;;
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug(&quot;tracking is: &quot; + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put(&quot;report_busTracking&quot;, trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, &quot;&lt;bus:status xsi:type=\&quot;xs:string\&quot;&gt;&quot;, &quot;&lt;/bus:status&gt;&quot;);
vars.put(&quot;report_conversationStatus&quot;, status);</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">log.debug(&quot;conversationStatus: &quot; + vars.get(&quot;report_conversationStatus&quot;));
if (vars.get(&quot;report_conversationStatus&quot;) != null) {
	if (!vars.get(&quot;report_conversationStatus&quot;).equals(&quot;conversationComplete&quot;)) {
		log.debug(&quot;report_release: &quot; + vars.get(&quot;report_busTracking&quot;));
		vars.put(&quot;report_release&quot;, &quot;true&quot;);
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;conversationComplete&quot;)) {
		if (vars.get(&quot;report_release&quot;) != null) {
			vars.remove(&quot;report_release&quot;);
			vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
		}
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;complete&quot;)) {
		vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;complete&quot;) &amp;&amp; (prev.getResponseDataAsString().contains(&quot;&lt;SOAP-ENV:Fault&gt;&quot;))){
		if (vars.get(&quot;report_release&quot;) != null) {
			vars.remove(&quot;report_release&quot;);
			vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
		}
	}

	//log.info(&quot;busTracking: &quot; + vars.get(&quot;report_busTracking&quot;));
}
log.debug(&quot;sendAsync = &quot; + vars.get(&quot;report_sendAsync&quot;));
vars.put(&quot;reportResponse&quot;, prev.getResponseDataAsString());//getSamplerData());</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="SOAPAction" elementType="Header">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201606/</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="X-UseRsConsumerMode" elementType="Header">
                        <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Cache-Control" elementType="Header">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="Pragma" elementType="Header">
                        <stringProp name="Header.name">Pragma</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp name="X-RsCMStoreID" elementType="Header">
                        <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                        <stringProp name="Header.value">${report_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If report output is PDF" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${report_output_format}&quot;==&quot;PDF&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post pdf runspecification " enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:bus=&apos;http://developer.cognos.com/schemas/bibus/3/&apos; xmlns:rns1=&apos;http://developer.cognos.com/schemas/reportService/1&apos;&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type=&quot;bus:biBusHeader&quot;&gt;&lt;bus:CAM xsi:type=&quot;bus:CAM&quot;&gt;&lt;authenticityToken xsi:type=&quot;xsd:base64Binary&quot;&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type=&quot;bus:CAF&quot;&gt;&lt;contextID xsi:type=&quot;xsd:string&quot;&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type=&quot;bus:hdrSession&quot;&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType=&quot;bus:formFieldVar[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item xsi:type=&quot;bus:formFieldVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:formFieldVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType=&quot;bus:userPreferenceVar[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:dispatcherTransportVar[]&quot;&gt;&lt;item xsi:type=&quot;bus:dispatcherTransportVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;rs&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:runSpecification&gt;&lt;bus:specification xsi:type=&quot;bus:reportServiceReportSpecification&quot;&gt;&lt;bus:value xsi:type=&quot;bus:specification&quot;&gt;${report_spec}&lt;/bus:value&gt;&lt;/bus:specification&gt;&lt;bus:parameterValues xmlns:bus=&apos;http://developer.cognos.com/schemas/bibus/3/&apos; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; SOAP-ENC:arrayType=&quot;bus:parameterValue[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType=&quot;bus:option[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:int&quot;&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:int&quot;&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionStringArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;xsd:string[1]&quot;&gt;&lt;item&gt;PDF&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:asynchOptionEncoding&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;attachmentEncoding&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;bus:encodingEnum&quot;&gt;MIME&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionString&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;promptFormat&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;XHTMLFRGMT&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputLocation&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionData&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;data&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;bus:dataEnum&quot;&gt;runWithAllData&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionNameValueArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:nameValue[]&quot;&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;CVGateway&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#saveSearchPath&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;${report_searchpath_tidy}&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionOutputEncapsulation&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputEncapsulation&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;bus:outputEncapsulationEnum&quot;&gt;URLQueryString&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:runSpecification&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = &quot;&lt;bus:tracking xsi:type=\&quot;bus:tracking\&quot;&gt;&quot;;
trackingEndTag = &quot;&lt;/bus:tracking&gt;&quot;;
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug(&quot;tracking is: &quot; + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put(&quot;report_busTracking&quot;, trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, &quot;&lt;bus:status xsi:type=\&quot;xs:string\&quot;&gt;&quot;, &quot;&lt;/bus:status&gt;&quot;);
vars.put(&quot;report_conversationStatus&quot;, status);</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">log.debug(&quot;conversationStatus: &quot; + vars.get(&quot;report_conversationStatus&quot;));
if (vars.get(&quot;report_conversationStatus&quot;) != null) {
	if (!vars.get(&quot;report_conversationStatus&quot;).equals(&quot;conversationComplete&quot;)) {
		log.debug(&quot;report_release: &quot; + vars.get(&quot;report_busTracking&quot;));
		vars.put(&quot;report_release&quot;, &quot;true&quot;);
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;conversationComplete&quot;)) {
		if (vars.get(&quot;report_release&quot;) != null) {
			vars.remove(&quot;report_release&quot;);
			vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
		}
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;complete&quot;)) {
		vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;complete&quot;) &amp;&amp; (prev.getResponseDataAsString().contains(&quot;&lt;SOAP-ENV:Fault&gt;&quot;))){
		if (vars.get(&quot;report_release&quot;) != null) {
			vars.remove(&quot;report_release&quot;);
			vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
		}
	}

	//log.info(&quot;busTracking: &quot; + vars.get(&quot;report_busTracking&quot;));
}
log.debug(&quot;sendAsync = &quot; + vars.get(&quot;report_sendAsync&quot;));
vars.put(&quot;reportResponse&quot;, prev.getResponseDataAsString());//getSamplerData());</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="SOAPAction" elementType="Header">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201606/</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="X-UseRsConsumerMode" elementType="Header">
                        <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Cache-Control" elementType="Header">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="Pragma" elementType="Header">
                        <stringProp name="Header.name">Pragma</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp name="X-RsCMStoreID" elementType="Header">
                        <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                        <stringProp name="Header.value">${report_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If report output is EXCEL" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${report_output_format}&quot;==&quot;EXCEL&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post excel runspecification " enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:bus=&apos;http://developer.cognos.com/schemas/bibus/3/&apos; xmlns:rns1=&apos;http://developer.cognos.com/schemas/reportService/1&apos;&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type=&quot;bus:biBusHeader&quot;&gt;&lt;bus:CAM xsi:type=&quot;bus:CAM&quot;&gt;&lt;authenticityToken xsi:type=&quot;xsd:base64Binary&quot;&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type=&quot;bus:CAF&quot;&gt;&lt;contextID xsi:type=&quot;xsd:string&quot;&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type=&quot;bus:hdrSession&quot;&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType=&quot;bus:formFieldVar[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item xsi:type=&quot;bus:formFieldVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:formFieldVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType=&quot;bus:userPreferenceVar[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:dispatcherTransportVar[]&quot;&gt;&lt;item xsi:type=&quot;bus:dispatcherTransportVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;rs&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:run&gt;&lt;bus:objectPath xsi:type=&quot;bus:searchPathSingleObject&quot;&gt;storeID(&amp;quot;${report_id}&amp;quot;)&lt;/bus:objectPath&gt;&lt;bus:parameterValues xmlns:bus=&apos;http://developer.cognos.com/schemas/bibus/3/&apos; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; SOAP-ENC:arrayType=&quot;bus:parameterValue[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType=&quot;bus:option[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item xsi:type=&quot;bus:genericOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;runOptionEnum#globalParameters&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;&amp;lt;parameterValues xsi:type=&amp;quot;SOAP-ENC:Array&amp;quot; SOAP-ENC:arrayType=&amp;quot;bus:parameterValue[]&amp;quot; xmlns:SOAP-ENC=&amp;quot;http://schemas.xmlsoap.org/soap/encoding/&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:xs=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:bus=&amp;quot;http://developer.cognos.com/schemas/bibus/3/&amp;quot; xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&amp;gt;&amp;lt;/parameterValues&amp;gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:int&quot;&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:int&quot;&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionStringArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;xsd:string[1]&quot;&gt;&lt;item&gt;spreadsheetML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:asynchOptionEncoding&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;attachmentEncoding&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;bus:encodingEnum&quot;&gt;MIME&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionString&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;promptFormat&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;XHTMLFRGMT&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputLocation&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionData&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;data&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;bus:dataEnum&quot;&gt;runWithAllData&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionNameValueArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:nameValue[]&quot;&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;CVGateway&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionOutputEncapsulation&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputEncapsulation&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;bus:outputEncapsulationEnum&quot;&gt;URLQueryString&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:run&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = &quot;&lt;bus:tracking xsi:type=\&quot;bus:tracking\&quot;&gt;&quot;;
trackingEndTag = &quot;&lt;/bus:tracking&gt;&quot;;
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug(&quot;tracking is: &quot; + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put(&quot;report_busTracking&quot;, trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, &quot;&lt;bus:status xsi:type=\&quot;xs:string\&quot;&gt;&quot;, &quot;&lt;/bus:status&gt;&quot;);
vars.put(&quot;report_conversationStatus&quot;, status);</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">log.debug(&quot;conversationStatus: &quot; + vars.get(&quot;report_conversationStatus&quot;));
if (vars.get(&quot;report_conversationStatus&quot;) != null) {
	if (!vars.get(&quot;report_conversationStatus&quot;).equals(&quot;conversationComplete&quot;)) {
		log.debug(&quot;report_release: &quot; + vars.get(&quot;report_busTracking&quot;));
		vars.put(&quot;report_release&quot;, &quot;true&quot;);
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;conversationComplete&quot;)) {
		if (vars.get(&quot;report_release&quot;) != null) {
			vars.remove(&quot;report_release&quot;);
			vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
		}
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;complete&quot;)) {
		vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;complete&quot;) &amp;&amp; (prev.getResponseDataAsString().contains(&quot;&lt;SOAP-ENV:Fault&gt;&quot;))){
		if (vars.get(&quot;report_release&quot;) != null) {
			vars.remove(&quot;report_release&quot;);
			vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
		}
	}

	//log.info(&quot;busTracking: &quot; + vars.get(&quot;report_busTracking&quot;));
}
log.debug(&quot;sendAsync = &quot; + vars.get(&quot;report_sendAsync&quot;));
vars.put(&quot;reportResponse&quot;, prev.getResponseDataAsString());//getSamplerData());</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="SOAPAction" elementType="Header">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201606/</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="X-UseRsConsumerMode" elementType="Header">
                        <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Cache-Control" elementType="Header">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="Pragma" elementType="Header">
                        <stringProp name="Header.name">Pragma</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp name="X-RsCMStoreID" elementType="Header">
                        <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                        <stringProp name="Header.value">${report_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="asyncLoop" enabled="true">
                <stringProp name="IncludeController.includepath">authoring/runReport/fullInteractivity/asyncLoop.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ process the report output" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get(&quot;reportResponse&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get pdf_url " enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">pdf_url</stringProp>
                  <stringProp name="RegexExtractor.regex">(\?b_action=.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">\.\.\/v1\/disp(\?[^)]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get report_spec_encoded" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">report_spec_encoded</stringProp>
                  <stringProp name="RegexExtractor.regex">xsi:type=&quot;bus:specification&quot;&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get stateData" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">stateData</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;bus:stateData xsi:type=&quot;bus:xmlEncodedXML&quot;&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If report ouput NOT PDF &amp;&amp; NOT EXCEL" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${report_output_format}&quot;!=&quot;PDF&quot; &amp;&amp; &quot;${report_output_format}&quot;!=&quot;EXCEL&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="/datacheck and chart if no prompts" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(&quot;${hasPrompt}&quot; == &quot;false&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ check data and chart count" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">log.info(&quot;Report &quot; + vars.get(&quot;report_name&quot;) + &quot; does not contain prompts.&quot;);
return vars.get(&quot;reportResponse&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-505831277">${report_datacheck}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="number of charts in response is expected?" enabled="true">
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="script">log.debug(&quot;chart count expected: &quot; + vars.get(&quot;report_expected_chart_count&quot;) + &quot; chart count actual: &quot; + vars.get(&quot;chart_urls_matchNr&quot;));
if (vars.get(&quot;report_expected_chart_count&quot;) != vars.get(&quot;chart_urls_matchNr&quot;)) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;expected chart count &quot; + vars.get(&quot;report_expected_chart_count&quot;) + &quot; doest not match actual chart count &quot; + vars.get(&quot;chart_urls_matchNr&quot;));
}</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223Assertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each chart_url in chart_urls" enabled="true">
                  <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
                  <stringProp name="ForeachController.returnVal">chart_url</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
vars.put(&quot;chart_url_decoded&quot;, StringEscapeUtils.unescapeHtml4(vars.get(&quot;chart_url&quot;)));</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */* </stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1654885887">Content-Type: image/png</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If report output is PDF" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${report_output_format}&quot;==&quot;PDF&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode PDF url" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
//log.info(&quot;===============&quot; + vars.get(&quot;chart_urls&quot;));
vars.put(&quot;iframeSrcUrl_decoded&quot;, StringEscapeUtils.unescapeHtml4(vars.get(&quot;iframeSrcUrl&quot;)));
</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Sanitize pdf_url" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">String url = vars.get(&quot;pdf_url&quot;);
cleanURL = url.trim();
vars.put(&quot;pdf_url&quot;, cleanURL);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ execute PDF from pdf_url" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${pdf_url}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */* </stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an application/pdf?" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1248334925">application/pdf</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If report output is EXCEL" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${report_output_format}&quot;==&quot;EXCEL&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode PDF url" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
//log.info(&quot;===============&quot; + vars.get(&quot;chart_urls&quot;));
vars.put(&quot;iframeSrcUrl_decoded&quot;, StringEscapeUtils.unescapeHtml4(vars.get(&quot;iframeSrcUrl&quot;)));
</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Sanitize pdf_url" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">String url = vars.get(&quot;pdf_url&quot;);
cleanURL = url.trim();
vars.put(&quot;pdf_url&quot;, cleanURL);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ execute EXCEL from pdf_url" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${pdf_url}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */* </stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it spreadsheet" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1993842850">application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset action_counter" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">vars.put(&quot;action_counter&quot;, &quot;0&quot;);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="run prompt" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${hasPrompt})}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}rs_promptPage_${report_name}" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get prompt info from report reponse" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.ibm.bi.util.ContentUtil;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;

report_response = vars.get(&quot;reportResponse&quot;);

prompt_spec = ContentUtil.getOptional(report_response, &quot;&lt;bus:value xsi:type=\&quot;bus:specification\&quot;&gt;&quot;, &quot;&lt;/bus:value&gt;&quot;);
vars.put(&quot;prompt_spec&quot;, prompt_spec);

prompt_parameters = &quot;&lt;bus:parameters xmlns:bus=\&quot;http://developer.cognos.com/schemas/bibus/3/\&quot; xsi:type=\&quot;SOAP-ENC:Array\&quot; xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot; SOAP-ENC:arrayType=\&quot;bus:parameterValue[0]\&quot; xmlns:SOAP-ENC=\&quot;http://schemas.xmlsoap.org/soap/encoding/\&quot;/&gt;&quot;;
if(report_response.contains(&quot;asynchDetailParameterValues&quot;)){
	String res = ContentUtil.getOptional(report_response, &quot;&lt;item xsi:type=\&quot;bus:asynchDetailParameterValues\&quot;&gt;&quot;, &quot;&lt;/item&gt;&quot;);
	String valueCount = ContentUtil.getOptional(res, &quot;SOAP-ENC:arrayType=\&quot;bus:parameterValue[&quot;, &quot;]\&quot;&gt;&quot;);
	if(valueCount != &quot;0&quot;) {
		String itemsRaw = ContentUtil.getOptional(report_response, &quot;&lt;item xsi:type=\&quot;bus:asynchDetailParameterValues\&quot;&gt;&quot;, &quot;&lt;/bus:parameters&gt;&quot;);
		String items = ContentUtil.getOptional(itemsRaw + &quot;&lt;/bus:parameters&gt;&quot;, &quot;]\&quot;&gt;&quot;, &quot;&lt;/bus:parameters&gt;&quot;);
		prompt_parameters = &quot;&lt;bus:parameters xmlns:bus=\&quot;http://developer.cognos.com/schemas/bibus/3/\&quot; xsi:type=\&quot;SOAP-ENC:Array\&quot; xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot; SOAP-ENC:arrayType=\&quot;bus:parameterValue[&quot; + valueCount + &quot;]\&quot; xmlns:SOAP-ENC=\&quot;http://schemas.xmlsoap.org/soap/encoding/\&quot;&gt;&quot; + items + &quot;&lt;/bus:parameters&gt;&quot;;
	}
}
vars.put(&quot;prompt_parameters&quot;, prompt_parameters);

prompt_stateData = ContentUtil.getOptional(report_response, &quot;&lt;bus:stateData xsi:type=\&quot;bus:xmlEncodedXML\&quot;&gt;&quot;, &quot;&lt;/bus:stateData&gt;&quot;);
vars.put(&quot;prompt_stateData&quot;, prompt_stateData);

String prompts_parameter_values = &quot;&quot;;
JsonArray prompts = new JsonStreamParser(vars.get(&quot;report_prompt&quot;)).next().getAsJsonArray();
if(prompts.size() &gt; 0) {
	for(int i = 0; i &lt; prompts.size(); i++) {
		JsonObject prompt = prompts.get(i).getAsJsonObject();
		log.debug(&quot;JsonObject is: &quot; + prompt.toString());
		String key = prompt.get(&quot;name&quot;).getAsString();
		String value = prompt.get(&quot;value&quot;).getAsString();
		int rbIndex = report_response.indexOf(&quot;\&quot; displayValue=\&quot;&quot; + value + &quot;\&quot;/&gt;&quot;);
//		log.info(report_response.substring(0, rbIndex));
		int lbIndex = report_response.substring(0, rbIndex).lastIndexOf(&quot;useValue=\&quot;&quot;) + 10;
//		log.info(&quot;use value indx = &quot; + &quot;\&quot; displayValue=\&quot;&quot; + value + &quot;\&quot;/&gt;&quot; + rbIndex + &quot; &quot; + lbIndex);
		String useValue = report_response.substring(lbIndex, rbIndex);
//		String useValue = ContentUtil.getOptional(report_response, &quot;userValue=\&quot;&quot;, &quot;\&quot; displayValue=\&quot;&quot; + value + &quot;\&quot;/&gt;&quot;);
		log.debug(&quot;use value=&quot; + useValue);
		parameter_value = &quot;&lt;item xsi:type=\&quot;bus:parameterValue\&quot;&gt;&lt;bus:name xsi:type=\&quot;xsd:string\&quot;&gt;&quot; + key + &quot;&lt;/bus:name&gt;&quot; + &quot;&lt;bus:value xsi:type=\&quot;SOAP-ENC:Array\&quot; SOAP-ENC:arrayType=\&quot;bus:parmValueItem[]\&quot;&gt;&quot; + &quot;&lt;item xsi:type=\&quot;bus:simpleParmValueItem\&quot;&gt;&quot; + &quot;&lt;bus:inclusive xsi:type=\&quot;xs:boolean\&quot;&gt;true&lt;/bus:inclusive&gt;&quot; + &quot;&lt;bus:display xsi:type=\&quot;xsd:string\&quot;&gt;&quot; + value + &quot;&lt;/bus:display&gt;&quot; + &quot;&lt;bus:use xsi:type=\&quot;xsd:string\&quot;&gt;&quot; + useValue + &quot;&lt;/bus:use&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&quot;;
		
		prompts_parameter_values = prompts_parameter_values + parameter_value;
	}
}
vars.put(&quot;prompts_parameter_values&quot;, prompts_parameter_values);

log.debug(prompts_parameter_values);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset asyncTimer" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;asyncTimer&quot;, &quot;0&quot;);
vars.put(&quot;asyncTimeNotReached&quot;, &quot;true&quot;);
vars.put(&quot;report_sendAsync&quot;, &quot;true&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post runspecification " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:bus=&apos;http://developer.cognos.com/schemas/bibus/3/&apos; xmlns:rns1=&apos;http://developer.cognos.com/schemas/reportService/1&apos;&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type=&quot;bus:biBusHeader&quot;&gt;&lt;bus:CAM xsi:type=&quot;bus:CAM&quot;&gt;&lt;authenticityToken xsi:type=&quot;xsd:base64Binary&quot;&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type=&quot;bus:CAF&quot;&gt;&lt;contextID xsi:type=&quot;xsd:string&quot;&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type=&quot;bus:hdrSession&quot;&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType=&quot;bus:formFieldVar[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item xsi:type=&quot;bus:formFieldVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:formFieldVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType=&quot;bus:userPreferenceVar[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:dispatcherTransportVar[]&quot;&gt;&lt;item xsi:type=&quot;bus:dispatcherTransportVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;rs&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;bus:tracking xsi:type=&quot;bus:tracking&quot;&gt;${report_busTracking}&lt;/bus:tracking&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:forward&gt;&lt;bus:conversation xsi:type=&quot;bus:asynchRequest&quot;&gt;&lt;bus:name xmlns:bus=&quot;http://developer.cognos.com/schemas/bibus/3/&quot; xsi:type=&quot;xs:string&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;runSpecification&lt;/bus:name&gt;&lt;bus:options xmlns:bus=&quot;http://developer.cognos.com/schemas/bibus/3/&quot; xsi:type=&quot;SOAP-ENC:Array&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; SOAP-ENC:arrayType=&quot;bus:option[17]&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;&#xd;
						&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;primaryWaitThreshold&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:int&quot;&gt;5&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;secondaryWaitThreshold&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:int&quot;&gt;30&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionStringArray&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputFormat&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;xs:string[1]&quot;&gt;&#xd;
								&lt;item xsi:type=&quot;xs:string&quot;&gt;XHTML&lt;/item&gt;&#xd;
							&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:asynchOptionEncoding&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;attachmentEncoding&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;bus:encodingEnum&quot;&gt;MIME&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslURL&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;V5html_viewer.xsl&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionString&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;promptFormat&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;XHTMLFRGMT&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;prompt&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;${runSpec_prompt}&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputLocation&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionData&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;data&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;bus:dataEnum&quot;&gt;runWithAllData&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionNameValueArray&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslParameters&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:nameValue[3]&quot;&gt;&#xd;
								&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&#xd;
									&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;CVGateway&lt;/bus:name&gt;&#xd;
									&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;../v1/disp&lt;/bus:value&gt;&#xd;
								&lt;/item&gt;&#xd;
								&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&#xd;
									&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;renderIntermediateXML&lt;/bus:name&gt;&#xd;
									&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;false&lt;/bus:value&gt;&#xd;
								&lt;/item&gt;&#xd;
								&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&#xd;
									&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;renderEnvironment&lt;/bus:name&gt;&#xd;
									&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;false&lt;/bus:value&gt;&#xd;
								&lt;/item&gt;&#xd;
							&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:genericOptionAnyURI&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#saveSearchPath&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;${report_searchpath_tidy}&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionLanguageArray&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputLocale&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;xs:string[1]&quot;&gt;&#xd;
								&lt;item xsi:type=&quot;xs:string&quot;&gt;en-us&lt;/item&gt;&#xd;
							&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
					&lt;/bus:options&gt;${prompt_parameters}&lt;bus:specification xmlns:bus=&quot;http://developer.cognos.com/schemas/bibus/3/&quot; xsi:type=&quot;SOAP-ENC:Array&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; SOAP-ENC:arrayType=&quot;bus:asynchSpecification[1]&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;&#xd;
						&lt;item xsi:type=&quot;bus:reportServiceReportSpecification&quot;&gt;&#xd;
							&lt;bus:value xsi:type=&quot;bus:specification&quot;&gt;${prompt_spec}&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
					&lt;/bus:specification&gt;&lt;bus:stateData xmlns:bus=&quot;http://developer.cognos.com/schemas/bibus/3/&quot; xsi:type=&quot;bus:xmlEncodedXML&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;${prompt_stateData}&lt;/bus:stateData&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues xmlns:bus=&apos;http://developer.cognos.com/schemas/bibus/3/&apos; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; SOAP-ENC:arrayType=&quot;bus:parameterValue[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;${prompts_parameter_values}&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType=&quot;bus:option[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:int&quot;&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:int&quot;&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionStringArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;xsd:string[1]&quot;&gt;&lt;item&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;${attachmentOption}&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;${runSpec_prompt}&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionNameValueArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:nameValue[]&quot;&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;CVGateway&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:forward&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = &quot;&lt;bus:tracking xsi:type=\&quot;bus:tracking\&quot;&gt;&quot;;
trackingEndTag = &quot;&lt;/bus:tracking&gt;&quot;;
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug(&quot;tracking is: &quot; + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put(&quot;report_busTracking&quot;, trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, &quot;&lt;bus:status xsi:type=\&quot;xs:string\&quot;&gt;&quot;, &quot;&lt;/bus:status&gt;&quot;);
vars.put(&quot;report_conversationStatus&quot;, status);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="busTracking" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">report_busTracking</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">/SOAP-ENV:Envelope/SOAP-ENV:Header/bus:biBusHeader/bus:tracking</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">true</boolProp>
                <boolProp name="XPathExtractor.fragment">true</boolProp>
                <stringProp name="TestPlan.comments">get tracking from runspec response</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="status" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">report_conversationStatus</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">/SOAP-ENV:Envelope/SOAP-ENV:Header/bus:biBusHeader/bus:tracking/bus:conversationContext/bus:status</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">true</boolProp>
                <stringProp name="Scope.variable">report_conversationContext</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              </XPathExtractor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">log.debug(&quot;conversationStatus: &quot; + vars.get(&quot;report_conversationStatus&quot;));
if (vars.get(&quot;report_conversationStatus&quot;) != null) {
	if (!vars.get(&quot;report_conversationStatus&quot;).equals(&quot;conversationComplete&quot;)) {
		log.debug(&quot;report_release: &quot; + vars.get(&quot;report_busTracking&quot;));
		vars.put(&quot;report_release&quot;, &quot;true&quot;);
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;conversationComplete&quot;)) {
		if (vars.get(&quot;report_release&quot;) != null) {
			vars.remove(&quot;report_release&quot;);
			vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
		}
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;complete&quot;)) {
		vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;complete&quot;) &amp;&amp; (prev.getResponseDataAsString().contains(&quot;&lt;SOAP-ENV:Fault&gt;&quot;))){
		if (vars.get(&quot;report_release&quot;) != null) {
			vars.remove(&quot;report_release&quot;);
			vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
		}
	}

	//log.info(&quot;busTracking: &quot; + vars.get(&quot;report_busTracking&quot;));
}
log.debug(&quot;sendAsync = &quot; + vars.get(&quot;report_sendAsync&quot;));
vars.put(&quot;reportResponse&quot;, prev.getResponseDataAsString());//getSamplerData());</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="SOAPAction" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201606/.high</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="X-UseRsConsumerMode" elementType="Header">
                    <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="X-RsCMStoreID" elementType="Header">
                    <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                    <stringProp name="Header.value">${report_id}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="asyncLoop" enabled="true">
              <stringProp name="IncludeController.includepath">authoring/runReport/fullInteractivity/asyncLoop.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ process the report output" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return vars.get(&quot;reportResponse&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                <stringProp name="RegexExtractor.regex">\.\.\/v1\/disp(\?[^)]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get report_spec_encoded" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">report_spec_encoded</stringProp>
                <stringProp name="RegexExtractor.regex">xsi:type=&quot;bus:specification&quot;&gt;([^&lt;]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get stateData" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">stateData</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;bus:stateData xsi:type=&quot;bus:xmlEncodedXML&quot;&gt;([^&lt;]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-505831277">${report_datacheck}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="number of charts in response is expected?" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.debug(&quot;chart count expected: &quot; + vars.get(&quot;report_expected_chart_count&quot;) + &quot; chart count actual: &quot; + vars.get(&quot;chart_urls_matchNr&quot;));
if (vars.get(&quot;report_expected_chart_count&quot;) != vars.get(&quot;chart_urls_matchNr&quot;)) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;expected chart count &quot; + vars.get(&quot;report_expected_chart_count&quot;) + &quot; doest not match actual chart count &quot; + vars.get(&quot;chart_urls_matchNr&quot;));
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each chart_url in chart_urls" enabled="true">
              <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
              <stringProp name="ForeachController.returnVal">chart_url</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
vars.put(&quot;chart_url_decoded&quot;, StringEscapeUtils.unescapeHtml4(vars.get(&quot;chart_url&quot;)));</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */* </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1654885887">Content-Type: image/png</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each action" enabled="true">
          <stringProp name="ForeachController.inputVal">report_actions</stringProp>
          <stringProp name="ForeachController.returnVal">report_action</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increment action_counter" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// manually control the action_counter because jmeter&apos;s action_counter cannot be reset mid-execution of a thread group loop
action_counter = Integer.parseInt(vars.get(&quot;action_counter&quot;));
action_counter = action_counter + 1;
vars.put(&quot;action_counter&quot;, String.valueOf(action_counter));</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="/ reset asyncTimer" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;asyncTimer&quot;, &quot;0&quot;);
vars.put(&quot;asyncTimeNotReached&quot;, &quot;true&quot;);
vars.put(&quot;report_sendAsync&quot;, &quot;true&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="/ if action type is prompt" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${report_action}&quot; == &quot;prompt&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}${report_action}_promptPage_${report_name}" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="/ get action prompt info from report reponse" enabled="true">
                <stringProp name="BeanShellSampler.query">import com.ibm.bi.util.ContentUtil;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;

report_response = vars.get(&quot;reportResponse&quot;);

prompt_spec = ContentUtil.getOptional(report_response, &quot;&lt;bus:value xsi:type=\&quot;bus:specification\&quot;&gt;&quot;, &quot;&lt;/bus:value&gt;&quot;);
vars.put(&quot;prompt_spec&quot;, prompt_spec);

prompt_parameters = &quot;&lt;bus:parameters xmlns:bus=\&quot;http://developer.cognos.com/schemas/bibus/3/\&quot; xsi:type=\&quot;SOAP-ENC:Array\&quot; xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot; SOAP-ENC:arrayType=\&quot;bus:parameterValue[0]\&quot; xmlns:SOAP-ENC=\&quot;http://schemas.xmlsoap.org/soap/encoding/\&quot;/&gt;&quot;;
if(report_response.contains(&quot;asynchDetailParameterValues&quot;)){
	String res = ContentUtil.getOptional(report_response, &quot;&lt;item xsi:type=\&quot;bus:asynchDetailParameterValues\&quot;&gt;&quot;, &quot;&lt;/item&gt;&quot;);
	String valueCount = ContentUtil.getOptional(res, &quot;SOAP-ENC:arrayType=\&quot;bus:parameterValue[&quot;, &quot;]\&quot;&gt;&quot;);
	if(valueCount != &quot;0&quot;) {
		String itemsRaw = ContentUtil.getOptional(report_response, &quot;&lt;item xsi:type=\&quot;bus:asynchDetailParameterValues\&quot;&gt;&quot;, &quot;&lt;/bus:parameters&gt;&quot;);
		String items = ContentUtil.getOptional(itemsRaw + &quot;&lt;/bus:parameters&gt;&quot;, &quot;]\&quot;&gt;&quot;, &quot;&lt;/bus:parameters&gt;&quot;);
		prompt_parameters = &quot;&lt;bus:parameters xmlns:bus=\&quot;http://developer.cognos.com/schemas/bibus/3/\&quot; xsi:type=\&quot;SOAP-ENC:Array\&quot; xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot; SOAP-ENC:arrayType=\&quot;bus:parameterValue[&quot; + valueCount + &quot;]\&quot; xmlns:SOAP-ENC=\&quot;http://schemas.xmlsoap.org/soap/encoding/\&quot;&gt;&quot; + items + &quot;&lt;/bus:parameters&gt;&quot;;
	}
}
vars.put(&quot;prompt_parameters&quot;, prompt_parameters);

prompt_stateData = ContentUtil.getOptional(report_response, &quot;&lt;bus:stateData xsi:type=\&quot;bus:xmlEncodedXML\&quot;&gt;&quot;, &quot;&lt;/bus:stateData&gt;&quot;);
vars.put(&quot;prompt_stateData&quot;, prompt_stateData);

String prompts_parameter_values = &quot;&quot;;
JsonArray prompts = new JsonStreamParser(vars.get(&quot;report_actions_prompt_&quot; + vars.get(&quot;action_counter&quot;))).next().getAsJsonArray();

if(prompts.size() &gt; 0) {
	for(int i = 0; i &lt; prompts.size(); i++) {
		JsonObject prompt = prompts.get(i).getAsJsonObject();
		log.debug(&quot;JsonObject is: &quot; + prompt.toString());
		String key = prompt.get(&quot;name&quot;).getAsString();
		String value = prompt.get(&quot;value&quot;).getAsString();
		int rbIndex = report_response.indexOf(&quot;\&quot; displayValue=\&quot;&quot; + value + &quot;\&quot;/&gt;&quot;);
//		log.info(report_response.substring(0, rbIndex));
		int lbIndex = report_response.substring(0, rbIndex).lastIndexOf(&quot;useValue=\&quot;&quot;) + 10;
//		log.info(&quot;use value indx = &quot; + &quot;\&quot; displayValue=\&quot;&quot; + value + &quot;\&quot;/&gt;&quot; + rbIndex + &quot; &quot; + lbIndex);
		String useValue = report_response.substring(lbIndex, rbIndex);
//		String useValue = ContentUtil.getOptional(report_response, &quot;userValue=\&quot;&quot;, &quot;\&quot; displayValue=\&quot;&quot; + value + &quot;\&quot;/&gt;&quot;);
		log.debug(&quot;use value=&quot; + useValue);
		parameter_value = &quot;&lt;item xsi:type=\&quot;bus:parameterValue\&quot;&gt;&lt;bus:name xsi:type=\&quot;xsd:string\&quot;&gt;&quot; + key + &quot;&lt;/bus:name&gt;&quot; + &quot;&lt;bus:value xsi:type=\&quot;SOAP-ENC:Array\&quot; SOAP-ENC:arrayType=\&quot;bus:parmValueItem[]\&quot;&gt;&quot; + &quot;&lt;item xsi:type=\&quot;bus:simpleParmValueItem\&quot;&gt;&quot; + &quot;&lt;bus:inclusive xsi:type=\&quot;xs:boolean\&quot;&gt;true&lt;/bus:inclusive&gt;&quot; + &quot;&lt;bus:display xsi:type=\&quot;xsd:string\&quot;&gt;&quot; + value + &quot;&lt;/bus:display&gt;&quot; + &quot;&lt;bus:use xsi:type=\&quot;xsd:string\&quot;&gt;&quot; + useValue + &quot;&lt;/bus:use&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&quot;;
		
		prompts_parameter_values = prompts_parameter_values + parameter_value;
	}
}
vars.put(&quot;prompts_parameter_values&quot;, prompts_parameter_values);

log.debug(prompts_parameter_values);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ post runspecification " enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:bus=&apos;http://developer.cognos.com/schemas/bibus/3/&apos; xmlns:rns1=&apos;http://developer.cognos.com/schemas/reportService/1&apos;&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type=&quot;bus:biBusHeader&quot;&gt;&lt;bus:CAM xsi:type=&quot;bus:CAM&quot;&gt;&lt;authenticityToken xsi:type=&quot;xsd:base64Binary&quot;&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:CAF xsi:type=&quot;bus:CAF&quot;&gt;&lt;contextID xsi:type=&quot;xsd:string&quot;&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:hdrSession xsi:type=&quot;bus:hdrSession&quot;&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType=&quot;bus:formFieldVar[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item xsi:type=&quot;bus:formFieldVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:formFieldVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;ignoreXHTMLStrict&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType=&quot;bus:userPreferenceVar[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en-us&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:dispatcherTransportVar[]&quot;&gt;&lt;item xsi:type=&quot;bus:dispatcherTransportVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;rs&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;&lt;bus:tracking xsi:type=&quot;bus:tracking&quot;&gt;${report_busTracking}&lt;/bus:tracking&gt;&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:forward&gt;&lt;bus:conversation xsi:type=&quot;bus:asynchRequest&quot;&gt;&lt;bus:name xmlns:bus=&quot;http://developer.cognos.com/schemas/bibus/3/&quot; xsi:type=&quot;xs:string&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;runSpecification&lt;/bus:name&gt;&lt;bus:options xmlns:bus=&quot;http://developer.cognos.com/schemas/bibus/3/&quot; xsi:type=&quot;SOAP-ENC:Array&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; SOAP-ENC:arrayType=&quot;bus:option[17]&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;&#xd;
						&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;primaryWaitThreshold&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:int&quot;&gt;5&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;secondaryWaitThreshold&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:int&quot;&gt;30&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionStringArray&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputFormat&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;xs:string[1]&quot;&gt;&#xd;
								&lt;item xsi:type=&quot;xs:string&quot;&gt;XHTML&lt;/item&gt;&#xd;
							&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:asynchOptionEncoding&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;attachmentEncoding&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;bus:encodingEnum&quot;&gt;MIME&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslURL&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;V5html_viewer.xsl&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionString&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;promptFormat&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;XHTMLFRGMT&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;prompt&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;${runSpec_prompt}&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputLocation&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionData&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;data&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;bus:dataEnum&quot;&gt;runWithAllData&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionNameValueArray&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslParameters&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:nameValue[3]&quot;&gt;&#xd;
								&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&#xd;
									&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;CVGateway&lt;/bus:name&gt;&#xd;
									&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;../v1/disp&lt;/bus:value&gt;&#xd;
								&lt;/item&gt;&#xd;
								&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&#xd;
									&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;renderIntermediateXML&lt;/bus:name&gt;&#xd;
									&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;false&lt;/bus:value&gt;&#xd;
								&lt;/item&gt;&#xd;
								&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&#xd;
									&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;renderEnvironment&lt;/bus:name&gt;&#xd;
									&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;false&lt;/bus:value&gt;&#xd;
								&lt;/item&gt;&#xd;
							&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:genericOptionAnyURI&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#saveSearchPath&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;${report_searchpath_tidy}&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
						&lt;item xsi:type=&quot;bus:runOptionLanguageArray&quot;&gt;&#xd;
							&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputLocale&lt;/bus:name&gt;&#xd;
							&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;xs:string[1]&quot;&gt;&#xd;
								&lt;item xsi:type=&quot;xs:string&quot;&gt;en-us&lt;/item&gt;&#xd;
							&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
					&lt;/bus:options&gt;${prompt_parameters}&lt;bus:specification xmlns:bus=&quot;http://developer.cognos.com/schemas/bibus/3/&quot; xsi:type=&quot;SOAP-ENC:Array&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; SOAP-ENC:arrayType=&quot;bus:asynchSpecification[1]&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;&#xd;
						&lt;item xsi:type=&quot;bus:reportServiceReportSpecification&quot;&gt;&#xd;
							&lt;bus:value xsi:type=&quot;bus:specification&quot;&gt;${prompt_spec}&lt;/bus:value&gt;&#xd;
						&lt;/item&gt;&#xd;
					&lt;/bus:specification&gt;&lt;bus:stateData xmlns:bus=&quot;http://developer.cognos.com/schemas/bibus/3/&quot; xsi:type=&quot;bus:xmlEncodedXML&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;${prompt_stateData}&lt;/bus:stateData&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues xmlns:bus=&apos;http://developer.cognos.com/schemas/bibus/3/&apos; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; SOAP-ENC:arrayType=&quot;bus:parameterValue[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;${prompts_parameter_values}&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType=&quot;bus:option[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:int&quot;&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:int&quot;&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionStringArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;xsd:string[1]&quot;&gt;&lt;item&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;${attachmentOption}&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;${runSpec_prompt}&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionNameValueArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:nameValue[]&quot;&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;CVGateway&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:forward&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = &quot;&lt;bus:tracking xsi:type=\&quot;bus:tracking\&quot;&gt;&quot;;
trackingEndTag = &quot;&lt;/bus:tracking&gt;&quot;;
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug(&quot;tracking is: &quot; + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put(&quot;report_busTracking&quot;, trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, &quot;&lt;bus:status xsi:type=\&quot;xs:string\&quot;&gt;&quot;, &quot;&lt;/bus:status&gt;&quot;);
vars.put(&quot;report_conversationStatus&quot;, status);</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">log.debug(&quot;conversationStatus: &quot; + vars.get(&quot;report_conversationStatus&quot;));
if (vars.get(&quot;report_conversationStatus&quot;) != null) {
	if (!vars.get(&quot;report_conversationStatus&quot;).equals(&quot;conversationComplete&quot;)) {
		log.debug(&quot;report_release: &quot; + vars.get(&quot;report_busTracking&quot;));
		vars.put(&quot;report_release&quot;, &quot;true&quot;);
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;conversationComplete&quot;)) {
		if (vars.get(&quot;report_release&quot;) != null) {
			vars.remove(&quot;report_release&quot;);
			vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
		}
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;complete&quot;)) {
		vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;complete&quot;) &amp;&amp; (prev.getResponseDataAsString().contains(&quot;&lt;SOAP-ENV:Fault&gt;&quot;))){
		if (vars.get(&quot;report_release&quot;) != null) {
			vars.remove(&quot;report_release&quot;);
			vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
		}
	}

	//log.info(&quot;busTracking: &quot; + vars.get(&quot;report_busTracking&quot;));
}
log.debug(&quot;sendAsync = &quot; + vars.get(&quot;report_sendAsync&quot;));
vars.put(&quot;reportResponse&quot;, prev.getResponseDataAsString());//getSamplerData());</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="SOAPAction" elementType="Header">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201606/.high</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="X-UseRsConsumerMode" elementType="Header">
                      <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="Pragma" elementType="Header">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="X-RsCMStoreID" elementType="Header">
                      <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                      <stringProp name="Header.value">${report_id}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="asyncLoop" enabled="true">
                <stringProp name="IncludeController.includepath">authoring/runReport/fullInteractivity/asyncLoop.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ process the report output" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get(&quot;reportResponse&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">\.\.\/v1\/disp(\?[^)]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get report_spec_encoded" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">report_spec_encoded</stringProp>
                  <stringProp name="RegexExtractor.regex">xsi:type=&quot;bus:specification&quot;&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get stateData" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">stateData</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;bus:stateData xsi:type=&quot;bus:xmlEncodedXML&quot;&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-651725182">${__V(report_actions_datacheck_${action_counter})}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="number of charts in response is expected?" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.debug(&quot;chart count expected: &quot; + vars.get(&quot;report_actions_expected_chart_count_&quot; + vars.get(&quot;action_counter&quot;)) + &quot; chart count actual: &quot; + vars.get(&quot;chart_urls_matchNr&quot;));
if (vars.get(&quot;report_actions_expected_chart_count_&quot; + vars.get(&quot;action_counter&quot;)) != vars.get(&quot;chart_urls_matchNr&quot;)) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;expected chart count &quot; + vars.get(&quot;report_actions_expected_chart_count_&quot; + vars.get(&quot;action_counter&quot;)) + &quot; doest not match actual chart count &quot; + vars.get(&quot;chart_urls_matchNr&quot;));
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each chart_url in chart_urls" enabled="true">
                <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
                <stringProp name="ForeachController.returnVal">chart_url</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library
vars.put(&quot;chart_url_decoded&quot;, StringEscapeUtils.unescapeHtml4(vars.get(&quot;chart_url&quot;)));</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */* </stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1654885887">Content-Type: image/png</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="/ if action type is not prompt" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${report_action}&quot; != &quot;prompt&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}${report_action}_${report_name}" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get action info from report reponse" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope SOAP-ENV:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:bus=&quot;http://developer.cognos.com/schemas/bibus/3/&quot; xmlns:rns1=&quot;http://developer.cognos.com/schemas/reportService/1&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;bus:biBusHeader xsi:type=&quot;bus:biBusHeader&quot;&gt;&lt;bus:CAM xsi:type=&quot;bus:CAM&quot;&gt;&lt;authenticityToken xsi:type=&quot;xsd:base64Binary&quot;&gt;${authToken}&lt;/authenticityToken&gt;&lt;/bus:CAM&gt;&lt;bus:hdrSession xsi:type=&quot;bus:hdrSession&quot;&gt;&lt;bus:formFieldVars SOAP-ENC:arrayType=&quot;bus:formFieldVar[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item xsi:type=&quot;bus:formFieldVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;_ContextBlockSize&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;1000000&lt;/value&gt;&lt;/item&gt;&lt;/bus:formFieldVars&gt;&lt;/bus:hdrSession&gt;&lt;bus:CAF xsi:type=&quot;bus:CAF&quot;&gt;&lt;contextID xsi:type=&quot;xsd:string&quot;&gt;${cafContextId}&lt;/contextID&gt;&lt;/bus:CAF&gt;&lt;bus:userPreferenceVars SOAP-ENC:arrayType=&quot;bus:userPreferenceVar[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;productLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;item&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;contentLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;en&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:userPreferenceVars&gt;&lt;bus:dispatcherTransportVars xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:dispatcherTransportVar[]&quot;&gt;&lt;item xsi:type=&quot;bus:dispatcherTransportVar&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;rs&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;true&lt;/value&gt;&lt;/item&gt;&lt;/bus:dispatcherTransportVars&gt;${report_busTracking}&lt;/bus:biBusHeader&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;rns1:${report_action}&gt;&lt;bus:conversation xsi:type=&quot;bus:asynchRequest&quot;&gt;&lt;bus:name xmlns:bus=&quot;http://developer.cognos.com/schemas/bibus/3/&quot; xsi:type=&quot;xs:string&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;runSpecification&lt;/bus:name&gt;&lt;bus:options xmlns:bus=&quot;http://developer.cognos.com/schemas/bibus/3/&quot; xsi:type=&quot;SOAP-ENC:Array&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; SOAP-ENC:arrayType=&quot;bus:option[19]&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:int&quot;&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:int&quot;&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionStringArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;xs:string[1]&quot;&gt;&lt;item xsi:type=&quot;xs:string&quot;&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;${attachmentOption}&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionString&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;promptFormat&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;XHTMLFRGMT&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputLocation&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/temporaryObjectLocationEnum#serverFileSystem&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionData&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;data&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;bus:dataEnum&quot;&gt;runWithAllData&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/systemOptionEnum#accessibilityFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xsd:string&quot;&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionNameValueArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:nameValue[3]&quot;&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;CVGateway&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;../v1/disp&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;renderIntermediateXML&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;renderEnvironment&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#optimizedOutputContextData&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#interactive&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/runOptionEnum#saveSearchPath&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:string&quot;&gt;${report_searchpath_tidy}&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;selectionBasedFeatures&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;verticalElements&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:int&quot;&gt;20&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;advancedOutput&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;allowAnnotations&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionLanguageArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputLocale&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;xs:string[1]&quot;&gt;&lt;item xsi:type=&quot;xs:string&quot;&gt;en-us&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:genericOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;xs:string&quot;&gt;http://developer.cognos.com/ceba/constants/biDirectionalOptionEnum#biDirectionalFeaturesEnabled&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;false&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;bus:parameters xmlns:bus=&quot;http://developer.cognos.com/schemas/bibus/3/&quot; xsi:type=&quot;SOAP-ENC:Array&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; SOAP-ENC:arrayType=&quot;bus:parameterValue[0]&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;/&gt;&lt;bus:specification xmlns:bus=&quot;http://developer.cognos.com/schemas/bibus/3/&quot; xsi:type=&quot;SOAP-ENC:Array&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; SOAP-ENC:arrayType=&quot;bus:asynchSpecification[1]&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;&lt;item xsi:type=&quot;bus:reportServiceReportSpecification&quot;&gt;&lt;bus:value xsi:type=&quot;bus:specification&quot;&gt;${report_spec_encoded}&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:specification&gt;&lt;bus:stateData xmlns:bus=&quot;http://developer.cognos.com/schemas/bibus/3/&quot; xsi:type=&quot;bus:xmlEncodedXML&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;${stateData}&lt;/bus:stateData&gt;&lt;/bus:conversation&gt;&lt;bus:parameterValues xmlns:bus=&apos;http://developer.cognos.com/schemas/bibus/3/&apos; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; SOAP-ENC:arrayType=&quot;bus:parameterValue[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;/bus:parameterValues&gt;&lt;bus:options SOAP-ENC:arrayType=&quot;bus:option[]&quot; xsi:type=&quot;SOAP-ENC:Array&quot;&gt;&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;primaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:int&quot;&gt;5&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:asynchOptionInt&quot;&gt;&lt;bus:name xsi:type=&quot;bus:asynchOptionEnum&quot;&gt;secondaryWaitThreshold&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:int&quot;&gt;30&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionStringArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;outputFormat&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;xsd:string[1]&quot;&gt;&lt;item&gt;XHTML&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionAnyURI&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslURL&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:string&quot;&gt;V5html_viewer.xsl&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;prompt&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xsd:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionBoolean&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;returnOutputWhenAvailable&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;xs:boolean&quot;&gt;true&lt;/bus:value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:runOptionNameValueArray&quot;&gt;&lt;bus:name xsi:type=&quot;bus:runOptionEnum&quot;&gt;xslParameters&lt;/bus:name&gt;&lt;bus:value xsi:type=&quot;SOAP-ENC:Array&quot; SOAP-ENC:arrayType=&quot;bus:nameValue[]&quot;&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;CVGateway&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;../v1/disp&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;renderIntermediateXML&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;false&lt;/value&gt;&lt;/item&gt;&lt;item xsi:type=&quot;bus:nameValue&quot;&gt;&lt;name xsi:type=&quot;xsd:string&quot;&gt;renderEnvironment&lt;/name&gt;&lt;value xsi:type=&quot;xsd:string&quot;&gt;false&lt;/value&gt;&lt;/item&gt;&lt;/bus:value&gt;&lt;/item&gt;&lt;/bus:options&gt;&lt;/rns1:${report_action}&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/reports</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getTrackingInfo" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.ibm.bi.util.ContentUtil;

trackingStartTag = &quot;&lt;bus:tracking xsi:type=\&quot;bus:tracking\&quot;&gt;&quot;;
trackingEndTag = &quot;&lt;/bus:tracking&gt;&quot;;
trackingInnerContent = ContentUtil.getOptional(prev.getResponseDataAsString(), trackingStartTag, trackingEndTag);
log.debug(&quot;tracking is: &quot; + trackingInnerContent);
trackingFull = trackingStartTag + trackingInnerContent + trackingEndTag;
vars.put(&quot;report_busTracking&quot;, trackingFull);

status = ContentUtil.getOptional(trackingInnerContent, &quot;&lt;bus:status xsi:type=\&quot;xs:string\&quot;&gt;&quot;, &quot;&lt;/bus:status&gt;&quot;);
vars.put(&quot;report_conversationStatus&quot;, status);</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setReleaseInfo" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">log.debug(&quot;conversationStatus: &quot; + vars.get(&quot;report_conversationStatus&quot;));
if (vars.get(&quot;report_conversationStatus&quot;) != null) {
	if (!vars.get(&quot;report_conversationStatus&quot;).equals(&quot;conversationComplete&quot;)) {
		log.debug(&quot;report_release: &quot; + vars.get(&quot;report_busTracking&quot;));
		vars.put(&quot;report_release&quot;, &quot;true&quot;);
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;conversationComplete&quot;)) {
		if (vars.get(&quot;report_release&quot;) != null) {
			vars.remove(&quot;report_release&quot;);
			vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
		}
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;complete&quot;)) {
		vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
	}
	if (vars.get(&quot;report_conversationStatus&quot;).equals(&quot;complete&quot;) &amp;&amp; (prev.getResponseDataAsString().contains(&quot;&lt;SOAP-ENV:Fault&gt;&quot;))){
		if (vars.get(&quot;report_release&quot;) != null) {
			vars.remove(&quot;report_release&quot;);
			vars.put(&quot;report_sendAsync&quot;, &quot;false&quot;);
		}
	}

	//log.info(&quot;busTracking: &quot; + vars.get(&quot;report_busTracking&quot;));
}
log.debug(&quot;sendAsync = &quot; + vars.get(&quot;report_sendAsync&quot;));
vars.put(&quot;reportResponse&quot;, prev.getResponseDataAsString());//getSamplerData());</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="SOAPAction" elementType="Header">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">http://host.com/xmlns/prod/cognos/reportService/201606/.high</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="X-UseRsConsumerMode" elementType="Header">
                      <stringProp name="Header.name">X-UseRsConsumerMode</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://${serverName}:${serverPort}${urlPath}/bi/pat/rsapp.htm</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="Pragma" elementType="Header">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="X-RsCMStoreID" elementType="Header">
                      <stringProp name="Header.name">X-RsCMStoreID</stringProp>
                      <stringProp name="Header.value">${report_id}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="asyncLoop" enabled="true">
                <stringProp name="IncludeController.includepath">authoring/runReport/fullInteractivity/asyncLoop.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ process the report output" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">return vars.get(&quot;reportResponse&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get chart_urls" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">chart_urls</stringProp>
                  <stringProp name="RegexExtractor.regex">\.\.\/v1\/disp(\?[^&quot;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get stateData" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">stateData</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;bus:stateData xsi:type=&quot;bus:xmlEncodedXML&quot;&gt;([^&lt;]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="datacheck in response?" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-651725182">${__V(report_actions_datacheck_${action_counter})}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="number of charts in response is expected?" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.debug(&quot;chart count expected: &quot; + vars.get(&quot;report_actions_expected_chart_count_&quot; + vars.get(&quot;action_counter&quot;)) + &quot; chart count actual: &quot; + vars.get(&quot;chart_urls_matchNr&quot;));
if (vars.get(&quot;report_actions_expected_chart_count_&quot; + vars.get(&quot;action_counter&quot;)) != vars.get(&quot;chart_urls_matchNr&quot;)) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;expected chart count &quot; + vars.get(&quot;report_actions_expected_chart_count_&quot; + vars.get(&quot;action_counter&quot;)) + &quot; doest not match actual chart count &quot; + vars.get(&quot;chart_urls_matchNr&quot;));
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each chart_url in chart_urls" enabled="true">
                <stringProp name="ForeachController.inputVal">chart_urls</stringProp>
                <stringProp name="ForeachController.returnVal">chart_url</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ html decode chart url" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import org.apache.commons.lang3.StringEscapeUtils;
// __unescapeHtml not working here, force it by calling underlying library

String url = vars.get(&quot;chart_url&quot;);
if(url.endsWith(&quot;);&quot;)) {
	url = url.substring(0, url.length() - 2);
	vars.put(&quot;chart_url&quot;, url);
}

vars.put(&quot;chart_url_decoded&quot;, StringEscapeUtils.unescapeHtml4(vars.get(&quot;chart_url&quot;)));</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ get chart" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/disp${chart_url_decoded}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */* </stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="is it an image/png?" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1654885887">Content-Type: image/png</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include release" enabled="true">
          <stringProp name="IncludeController.includepath">authoring/runReport/fullInteractivity/soap_release.jmx</stringProp>
        </IncludeController>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
