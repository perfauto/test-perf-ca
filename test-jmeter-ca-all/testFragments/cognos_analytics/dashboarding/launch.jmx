<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false">
        <stringProp name="TestPlan.comments"></stringProp>
      </TestFragmentController>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/objects/dashboardId?fields=specification" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="fields" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fields</stringProp>
                <stringProp name="Argument.value">defaultName,specification,deploymentReferences.ancestors,deploymentReferences.defaultName,deploymentReferences.id,deploymentReferences.type,owner.defaultName,permissions,disabled,hidden,iconURI,defaultScreenTip,searchPath</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${dashboard_id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://vottplab26host.com:9800/bi/index.html?perspective=dashboard&amp;context=%7B%22perspective%22%3A%22dashboard%22%2C%22id%22%3A%22i3AFF8E40E6604E8DBE05D1539C7EBFDB%22%2C%22content%22%3A%7B%22isAuthoringMode%22%3Afalse%2C%22boardId%22%3A%22i3AFF8E40E6604E8DBE05D1539C7EBFDB%22%7D%7D</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get newModuleId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">newModuleId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].deploymentReferences[0].objects[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NO_NEW</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If first_open" enabled="true">
          <stringProp name="TestPlan.comments">Only run the perspectives request for the first opens</stringProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${tr_prefix}&quot;==&quot;first_&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/perspectives/${type}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/perspectives/${type}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://vottplab26host.com:9800/bi/index.html?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/bi/v1/objects/dashboardId?fields=defaultName" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="fields" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">fields</stringProp>
                <stringProp name="Argument.value">defaultName%2Cspecification%2CdeploymentReferences.defaultName%2CdeploymentReferences.id%2CdeploymentReferences.type%2CdeploymentReferences.searchPath%2Cancestors%2Cowner.defaultName%2Cpermissions%2Cdisabled%2Chidden%2CsearchPath</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${dashboard_id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://vottplab26host.com:9800/bi/index.html?perspective=dashboard&amp;context=%7B%22perspective%22%3A%22dashboard%22%2C%22id%22%3A%22i3AFF8E40E6604E8DBE05D1539C7EBFDB%22%2C%22content%22%3A%7B%22isAuthoringMode%22%3Afalse%2C%22boardId%22%3A%22i3AFF8E40E6604E8DBE05D1539C7EBFDB%22%7D%7D</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get dashboardSpec" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">dashboardSpec</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..specification</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="create dashboard object" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.ibm.jmeter.ca.dataset.*;
import org.apache.commons.lang3.exception.ExceptionUtils;
import net.sf.json.JSONObject;

jsonSlurper = new groovy.json.JsonSlurper()
properties = jsonSlurper.parseText(prev.getResponseDataAsString())

try {
	specification = new Specification(properties.data[0].specification)

	// TODO: shouldn&apos;t we be handling all types?
	vars.put(&quot;dataSetType&quot;, specification.getFirstAssetType())
	
	navigation = new Navigation(vars.get(&quot;navigation&quot;))

	deploymentReferences = new DeploymentReferences(
		((JSONObject)properties).getJSONArray(&quot;data&quot;).get(0).getJSONArray(&quot;deploymentReferences&quot;))

	vars.put(&quot;firstAssetId&quot;, deploymentReferences.getFirstAssetId())
	
	dashboard = new Dashboard(
		properties.data[0].id,
		properties.data[0].defaultName,
		properties.data[0].type,
		navigation,
		specification,
		deploymentReferences)
	vars.putObject(&quot;dashboard&quot;, dashboard)

	// store searchPath for ca audit headers
	vars.put(&quot;x_audit_searchPath&quot;, properties.data[0].searchPath)

	// store searchPath of first dataset for ca audit headers
	vars.put(&quot;x_audit_dataSearchPath&quot; , properties.data[0].deploymentReferences[0].objects[0].searchPath)

} catch (Exception e) {
	prev.setSuccessful(false);
	prev.setResponseData(ExceptionUtils.getStackTrace(e));
	prev.setResponseMessage(e.getMessage());
}
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ remove previous dashboard_widget_requests" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">datacheckCountStr = vars.get(&quot;dashboard_widget_request_matchNr&quot;);
if (datacheckCountStr != null ) {
	int datacheckCount = Integer.parseInt(datacheckCountStr);
	while(datacheckCount &gt; 0) {
		vars.remove(&quot;dashboard_widget_request_&quot; + datacheckCount);
		datacheckCount = datacheckCount - 1;
	}
	vars.remove(&quot;dashboard_widget_request&quot;);
	vars.remove(&quot;dashboard_widget_request_matchNr&quot;);
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="/ assign urls for dataset calls" enabled="true"/>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="use file tab_000" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;recordingFileName&quot;, &quot;tab_000&quot;)
log.debug(&quot;recordingFileName=&quot;+vars.get(&quot;recordingFileName&quot;))</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include dashboarding/processRecording.jmx" enabled="true">
            <stringProp name="IncludeController.includepath">dashboarding/processRecording.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Read each query spec line from file" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">dashboard_widget_request</stringProp>
            <stringProp name="RegexExtractor.regex">(.+datasets.[^\n]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}getMetadata" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="metadata" enabled="true"/>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include dashboarding/metadata.jmx" enabled="true">
              <stringProp name="IncludeController.includepath">dashboarding/metadata.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}launchDashboard_${dashboard_name}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="suggestions" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="/ If not in edit mode use suggestion service" enabled="true">
              <stringProp name="IfController.condition">${__groovy(${__groovy(&quot;${dashboard_editmode}&quot;!=&quot;true&quot; &amp;&amp; &quot;${suggestionsCount}&quot;!=&quot;0&quot;)})}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ remove previous dashboard_sa_requests" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">datacheckCountStr = vars.get(&quot;dashboard_sa_request_matchNr&quot;);
if (datacheckCountStr != null ) {
	int datacheckCount = Integer.parseInt(datacheckCountStr);
	while(datacheckCount &gt; 0) {
		vars.remove(&quot;dashboard_sa_request_&quot; + datacheckCount);
		datacheckCount = datacheckCount - 1;
	}
	vars.remove(&quot;dashboard_sa_request&quot;);
	vars.remove(&quot;dashboard_sa_request_matchNr&quot;);
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include dashboarding/suggestions.jmx" enabled="true">
                <stringProp name="IncludeController.includepath">dashboarding/suggestions.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="datasets" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ remove previous dashboard_datachecks" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">datacheckCountStr = vars.get(&quot;dashboard_datachecks_matchNr&quot;);
if (datacheckCountStr != null ) {
	int datacheckCount = Integer.parseInt(datacheckCountStr);
	while(datacheckCount &gt; 0) {
		vars.remove(&quot;dashboard_datachecks_&quot; + datacheckCount);
		datacheckCount = datacheckCount - 1;
	}
	vars.remove(&quot;dashboard_datachecks&quot;);
	vars.remove(&quot;dashboard_datachecks_matchNr&quot;);
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get dashboard details" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return vars.get(&quot;item&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get dashboard_datachecks" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">item datacheck dashboard_datachecks</stringProp>
                <stringProp name="filename">${__P(includecontroller.prefix)}/dashboarding/groovy/getDatachecks.groovy</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// uses script file defined above</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <com.ibm.jmeter.parallel.ParallelSampler guiclass="com.ibm.jmeter.parallel.gui.ParallelRequestGui" testclass="com.ibm.jmeter.parallel.ParallelSampler" testname="Parallel Sampler for dashboard widget calls - dashboard" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="urlArrayName">dashboard_widget_request</stringProp>
              <stringProp name="datacheckArrayName">dashboard_datachecks</stringProp>
              <stringProp name="resultObjectName">parallelSamplerErrors</stringProp>
            </com.ibm.jmeter.parallel.ParallelSampler>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set headers" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
headerManager = ctx.getCurrentSampler().getHeaderManager();


// x-audit headers are used for CA auditing purposes, they are not required unless you care about audit logging

// x-audit-dataSearchPath: /content/folder%5B@name=&apos;Dashboarding&apos;%5D/folder%5B@name=&apos;source&apos;%5D/uploadedFile%5B@name=&apos;CSV_1000rows100cols.csv&apos;%5D
headerManager.removeHeaderNamed(&quot;x-audit-dataSearchPath&quot;)
headerManager.add(new Header(&quot;x-audit-dataSearchPath&quot;,vars.get(&quot;x_audit_dataSearchPath&quot;)));

// x-audit-type: exploration
headerManager.removeHeaderNamed(&quot;x-audit-type&quot;)
headerManager.add(new Header(&quot;x-audit-type&quot;,&quot;exploration&quot;));

// x-audit-searchPath
headerManager.removeHeaderNamed(&quot;x-audit-searchPath&quot;)
headerManager.add(new Header(&quot;x-audit-searchPath&quot;,vars.get(&quot;x_audit_searchPath&quot;)));

// x-audit-dashboardId
headerManager.removeHeaderNamed(&quot;x-audit-dashboardId&quot;)
headerManager.add(new Header(&quot;x-audit-dashboardId&quot;,vars.get(&quot;dashboard_id&quot;)));

// remove Connection header twice? -- if not some POST will fail
headerManager.removeHeaderNamed(&quot;Connection&quot;);
headerManager.removeHeaderNamed(&quot;Connection&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="executions calls" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="/ If Dashboard Service Requests enabled" enabled="true">
              <stringProp name="IfController.condition">${__groovy(&quot;${smartAnnotations}&quot;==&quot;enabled&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include dashboarding/executions.jmx" enabled="true">
                <stringProp name="IncludeController.includepath">dashboarding/executions.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="tabs" enabled="true"/>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include dashboarding/tabs.jmx" enabled="true">
            <stringProp name="IncludeController.includepath">dashboarding/tabs.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="delete the temp session if it was successful" enabled="true">
          <stringProp name="TestPlan.comments">expect something like MSR-VRF-1000 No issues were detected during verification.</stringProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${feedback_message}&quot;.indexOf(&quot;No issues&quot;) != -1)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete session" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/modules/${tempDatasetId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="204 or 200?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1443490196">204|200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
