<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="true"/>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get testcase details" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">return vars.get(&quot;item&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="/ get group_name" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">group_name</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get list of files" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${fileupload_data_dir}</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">fileupload_data_dir = args[0]
vars.put(&quot;isDirectory&quot;, &quot;false&quot;);
group_name = vars.get(&quot;group_name&quot;)

File groupFile = new File(fileupload_data_dir, group_name)
log.debug(&quot;groupFile: &quot; + groupFile.toString())

File[] files;

if (groupFile.isFile()) {
	
	// just a single file
	files = [groupFile]

} else if(groupFile.isDirectory()) {
	
	// a directory of files
	vars.put(&quot;isDirectory&quot;, &quot;true&quot;);
	files = groupFile.listFiles();
	
} else {
	// is it possible?
	SampleResult.setSuccessful(false);
	SampleResult.setErrorCount(1);
	SampleResult.setResponseMessage(&quot;something wrong with file or group name provided in &quot; + vars.get(&quot;item&quot;));
	return;
}

// populate jmeter variables
int counter = 0;
for (File file : files) {
	counter = counter + 1;
	String fname = file.getName();
	vars.put(&quot;filenames_&quot; + String.valueOf(counter), fname);
}
vars.put(&quot;filenames_matchNr&quot;, String.valueOf(counter));
</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="/ set fileupload_data_dir" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__P(fileupload_data_dir,../../../testPlans/data)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">fileupload_data_dir_param = args[0]

fileupload_data_dir_rel_from_root_param = &apos;test-jmeter-base/testPlans/data&apos;

fileupload_data_dir_rel_from_bin_param = &apos;../../../testPlans/data&apos;

fileupload_data_dir = &apos;&apos;
// new default
if (new File(fileupload_data_dir_param).exists()) {
	// use the provided value
	fileupload_data_dir = fileupload_data_dir_param
} else if (new File(fileupload_data_dir_rel_from_root_param).exists()) {
	// try default location relative from root
	fileupload_data_dir = fileupload_data_dir_rel_from_root_param
} else if (new File(fileupload_data_dir_rel_from_bin_param).exists()) {
	// try default location relative from bin
	fileupload_data_dir = fileupload_data_dir_rel_from_bin_param
} else {
	// try current location
	fileupload_data_dir = &apos;&apos;
}

vars.put(&quot;fileupload_data_dir&quot;, fileupload_data_dir)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="only file upload" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${type}&quot;==&quot;file_upload&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="file_upload" enabled="true"/>
          <hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each file" enabled="true">
              <stringProp name="ForeachController.inputVal">filenames</stringProp>
              <stringProp name="ForeachController.returnVal">fileName</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">${filenames_matchNr}</stringProp>
            </ForeachController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ check if file exists" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="nav_filter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                    </elementProp>
                    <elementProp name="fields" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">userInterfaces,owner.id,defaultName,disabled,hidden,permissions,runInAdvancedViewer,canBurst,userInterfaces,extensions,iconURI,defaultScreenTip</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.my_folders/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Delete existing file before uploading new one" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;
vars.put(&quot;FILE_DEL&quot;,&quot;0&quot;); // this is used later to check whether to delete already existing file 
JsonStreamParser jsonStreamReader = new JsonStreamParser(prev.getResponseDataAsString());
String jsonStr = prev.getResponseDataAsString();
JsonElement response = new JsonStreamParser(jsonStr).next().getAsJsonObject();
 //{ &apos;data&apos;: [ &quot;defaultName&quot;.....&quot;id&quot;
JsonArray data = response.getAsJsonArray(&quot;data&quot;);
for (int i =0; i&lt; data.size(); i++) {
	JsonElement element = (JsonObject) data.get(i);
	if (element.isJsonObject()) {
		JsonObject item = element.getAsJsonObject();
		if(item.get(&quot;defaultName&quot;).getAsString().equals(vars.get(&quot;fileName&quot;))) {
			vars.put(&quot;FILE_ID&quot;, item.get(&quot;id&quot;).getAsString());
			log.debug(&quot;FILE_ID=&quot; + item.get(&quot;id&quot;).getAsString());
			vars.put(&quot;FILE_DEL&quot;,&quot;1&quot;);
			break;
		}
	}
}

log.debug(&quot;FILE_ID=&quot; + vars.get(&quot;FILE_ID&quot;));
if (vars.get(&quot;FILE_ID&quot;) == null) {
	log.debug(&quot;file did not exist on cm.  Proceed with upload&quot;);	
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ assign file_dir and file_ext" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${fileupload_data_dir}</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//the variable naming conventions are getting out of hand
groupDirName = &quot;&quot;;
if (&quot;true&quot;.equals(vars.get(&quot;isDirectory&quot;))) {
	groupDirName = &quot;/&quot; + vars.get(&quot;group_name&quot;);
}

vars.put(&quot;file_dir&quot;,args[0] + groupDirName + &quot;/&quot; + vars.get(&quot;fileName&quot;))

//&quot;C:\\eclipse_work\\jmeterBranched3\\jmeter_main\\testFragments\\watson_analytics\\utilities\\splitBinaryFiles\\XLS_50000rows50cols.xls&quot;)

vars.put(&quot;file_ext&quot;,vars.get(&quot;file_dir&quot;).substring(vars.get(&quot;file_dir&quot;).lastIndexOf(&quot;.&quot;)))

fileSeparator = &quot;&quot;
if(vars.get(&quot;file_dir&quot;).lastIndexOf(&quot;/&quot;) == -1){
    //using File.separator doesn&apos;t always work - user input may vary
    fileSeparator = &quot;\\&quot;
}else{
    fileSeparator = &quot;/&quot;
}

vars.put(&quot;fileName&quot;,vars.get(&quot;file_dir&quot;).substring(vars.get(&quot;file_dir&quot;).lastIndexOf(fileSeparator)+1))


if(vars.get(&quot;file_ext&quot;) == &quot;.xls&quot; || vars.get(&quot;file_ext&quot;) == &quot;.csv&quot;){
	vars.put(&quot;segmentContentType&quot;,&quot;application/vnd.ms-excel&quot;)
}else if(vars.get(&quot;file_ext&quot;) == &quot;.xlsx&quot;){
	vars.put(&quot;segmentContentType&quot;,&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;)
}else if(vars.get(&quot;file_ext&quot;) == &quot;.zip&quot;){
	vars.put(&quot;segmentContentType&quot;,&quot;application/zip&quot;)
}else if(vars.get(&quot;file_ext&quot;) == &quot;.gzip&quot;){
	vars.put(&quot;segmentContentType&quot;,&quot;application/x-gtar&quot;)
}else {
	vars.put(&quot;segmentContentType&quot;,&quot;application/vnd.ms-excel&quot;)
}

</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller check if the file has been uploaded.  If so delete it" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${FILE_DEL}&quot;==&quot;1&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ delete the file that exists" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="force" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">force</stringProp>
                      </elementProp>
                      <elementProp name="recursive" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">recursive</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${FILE_ID}</stringProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Host" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value"> application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value"> gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value"> application/json</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value"> http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                      </elementProp>
                      <elementProp name="Content-Length" elementType="Header">
                        <stringProp name="Header.name">Content-Length</stringProp>
                        <stringProp name="Header.value"> 24862477</stringProp>
                      </elementProp>
                      <elementProp name="Connection" elementType="Header">
                        <stringProp name="Header.name">Connection</stringProp>
                        <stringProp name="Header.value"> keep-alive</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="upload" enabled="true"/>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}Initializing_filename_${fileName}" enabled="true">
                  <stringProp name="TestPlan.comments">Initialing the file to upload</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files?filename=${fileName}&amp;async=true</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Host" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value"> gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                        </elementProp>
                        <elementProp name="Connection" elementType="Header">
                          <stringProp name="Header.name">Connection</stringProp>
                          <stringProp name="Header.value"> keep-alive</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract segmentId" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">segmentId</stringProp>
                      <stringProp name="RegexExtractor.regex">\d+</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract X-CA-Affinity" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                      <stringProp name="RegexExtractor.refname">XCAAffinityHeader</stringProp>
                      <stringProp name="RegexExtractor.regex">X-CA-Affinity: (\d+)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}segment/chunk10MB_${fileName}" enabled="true">
                  <stringProp name="TestPlan.comments">Segment the file into 10MB chunks</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Read in 10mb chunks and create PUT" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">BufferedInputStream bis = new BufferedInputStream(new FileInputStream(new File(vars.get(&quot;file_dir&quot;))));
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug(&quot;Available bytes: &quot; + Integer.toString(numBytesAvail));
log.debug(&quot;Bytes read: &quot; + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default, US-ASCII
	vars.put(&quot;fileSegmentBuffer&quot;,new String(Arrays.copyOfRange(buffer, 0, bytesRead), &quot;ISO-8859-1&quot;));
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	vars.putObject(&quot;inputStream&quot;,bis);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
}

vars.put(&quot;segmentCounter&quot;,&quot;1&quot;);

/*
 * Read using a &apos;read&apos; character approach
File file = new File(vars.get(&quot;file_dir&quot;));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
InputStreamReader isr = new InputStreamReader(inputStream);
char[] buffer = new char[bufferSize];
isr.read(buffer);

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	vars.put(&quot;fileSegmentBuffer&quot;,byteStr);
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	vars.putObject(&quot;fileInputStream&quot;,isr);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
}

vars.put(&quot;segmentCounter&quot;,&quot;1&quot;);
*/

/* Read using a &apos;read byte&apos; approach
 
File file = new File(vars.get(&quot;file_dir&quot;));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	String byteStr = new String(buffer);
	vars.put(&quot;fileSegmentBuffer&quot;,byteStr);
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	
	vars.putObject(&quot;fileInputStream&quot;,inputStream);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
}

vars.put(&quot;segmentCounter&quot;,&quot;1&quot;);
*/</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Submit each segment of file" enabled="true">
                    <stringProp name="WhileController.condition">${__groovy(&quot;${moreSegments}&quot;)}</stringProp>
                  </WhileController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT chunk to server" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${fileSegmentBuffer}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=${segmentCounter}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Host" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value"> gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">${segmentContentType}</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                          </elementProp>
                          <elementProp name="Connection" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value"> keep-alive</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp name="X-CA-Affinity" elementType="Header">
                            <stringProp name="Header.name">X-CA-Affinity</stringProp>
                            <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Read next 10mb chunk" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">BufferedInputStream bis = vars.getObject(&quot;inputStream&quot;);
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug(&quot;Available bytes: &quot; + Integer.toString(numBytesAvail));
log.debug(&quot;Bytes read: &quot; + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default(UTF-8), US-ASCII
	vars.put(&quot;fileSegmentBuffer&quot;,new String(Arrays.copyOfRange(buffer, 0, bytesRead), &quot;ISO-8859-1&quot;));
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	vars.putObject(&quot;inputStream&quot;,bis);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
	bis.close();
}


/*
 * Read using a &apos;read character&apos; approach
InputStreamReader isr = vars.getObject(&quot;fileInputStream&quot;);
int bufferSize = 10485760; //10mb - this number in bytes
char[] buffer = new char[bufferSize];
int readState = isr.read(buffer);
log.debug(isr.getEncoding());

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	//String byteStr = buffer.toString();
	vars.put(&quot;fileSegmentBuffer&quot;,byteStr);
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
	isr.close();
}
*/

/*
 * Read using a &apos;read byte&apos; approach

FileInputStream inputStream = vars.getObject(&quot;fileInputStream&quot;);
log.debug(Integer.toString(inputStream.available()));
int bufferSize = 10485760; //10mb - this number in bytes
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	vars.put(&quot;fileSegmentBuffer&quot;,new String(buffer));
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
	inputStream.close();
}
*/
</stringProp>
                      </JSR223PostProcessor>
                      <hashTree/>
                      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ increment segmentCounter" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">vars.put(&quot;segmentCounter&quot;,Integer.toString(Integer.parseInt(vars.get(&quot;segmentCounter&quot;))+1))</stringProp>
                      </JSR223PostProcessor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ retreive taskID from PUTted file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=-1</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Host" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value"> gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                        </elementProp>
                        <elementProp name="Connection" elementType="Header">
                          <stringProp name="Header.name">Connection</stringProp>
                          <stringProp name="Header.value"> keep-alive</stringProp>
                        </elementProp>
                        <elementProp name="X-CA-Affinity" elementType="Header">
                          <stringProp name="Header.name">X-CA-Affinity</stringProp>
                          <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract taskID (task id)" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">TASK_ID</stringProp>
                      <stringProp name="RegexExtractor.regex">taskID&quot;:&quot;(.+)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Instantiate REFRESH_DONE=0 and taskTimestamp" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">//This is an internally used variable, so instantiating it here instead of in test plan
vars.put(&quot;REFRESH_DONE&quot;,&quot;0&quot;);
vars.put(&quot;taskTimestamp&quot;,String.valueOf(System.currentTimeMillis()));</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset uploadTimer" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;uploadTimer&quot;, &quot;0&quot;);
vars.put(&quot;uploadTimeNotReached&quot;, &quot;true&quot;);
//vars.put(&quot;REFRESH_DONE&quot;, &quot;0&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_analyzing_${fileName}" enabled="true">
                  <stringProp name="TestPlan.comments">Performing the metadata tasks durning the Analyzing phaze</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While the data is uploading" enabled="true">
                    <stringProp name="WhileController.condition">${__groovy(&quot;${REFRESH_DONE}&quot;==&quot;0&quot;)}</stringProp>
                  </WhileController>
                  <hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update uploadTimer" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">int uploadTimer = Integer.parseInt(vars.get(&quot;uploadTimer&quot;));
uploadTimer = uploadTimer + 1;
if (uploadTimer &gt;= 2700) {
	log.error(&quot;upload attempt limit reached&quot;);
	vars.put(&quot;REFRESH_DONE&quot;, &quot;-1&quot;);
	vars.put(&quot;uploadTimeNotReached&quot;, &quot;false&quot;);
}
vars.put(&quot;uploadTimer&quot;, &quot;&quot; + uploadTimer);
</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] Refresh upload completion status" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="_" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${taskTimestamp}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/tasks/${TASK_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp name="X-CA-Affinity" elementType="Header">
                            <stringProp name="Header.name">X-CA-Affinity</stringProp>
                            <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Check response of completion status check" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">if(prev.getResponseDataAsString().contains(&quot;\&quot;state\&quot;:\&quot;SUCCESS\&quot;&quot;)){
	vars.put(&quot;REFRESH_DONE&quot;,&quot;1&quot;);
}
if(prev.getResponseDataAsString().contains(&quot;\&quot;state\&quot;:\&quot;NOT_AVAILABLE\&quot;&quot;)){
	vars.put(&quot;REFRESH_DONE&quot;,&quot;-1&quot;);
}
                      </stringProp>
                      </JSR223PostProcessor>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="/ Time between checking refresh status" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract BASE_MOD_ID (base module ID)" enabled="true">
                        <stringProp name="TestPlan.comments">this is needed to to extract the base module id so that we know when the task is finished</stringProp>
                        <stringProp name="JSONPostProcessor.referenceNames">BASE_MOD_ID</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Increment tasktTimestamp" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">vars.put(&quot;taskTimestamp&quot;, String.valueOf(Long.parseLong(vars.get(&quot;taskTimestamp&quot;))+1));</stringProp>
                      </JSR223PostProcessor>
                      <hashTree/>
                    </hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="/ Response Assertion file upload complete" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1444">-1</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">20</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">REFRESH_DONE</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="/ If Controller check if upload failed" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(&quot;${REFRESH_DONE}&quot;==&quot;1&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_save_${fileName}" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields=*" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="fields" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">*</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">fields</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="359487">${fileName}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="fields" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">defaultName,owner.defaultName,ancestors,permissions,hidden,disabled</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">fields</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="359487">${fileName}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller check if the file has been uploaded.  If so delete it" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${FILE_DEL}&quot;==&quot;1&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ delete the file that exists" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="force" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">force</stringProp>
                      </elementProp>
                      <elementProp name="recursive" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">recursive</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${FILE_ID}</stringProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Host" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value"> application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value"> gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value"> application/json</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value"> http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                      </elementProp>
                      <elementProp name="Content-Length" elementType="Header">
                        <stringProp name="Header.name">Content-Length</stringProp>
                        <stringProp name="Header.value"> 24862477</stringProp>
                      </elementProp>
                      <elementProp name="Connection" elementType="Header">
                        <stringProp name="Header.name">Connection</stringProp>
                        <stringProp name="Header.value"> keep-alive</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="only replace and append" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${type}&quot;==&quot;file_replace_append&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="file_replace_append" enabled="true"/>
          <hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="for each file" enabled="true">
              <stringProp name="ForeachController.inputVal">filenames</stringProp>
              <stringProp name="ForeachController.returnVal">fileName</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">${filenames_matchNr}</stringProp>
            </ForeachController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ check if file exists" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="nav_filter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">nav_filter</stringProp>
                    </elementProp>
                    <elementProp name="fields" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">userInterfaces,owner.id,defaultName,disabled,hidden,permissions,runInAdvancedViewer,canBurst,userInterfaces,extensions,iconURI,defaultScreenTip</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fields</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/.my_folders/items</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Delete existing file before uploading new one" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonStreamParser;
import com.google.gson.JsonArray;
vars.put(&quot;FILE_DEL&quot;,&quot;0&quot;); // this is used later to check whether to delete already existing file 
JsonStreamParser jsonStreamReader = new JsonStreamParser(prev.getResponseDataAsString());
String jsonStr = prev.getResponseDataAsString();
JsonElement response = new JsonStreamParser(jsonStr).next().getAsJsonObject();
 //{ &apos;data&apos;: [ &quot;defaultName&quot;.....&quot;id&quot;
JsonArray data = response.getAsJsonArray(&quot;data&quot;);
for (int i =0; i&lt; data.size(); i++) {
	JsonElement element = (JsonObject) data.get(i);
	if (element.isJsonObject()) {
		JsonObject item = element.getAsJsonObject();
		if(item.get(&quot;defaultName&quot;).getAsString().equals(vars.get(&quot;fileName&quot;))) {
			vars.put(&quot;FILE_ID&quot;, item.get(&quot;id&quot;).getAsString());
			log.debug(&quot;FILE_ID=&quot; + item.get(&quot;id&quot;).getAsString());
			vars.put(&quot;FILE_DEL&quot;,&quot;1&quot;);
			break;
		}
	}
}

log.debug(&quot;FILE_ID=&quot; + vars.get(&quot;FILE_ID&quot;));
if (vars.get(&quot;FILE_ID&quot;) == null) {
	log.debug(&quot;file did not exist on cm.  Proceed with upload&quot;);	
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ assign file_dir and file_ext" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${fileupload_data_dir}</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//the variable naming conventions are getting out of hand
groupDirName = &quot;&quot;;
if (&quot;true&quot;.equals(vars.get(&quot;isDirectory&quot;))) {
	groupDirName = &quot;/&quot; + vars.get(&quot;group_name&quot;);
}

vars.put(&quot;file_dir&quot;,args[0] + groupDirName + &quot;/&quot; + vars.get(&quot;fileName&quot;))

//&quot;C:\\eclipse_work\\jmeterBranched3\\jmeter_main\\testFragments\\watson_analytics\\utilities\\splitBinaryFiles\\XLS_50000rows50cols.xls&quot;)

vars.put(&quot;file_ext&quot;,vars.get(&quot;file_dir&quot;).substring(vars.get(&quot;file_dir&quot;).lastIndexOf(&quot;.&quot;)))

fileSeparator = &quot;&quot;
if(vars.get(&quot;file_dir&quot;).lastIndexOf(&quot;/&quot;) == -1){
    //using File.separator doesn&apos;t always work - user input may vary
    fileSeparator = &quot;\\&quot;
}else{
    fileSeparator = &quot;/&quot;
}

vars.put(&quot;fileName&quot;,vars.get(&quot;file_dir&quot;).substring(vars.get(&quot;file_dir&quot;).lastIndexOf(fileSeparator)+1))


if(vars.get(&quot;file_ext&quot;) == &quot;.xls&quot; || vars.get(&quot;file_ext&quot;) == &quot;.csv&quot;){
	vars.put(&quot;segmentContentType&quot;,&quot;application/vnd.ms-excel&quot;)
}else if(vars.get(&quot;file_ext&quot;) == &quot;.xlsx&quot;){
	vars.put(&quot;segmentContentType&quot;,&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;)
}else if(vars.get(&quot;file_ext&quot;) == &quot;.zip&quot;){
	vars.put(&quot;segmentContentType&quot;,&quot;application/zip&quot;)
}else if(vars.get(&quot;file_ext&quot;) == &quot;.gzip&quot;){
	vars.put(&quot;segmentContentType&quot;,&quot;application/x-gtar&quot;)
}else {
	vars.put(&quot;segmentContentType&quot;,&quot;application/vnd.ms-excel&quot;)
}
</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller check if the file has been uploaded.  If so delete it" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${FILE_DEL}&quot;==&quot;1&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ delete the file that exists" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="force" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">force</stringProp>
                      </elementProp>
                      <elementProp name="recursive" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">recursive</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${FILE_ID}</stringProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Host" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value"> application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value"> gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value"> application/json</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value"> http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                      </elementProp>
                      <elementProp name="Content-Length" elementType="Header">
                        <stringProp name="Header.name">Content-Length</stringProp>
                        <stringProp name="Header.value"> 24862477</stringProp>
                      </elementProp>
                      <elementProp name="Connection" elementType="Header">
                        <stringProp name="Header.name">Connection</stringProp>
                        <stringProp name="Header.value"> keep-alive</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for upload file if no existing file" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${FILE_DEL}&quot;==&quot;1&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="upload" enabled="true"/>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}Initializing_filename_${fileName}" enabled="true">
                  <stringProp name="TestPlan.comments">Initialing the file to upload</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files?filename=${fileName}&amp;async=true</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Host" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value"> gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                        </elementProp>
                        <elementProp name="Connection" elementType="Header">
                          <stringProp name="Header.name">Connection</stringProp>
                          <stringProp name="Header.value"> keep-alive</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract segmentId" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">segmentId</stringProp>
                      <stringProp name="RegexExtractor.regex">\d+</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract X-CA-Affinity" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                      <stringProp name="RegexExtractor.refname">XCAAffinityHeader</stringProp>
                      <stringProp name="RegexExtractor.regex">X-CA-Affinity: (\d+)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}segment/chunk10MB_${fileName}" enabled="true">
                  <stringProp name="TestPlan.comments">Segment the file into 10MB chunks</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Read in 10mb chunks and create PUT" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">BufferedInputStream bis = new BufferedInputStream(new FileInputStream(new File(vars.get(&quot;file_dir&quot;))));
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug(&quot;Available bytes: &quot; + Integer.toString(numBytesAvail));
log.debug(&quot;Bytes read: &quot; + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default, US-ASCII
	vars.put(&quot;fileSegmentBuffer&quot;,new String(Arrays.copyOfRange(buffer, 0, bytesRead), &quot;ISO-8859-1&quot;));
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	vars.putObject(&quot;inputStream&quot;,bis);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
}

vars.put(&quot;segmentCounter&quot;,&quot;1&quot;);

/*
 * Read using a &apos;read&apos; character approach
File file = new File(vars.get(&quot;file_dir&quot;));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
InputStreamReader isr = new InputStreamReader(inputStream);
char[] buffer = new char[bufferSize];
isr.read(buffer);

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	vars.put(&quot;fileSegmentBuffer&quot;,byteStr);
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	vars.putObject(&quot;fileInputStream&quot;,isr);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
}

vars.put(&quot;segmentCounter&quot;,&quot;1&quot;);
*/

/* Read using a &apos;read byte&apos; approach
 
File file = new File(vars.get(&quot;file_dir&quot;));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	String byteStr = new String(buffer);
	vars.put(&quot;fileSegmentBuffer&quot;,byteStr);
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	
	vars.putObject(&quot;fileInputStream&quot;,inputStream);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
}

vars.put(&quot;segmentCounter&quot;,&quot;1&quot;);
*/</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Submit each segment of file" enabled="true">
                    <stringProp name="WhileController.condition">${__groovy(&quot;${moreSegments}&quot;)}</stringProp>
                  </WhileController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT chunk to server" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${fileSegmentBuffer}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=${segmentCounter}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Host" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value"> gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">${segmentContentType}</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                          </elementProp>
                          <elementProp name="Connection" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value"> keep-alive</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp name="X-CA-Affinity" elementType="Header">
                            <stringProp name="Header.name">X-CA-Affinity</stringProp>
                            <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Read next 10mb chunk" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">BufferedInputStream bis = vars.getObject(&quot;inputStream&quot;);
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug(&quot;Available bytes: &quot; + Integer.toString(numBytesAvail));
log.debug(&quot;Bytes read: &quot; + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default(UTF-8), US-ASCII
	vars.put(&quot;fileSegmentBuffer&quot;,new String(Arrays.copyOfRange(buffer, 0, bytesRead), &quot;ISO-8859-1&quot;));
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	vars.putObject(&quot;inputStream&quot;,bis);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
	bis.close();
}


/*
 * Read using a &apos;read character&apos; approach
InputStreamReader isr = vars.getObject(&quot;fileInputStream&quot;);
int bufferSize = 10485760; //10mb - this number in bytes
char[] buffer = new char[bufferSize];
int readState = isr.read(buffer);
log.debug(isr.getEncoding());

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	//String byteStr = buffer.toString();
	vars.put(&quot;fileSegmentBuffer&quot;,byteStr);
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
	isr.close();
}
*/

/*
 * Read using a &apos;read byte&apos; approach

FileInputStream inputStream = vars.getObject(&quot;fileInputStream&quot;);
log.debug(Integer.toString(inputStream.available()));
int bufferSize = 10485760; //10mb - this number in bytes
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	vars.put(&quot;fileSegmentBuffer&quot;,new String(buffer));
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
	inputStream.close();
}
*/
</stringProp>
                      </JSR223PostProcessor>
                      <hashTree/>
                      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ increment segmentCounter" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">vars.put(&quot;segmentCounter&quot;,Integer.toString(Integer.parseInt(vars.get(&quot;segmentCounter&quot;))+1))</stringProp>
                      </JSR223PostProcessor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ retreive taskID from PUTted file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=-1</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Host" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value"> gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                        </elementProp>
                        <elementProp name="Connection" elementType="Header">
                          <stringProp name="Header.name">Connection</stringProp>
                          <stringProp name="Header.value"> keep-alive</stringProp>
                        </elementProp>
                        <elementProp name="X-CA-Affinity" elementType="Header">
                          <stringProp name="Header.name">X-CA-Affinity</stringProp>
                          <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract taskID (task id)" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">TASK_ID</stringProp>
                      <stringProp name="RegexExtractor.regex">taskID&quot;:&quot;(.+)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Instantiate REFRESH_DONE=0 and taskTimestamp" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">//This is an internally used variable, so instantiating it here instead of in test plan
vars.put(&quot;REFRESH_DONE&quot;,&quot;0&quot;);
vars.put(&quot;taskTimestamp&quot;,String.valueOf(System.currentTimeMillis()));</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset uploadTimer" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;uploadTimer&quot;, &quot;0&quot;);
vars.put(&quot;uploadTimeNotReached&quot;, &quot;true&quot;);
//vars.put(&quot;REFRESH_DONE&quot;, &quot;0&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_analyzing_${fileName}" enabled="true">
                  <stringProp name="TestPlan.comments">Performing the metadata tasks durning the Analyzing phaze</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While the data is uploading" enabled="true">
                    <stringProp name="WhileController.condition">${__groovy(&quot;${REFRESH_DONE}&quot;==&quot;0&quot;)}</stringProp>
                  </WhileController>
                  <hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update uploadTimer" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">int uploadTimer = Integer.parseInt(vars.get(&quot;uploadTimer&quot;));
uploadTimer = uploadTimer + 1;
if (uploadTimer &gt;= 2700) {
	log.error(&quot;upload attempt limit reached&quot;);
	vars.put(&quot;REFRESH_DONE&quot;, &quot;-1&quot;);
	vars.put(&quot;uploadTimeNotReached&quot;, &quot;false&quot;);
}
vars.put(&quot;uploadTimer&quot;, &quot;&quot; + uploadTimer);
</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] Refresh upload completion status" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="_" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${taskTimestamp}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/tasks/${TASK_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp name="X-CA-Affinity" elementType="Header">
                            <stringProp name="Header.name">X-CA-Affinity</stringProp>
                            <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Check response of completion status check" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">if(prev.getResponseDataAsString().contains(&quot;\&quot;state\&quot;:\&quot;SUCCESS\&quot;&quot;)){
	vars.put(&quot;REFRESH_DONE&quot;,&quot;1&quot;);
}
if(prev.getResponseDataAsString().contains(&quot;\&quot;state\&quot;:\&quot;NOT_AVAILABLE\&quot;&quot;)){
	vars.put(&quot;REFRESH_DONE&quot;,&quot;-1&quot;);
}
                      </stringProp>
                      </JSR223PostProcessor>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="/ Time between checking refresh status" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract BASE_MOD_ID (base module ID)" enabled="true">
                        <stringProp name="TestPlan.comments">this is needed to to extract the base module id so that we know when the task is finished</stringProp>
                        <stringProp name="JSONPostProcessor.referenceNames">BASE_MOD_ID</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Increment tasktTimestamp" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">vars.put(&quot;taskTimestamp&quot;, String.valueOf(Long.parseLong(vars.get(&quot;taskTimestamp&quot;))+1));</stringProp>
                      </JSR223PostProcessor>
                      <hashTree/>
                    </hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="/ Response Assertion file upload complete" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1444">-1</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">20</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">REFRESH_DONE</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="/ If Controller check if upload failed" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(&quot;${REFRESH_DONE}&quot;==&quot;1&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_save_${fileName}" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields=*" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="fields" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">*</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">fields</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="359487">${fileName}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="fields" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">defaultName,owner.defaultName,ancestors,permissions,hidden,disabled</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">fields</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="359487">${fileName}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="file_replace" enabled="true"/>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}Initializing_filename_${fileName}_replacefile" enabled="true">
                  <stringProp name="TestPlan.comments">Initialing the file to upload</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" filetoUpload" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files?filename=${fileName}&amp;async=true</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Host" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value"> gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                        </elementProp>
                        <elementProp name="Connection" elementType="Header">
                          <stringProp name="Header.name">Connection</stringProp>
                          <stringProp name="Header.value"> keep-alive</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">Id</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract X-CA-Affinity" enabled="false">
                      <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                      <stringProp name="RegexExtractor.refname">XCAAffinityHeader</stringProp>
                      <stringProp name="RegexExtractor.regex">X-CA-Affinity: (\d+)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="51517">409</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">true</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="replace file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/${Id}?filename=${fileName}&amp;async=true</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="TestPlan.comments">metadata/files/i7AC151A416B64901AB61D3030E6BD349?filename=NFL_3Sheet.xlsx&amp;async=true</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Host" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value"> gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                        </elementProp>
                        <elementProp name="Connection" elementType="Header">
                          <stringProp name="Header.name">Connection</stringProp>
                          <stringProp name="Header.value"> keep-alive</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract segmentId" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">segmentId</stringProp>
                      <stringProp name="RegexExtractor.regex">\d+</stringProp>
                      <stringProp name="RegexExtractor.template">$0$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract X-CA-Affinity" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                      <stringProp name="RegexExtractor.refname">XCAAffinityHeader</stringProp>
                      <stringProp name="RegexExtractor.regex">X-CA-Affinity: (\d+)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}segment/chunk10MB_${fileName}_replacefile" enabled="true">
                  <stringProp name="TestPlan.comments">Segment the file into 10MB chunks</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Read in 10mb chunks and create PUT" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">BufferedInputStream bis = new BufferedInputStream(new FileInputStream(new File(vars.get(&quot;file_dir&quot;))));
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug(&quot;Available bytes: &quot; + Integer.toString(numBytesAvail));
log.debug(&quot;Bytes read: &quot; + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default, US-ASCII
	vars.put(&quot;fileSegmentBuffer&quot;,new String(Arrays.copyOfRange(buffer, 0, bytesRead), &quot;ISO-8859-1&quot;));
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	vars.putObject(&quot;inputStream&quot;,bis);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
}

vars.put(&quot;segmentCounter&quot;,&quot;1&quot;);

/*
 * Read using a &apos;read&apos; character approach
File file = new File(vars.get(&quot;file_dir&quot;));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
InputStreamReader isr = new InputStreamReader(inputStream);
char[] buffer = new char[bufferSize];
isr.read(buffer);

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	vars.put(&quot;fileSegmentBuffer&quot;,byteStr);
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	vars.putObject(&quot;fileInputStream&quot;,isr);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
}

vars.put(&quot;segmentCounter&quot;,&quot;1&quot;);
*/

/* Read using a &apos;read byte&apos; approach
 
File file = new File(vars.get(&quot;file_dir&quot;));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	String byteStr = new String(buffer);
	vars.put(&quot;fileSegmentBuffer&quot;,byteStr);
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	
	vars.putObject(&quot;fileInputStream&quot;,inputStream);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
}

vars.put(&quot;segmentCounter&quot;,&quot;1&quot;);
*/</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Submit each segment of file for replacefile" enabled="true">
                    <stringProp name="WhileController.condition">${__groovy(&quot;${moreSegments}&quot;)}</stringProp>
                  </WhileController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT chunk to server" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${fileSegmentBuffer}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=${segmentCounter}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Host" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value"> gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">${segmentContentType}</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                          </elementProp>
                          <elementProp name="Connection" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value"> keep-alive</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp name="X-CA-Affinity" elementType="Header">
                            <stringProp name="Header.name">X-CA-Affinity</stringProp>
                            <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Read next 10mb chunk" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">BufferedInputStream bis = vars.getObject(&quot;inputStream&quot;);
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug(&quot;Available bytes: &quot; + Integer.toString(numBytesAvail));
log.debug(&quot;Bytes read: &quot; + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default(UTF-8), US-ASCII
	vars.put(&quot;fileSegmentBuffer&quot;,new String(Arrays.copyOfRange(buffer, 0, bytesRead), &quot;ISO-8859-1&quot;));
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	vars.putObject(&quot;inputStream&quot;,bis);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
	bis.close();
}


/*
 * Read using a &apos;read character&apos; approach
InputStreamReader isr = vars.getObject(&quot;fileInputStream&quot;);
int bufferSize = 10485760; //10mb - this number in bytes
char[] buffer = new char[bufferSize];
int readState = isr.read(buffer);
log.debug(isr.getEncoding());

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	//String byteStr = buffer.toString();
	vars.put(&quot;fileSegmentBuffer&quot;,byteStr);
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
	isr.close();
}
*/

/*
 * Read using a &apos;read byte&apos; approach

FileInputStream inputStream = vars.getObject(&quot;fileInputStream&quot;);
log.debug(Integer.toString(inputStream.available()));
int bufferSize = 10485760; //10mb - this number in bytes
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	vars.put(&quot;fileSegmentBuffer&quot;,new String(buffer));
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
	inputStream.close();
}
*/
</stringProp>
                      </JSR223PostProcessor>
                      <hashTree/>
                      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ increment segmentCounter" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">vars.put(&quot;segmentCounter&quot;,Integer.toString(Integer.parseInt(vars.get(&quot;segmentCounter&quot;))+1))</stringProp>
                      </JSR223PostProcessor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ retreive taskID from PUTted file for replace file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=-1</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Host" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value"> application/json</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value"> gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                        </elementProp>
                        <elementProp name="Connection" elementType="Header">
                          <stringProp name="Header.name">Connection</stringProp>
                          <stringProp name="Header.value"> keep-alive</stringProp>
                        </elementProp>
                        <elementProp name="X-CA-Affinity" elementType="Header">
                          <stringProp name="Header.name">X-CA-Affinity</stringProp>
                          <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract taskID (task id)" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">TASK_ID</stringProp>
                      <stringProp name="RegexExtractor.regex">taskID&quot;:&quot;(.+)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Instantiate REFRESH_DONE=0 and taskTimestamp replace file" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">//This is an internally used variable, so instantiating it here instead of in test plan
vars.put(&quot;REFRESH_DONE&quot;,&quot;0&quot;);
vars.put(&quot;taskTimestamp&quot;,String.valueOf(System.currentTimeMillis()));</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset uploadTimer replace file" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;uploadTimer&quot;, &quot;0&quot;);
vars.put(&quot;uploadTimeNotReached&quot;, &quot;true&quot;);
//vars.put(&quot;REFRESH_DONE&quot;, &quot;0&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_analyzing_${fileName}_replacefile" enabled="true">
                  <stringProp name="TestPlan.comments">Performing the metadata tasks durning the Analyzing phaze</stringProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While the data is uploading for replace file" enabled="true">
                    <stringProp name="WhileController.condition">${__groovy(&quot;${REFRESH_DONE}&quot;==&quot;0&quot;)}</stringProp>
                  </WhileController>
                  <hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update uploadTimer" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">int uploadTimer = Integer.parseInt(vars.get(&quot;uploadTimer&quot;));
uploadTimer = uploadTimer + 1;
if (uploadTimer &gt;= 2700) {
	log.error(&quot;upload attempt limit reached&quot;);
	vars.put(&quot;REFRESH_DONE&quot;, &quot;-1&quot;);
	vars.put(&quot;uploadTimeNotReached&quot;, &quot;false&quot;);
}
vars.put(&quot;uploadTimer&quot;, &quot;&quot; + uploadTimer);
</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] Refresh upload completion status for replace file" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="_" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${taskTimestamp}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/tasks/${TASK_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp name="X-CA-Affinity" elementType="Header">
                            <stringProp name="Header.name">X-CA-Affinity</stringProp>
                            <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Check response of completion status check" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">if(prev.getResponseDataAsString().contains(&quot;\&quot;state\&quot;:\&quot;SUCCESS\&quot;&quot;)){
	vars.put(&quot;REFRESH_DONE&quot;,&quot;1&quot;);
}
</stringProp>
                      </JSR223PostProcessor>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="/ Time between checking refresh status" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract BASE_MOD_ID (base module ID)" enabled="true">
                        <stringProp name="TestPlan.comments">this is needed to to extract the base module id so that we know when the task is finished</stringProp>
                        <stringProp name="JSONPostProcessor.referenceNames">BASE_MOD_ID</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Increment tasktTimestamp" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">vars.put(&quot;taskTimestamp&quot;, String.valueOf(Long.parseLong(vars.get(&quot;taskTimestamp&quot;))+1));</stringProp>
                      </JSR223PostProcessor>
                      <hashTree/>
                    </hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="/ Response Assertion file upload complete for replace file" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1444">-1</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">20</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">REFRESH_DONE</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="/ If Controller check if upload failed for replace file" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(&quot;${REFRESH_DONE}&quot;==&quot;1&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_save_${fileName}_replace file" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields=*" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="fields" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">*</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">fields</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="TestPlan.comments">replace file</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="359487">${fileName}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="fields" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">defaultName,owner.defaultName,ancestors,permissions,hidden,disabled</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">fields</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="TestPlan.comments">replace file</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="359487">${fileName}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="file_append" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="upload for appendfile" enabled="true"/>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}Initializing_filename_${fileName}_appendfile" enabled="true">
                    <stringProp name="TestPlan.comments">Initialing the file to upload</stringProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" filetoupload" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files?filename=${fileName}&amp;async=true</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Host" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value"> gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp name="X-Requested-With" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                          </elementProp>
                          <elementProp name="Connection" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value"> keep-alive</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Id" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                        <stringProp name="RegexExtractor.refname">Id</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract X-CA-Affinity" enabled="false">
                        <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                        <stringProp name="RegexExtractor.refname">XCAAffinityHeader</stringProp>
                        <stringProp name="RegexExtractor.regex">X-CA-Affinity: (\d+)</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                      </RegexExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="51517">409</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                        <boolProp name="Assertion.assume_success">true</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Append file" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/append/${Id}?filename=${fileName}&amp;async=true</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Host" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value"> gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp name="X-Requested-With" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                          </elementProp>
                          <elementProp name="Connection" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value"> keep-alive</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract segmentId" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                        <stringProp name="RegexExtractor.refname">segmentId</stringProp>
                        <stringProp name="RegexExtractor.regex">\d+</stringProp>
                        <stringProp name="RegexExtractor.template">$0$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract X-CA-Affinity" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                        <stringProp name="RegexExtractor.refname">XCAAffinityHeader</stringProp>
                        <stringProp name="RegexExtractor.regex">X-CA-Affinity: (\d+)</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}segment/chunk10MB_${fileName}_appendfile" enabled="true">
                    <stringProp name="TestPlan.comments">Segment the file into 10MB chunks</stringProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Read in 10mb chunks and create PUT" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">BufferedInputStream bis = new BufferedInputStream(new FileInputStream(new File(vars.get(&quot;file_dir&quot;))));
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug(&quot;Available bytes: &quot; + Integer.toString(numBytesAvail));
log.debug(&quot;Bytes read: &quot; + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default, US-ASCII
	vars.put(&quot;fileSegmentBuffer&quot;,new String(Arrays.copyOfRange(buffer, 0, bytesRead), &quot;ISO-8859-1&quot;));
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	vars.putObject(&quot;inputStream&quot;,bis);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
}

vars.put(&quot;segmentCounter&quot;,&quot;1&quot;);

/*
 * Read using a &apos;read&apos; character approach
File file = new File(vars.get(&quot;file_dir&quot;));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
InputStreamReader isr = new InputStreamReader(inputStream);
char[] buffer = new char[bufferSize];
isr.read(buffer);

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	vars.put(&quot;fileSegmentBuffer&quot;,byteStr);
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	vars.putObject(&quot;fileInputStream&quot;,isr);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
}

vars.put(&quot;segmentCounter&quot;,&quot;1&quot;);
*/

/* Read using a &apos;read byte&apos; approach
 
File file = new File(vars.get(&quot;file_dir&quot;));
int bufferSize = 10485760; //10mb - this number in bytes
FileInputStream inputStream = new FileInputStream(file);
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	String byteStr = new String(buffer);
	vars.put(&quot;fileSegmentBuffer&quot;,byteStr);
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	
	vars.putObject(&quot;fileInputStream&quot;,inputStream);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
}

vars.put(&quot;segmentCounter&quot;,&quot;1&quot;);
*/</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Submit each segment of file for appendfile" enabled="true">
                      <stringProp name="WhileController.condition">${__groovy(&quot;${moreSegments}&quot;)}</stringProp>
                    </WhileController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT chunk to server for appendfile" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${fileSegmentBuffer}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=${segmentCounter}</stringProp>
                        <stringProp name="HTTPSampler.method">PUT</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Host" elementType="Header">
                              <stringProp name="Header.name">Host</stringProp>
                              <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value"> application/json</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value"> gzip, deflate</stringProp>
                            </elementProp>
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">${segmentContentType}</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                            </elementProp>
                            <elementProp name="Connection" elementType="Header">
                              <stringProp name="Header.name">Connection</stringProp>
                              <stringProp name="Header.value"> keep-alive</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Origin</stringProp>
                              <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                            </elementProp>
                            <elementProp name="X-CA-Affinity" elementType="Header">
                              <stringProp name="Header.name">X-CA-Affinity</stringProp>
                              <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Read next 10mb chunk" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey">true</stringProp>
                          <stringProp name="script">BufferedInputStream bis = vars.getObject(&quot;inputStream&quot;);
byte[] buffer = new byte[10485760];
int numBytesAvail = bis.available();
int bytesRead = bis.read(buffer);
log.debug(&quot;Available bytes: &quot; + Integer.toString(numBytesAvail));
log.debug(&quot;Bytes read: &quot; + Integer.toString(bytesRead));

if(bytesRead &gt; -1){
	//encodings tried: default(UTF-8), US-ASCII
	vars.put(&quot;fileSegmentBuffer&quot;,new String(Arrays.copyOfRange(buffer, 0, bytesRead), &quot;ISO-8859-1&quot;));
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
	vars.putObject(&quot;inputStream&quot;,bis);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
	bis.close();
}


/*
 * Read using a &apos;read character&apos; approach
InputStreamReader isr = vars.getObject(&quot;fileInputStream&quot;);
int bufferSize = 10485760; //10mb - this number in bytes
char[] buffer = new char[bufferSize];
int readState = isr.read(buffer);
log.debug(isr.getEncoding());

String byteStr;
if(readState &lt; bufferSize &amp;&amp; readState &gt; -1){
	byteStr = buffer.toString().substring(0,readState);
}else{
	byteStr = buffer.toString();
}

if(readState &gt; -1){
	//String byteStr = buffer.toString();
	vars.put(&quot;fileSegmentBuffer&quot;,byteStr);
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
	isr.close();
}
*/

/*
 * Read using a &apos;read byte&apos; approach

FileInputStream inputStream = vars.getObject(&quot;fileInputStream&quot;);
log.debug(Integer.toString(inputStream.available()));
int bufferSize = 10485760; //10mb - this number in bytes
byte[] buffer = new byte[bufferSize];
int readState = inputStream.read(buffer);

if(readState &gt; -1){
	vars.put(&quot;fileSegmentBuffer&quot;,new String(buffer));
	vars.put(&quot;moreSegments&quot;,&quot;true&quot;);
}else{
	vars.put(&quot;moreSegments&quot;,&quot;false&quot;);
	inputStream.close();
}
*/
</stringProp>
                        </JSR223PostProcessor>
                        <hashTree/>
                        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ increment segmentCounter" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey">true</stringProp>
                          <stringProp name="script">vars.put(&quot;segmentCounter&quot;,Integer.toString(Integer.parseInt(vars.get(&quot;segmentCounter&quot;))+1))</stringProp>
                        </JSR223PostProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ retreive taskID from PUTted file for appendfile" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/files/segment/${segmentId}?index=-1</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Host" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}:${serverPort}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value"> application/json</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value"> en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value"> gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="X-Requested-With" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value"> XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}/bi/?perspective=home&amp;context=%7B%22perspective%22%3A%22home%22%2C%22content%22%3A%7B%7D%7D</stringProp>
                          </elementProp>
                          <elementProp name="Connection" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value"> keep-alive</stringProp>
                          </elementProp>
                          <elementProp name="X-CA-Affinity" elementType="Header">
                            <stringProp name="Header.name">X-CA-Affinity</stringProp>
                            <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">http://${serverName}:${serverPort}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract taskID (task id)" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                        <stringProp name="RegexExtractor.refname">TASK_ID</stringProp>
                        <stringProp name="RegexExtractor.regex">taskID&quot;:&quot;(.+)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="TestPlan.comments">this is needed to to extract the task id so that we know when the task is finished</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Instantiate REFRESH_DONE=0 and taskTimestamp" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">//This is an internally used variable, so instantiating it here instead of in test plan
vars.put(&quot;REFRESH_DONE&quot;,&quot;0&quot;);
vars.put(&quot;taskTimestamp&quot;,String.valueOf(System.currentTimeMillis()));</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ reset uploadTimer" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put(&quot;uploadTimer&quot;, &quot;0&quot;);
vars.put(&quot;uploadTimeNotReached&quot;, &quot;true&quot;);
//vars.put(&quot;REFRESH_DONE&quot;, &quot;0&quot;);</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_analyzing_${fileName}_appendfile" enabled="true">
                    <stringProp name="TestPlan.comments">Performing the metadata tasks durning the Analyzing phaze</stringProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While the data is uploading appendfile" enabled="true">
                      <stringProp name="WhileController.condition">${__groovy(&quot;${REFRESH_DONE}&quot;==&quot;0&quot;)}</stringProp>
                    </WhileController>
                    <hashTree>
                      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ update uploadTimer" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">int uploadTimer = Integer.parseInt(vars.get(&quot;uploadTimer&quot;));
uploadTimer = uploadTimer + 1;
if (uploadTimer &gt;= 2700) {
	log.error(&quot;upload attempt limit reached&quot;);
	vars.put(&quot;REFRESH_DONE&quot;, &quot;-1&quot;);
	vars.put(&quot;uploadTimeNotReached&quot;, &quot;false&quot;);
}
vars.put(&quot;uploadTimer&quot;, &quot;&quot; + uploadTimer);
</stringProp>
                      </JSR223Sampler>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] Refresh upload completion status for appendfile" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="_" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${taskTimestamp}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">_</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/metadata/tasks/${TASK_ID}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-Requested-With</stringProp>
                              <stringProp name="Header.value">XMLHttpRequest</stringProp>
                            </elementProp>
                            <elementProp name="X-CA-Affinity" elementType="Header">
                              <stringProp name="Header.name">X-CA-Affinity</stringProp>
                              <stringProp name="Header.value">${XCAAffinityHeader}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Check response of completion status check" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey">true</stringProp>
                          <stringProp name="script">if(prev.getResponseDataAsString().contains(&quot;\&quot;state\&quot;:\&quot;SUCCESS\&quot;&quot;)){
	vars.put(&quot;REFRESH_DONE&quot;,&quot;1&quot;);
}
</stringProp>
                        </JSR223PostProcessor>
                        <hashTree/>
                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="/ Time between checking refresh status" enabled="true">
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                        </ConstantTimer>
                        <hashTree/>
                        <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract BASE_MOD_ID (base module ID)" enabled="true">
                          <stringProp name="TestPlan.comments">this is needed to to extract the base module id so that we know when the task is finished</stringProp>
                          <stringProp name="JSONPostProcessor.referenceNames">BASE_MOD_ID</stringProp>
                          <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.id</stringProp>
                          <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                          <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                        </JSONPostProcessor>
                        <hashTree/>
                        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="/ Increment tasktTimestamp" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey">true</stringProp>
                          <stringProp name="script">vars.put(&quot;taskTimestamp&quot;, String.valueOf(Long.parseLong(vars.get(&quot;taskTimestamp&quot;))+1));</stringProp>
                        </JSR223PostProcessor>
                        <hashTree/>
                      </hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="/ Response Assertion file upload complete" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1444">-1</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">20</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">REFRESH_DONE</stringProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="/ If Controller check if upload failed for appendfile" enabled="true">
                    <stringProp name="IfController.condition">${__groovy(&quot;${REFRESH_DONE}&quot;==&quot;1&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${tr_prefix}file_save_${fileName}_appendfile" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields=*" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="fields" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">*</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">fields</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="TestPlan.comments">append file</stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-Requested-With</stringProp>
                              <stringProp name="Header.value">XMLHttpRequest</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="359487">${fileName}</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                          <stringProp name="Assertion.custom_message"></stringProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get fields" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="fields" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">defaultName,owner.defaultName,ancestors,permissions,hidden,disabled</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">fields</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${urlPath}/bi/v1/objects/${BASE_MOD_ID}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="TestPlan.comments">append file</stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-Requested-With</stringProp>
                              <stringProp name="Header.value">XMLHttpRequest</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="filename present?" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="359487">${fileName}</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                          <stringProp name="Assertion.custom_message"></stringProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
