<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="host and proxy" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PROXY_HOST" elementType="Argument">
            <stringProp name="Argument.name">PROXY_HOST</stringProp>
            <stringProp name="Argument.value">${__P(proxyServer,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">${__P(proxyServer)}</stringProp>
          </elementProp>
          <elementProp name="PROXY_PORT" elementType="Argument">
            <stringProp name="Argument.name">PROXY_PORT</stringProp>
            <stringProp name="Argument.value">${__P(proxyPort,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">${__P(proxyPort)}</stringProp>
          </elementProp>
          <elementProp name="serverName" elementType="Argument">
            <stringProp name="Argument.name">serverName</stringProp>
            <stringProp name="Argument.value">${__P(server,host.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverPort" elementType="Argument">
            <stringProp name="Argument.name">serverPort</stringProp>
            <stringProp name="Argument.value">${__P(port,9300)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url_base" elementType="Argument">
            <stringProp name="Argument.name">url_base</stringProp>
            <stringProp name="Argument.value">http://${__P(server,server)}:${__P(port,9300)}/bi</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="urlPath" elementType="Argument">
            <stringProp name="Argument.name">urlPath</stringProp>
            <stringProp name="Argument.value">${__P(urlPath,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">gateway base urlPath</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__P(protocol,http)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="test parameters" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="USERS" elementType="Argument">
            <stringProp name="Argument.name">USERS</stringProp>
            <stringProp name="Argument.value">${__P(users,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="advanced_viewer" elementType="Argument">
            <stringProp name="Argument.name">advanced_viewer</stringProp>
            <stringProp name="Argument.value">${__P(advancedViewer,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ITERATION" elementType="Argument">
            <stringProp name="Argument.name">ITERATION</stringProp>
            <stringProp name="Argument.value">${__P(iteration,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">supply a default value here if you want to run iteration_mode from jmeter GUI</stringProp>
          </elementProp>
          <elementProp name="DURATION" elementType="Argument">
            <stringProp name="Argument.name">DURATION</stringProp>
            <stringProp name="Argument.value">${__P(duration,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">supply a default value here if you want to run duration_mode from jmeter GUI</stringProp>
          </elementProp>
          <elementProp name="iteration_supplied_in_cmdline" elementType="Argument">
            <stringProp name="Argument.name">iteration_supplied_in_cmdline</stringProp>
            <stringProp name="Argument.value">${__P(iteration,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">this variable controls test mode, default should always be false, do not modify</stringProp>
          </elementProp>
          <elementProp name="duration_supplied_in_cmdline" elementType="Argument">
            <stringProp name="Argument.name">duration_supplied_in_cmdline</stringProp>
            <stringProp name="Argument.value">${__P(duration,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">this variable controls test mode, default should always be false, do not modify</stringProp>
          </elementProp>
          <elementProp name="data_dir" elementType="Argument">
            <stringProp name="Argument.name">data_dir</stringProp>
            <stringProp name="Argument.value">${__P(recordingDir,${__P(includecontroller.prefix)}data)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">directory containing file that has one widget request per line and the file name is the dashboard store id</stringProp>
          </elementProp>
          <elementProp name="dashboard_load_time" elementType="Argument">
            <stringProp name="Argument.name">dashboard_load_time</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.desc">Time in seconds the longest dashboard takes to load</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tr_prefix" elementType="Argument">
            <stringProp name="Argument.name">tr_prefix</stringProp>
            <stringProp name="Argument.value">first_</stringProp>
            <stringProp name="Argument.desc">keeps track of transaction prefixes, do not modify</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="namespace" elementType="Argument">
            <stringProp name="Argument.name">namespace</stringProp>
            <stringProp name="Argument.value">${__P(namespace,LDAP)}</stringProp>
            <stringProp name="Argument.desc">supply a default value here if you want to run in a different Namespace from jmeter GUI</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="credentialFile" elementType="Argument">
            <stringProp name="Argument.name">credentialFile</stringProp>
            <stringProp name="Argument.value">${__P(credentialFile,)}</stringProp>
            <stringProp name="Argument.desc">location of csv using alternate username</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="smartAnnotations" elementType="Argument">
            <stringProp name="Argument.name">smartAnnotations</stringProp>
            <stringProp name="Argument.value">${__P(smartAnnotations,)}</stringProp>
            <stringProp name="Argument.desc">enabled or disabled (default)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="recordingEnabled" elementType="Argument">
            <stringProp name="Argument.name">recordingEnabled</stringProp>
            <stringProp name="Argument.value">${__P(recordingEnabled,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="healthPing" elementType="Argument">
            <stringProp name="Argument.name">healthPing</stringProp>
            <stringProp name="Argument.value">${__P(healthPing,0)}</stringProp>
            <stringProp name="Argument.desc">enabled or disable pinging the dispatchers /bi/health URL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="healthDisp" elementType="Argument">
            <stringProp name="Argument.name">healthDisp</stringProp>
            <stringProp name="Argument.value">${__P(healthDisp,)}</stringProp>
            <stringProp name="Argument.desc">location of csv defining dispatchers</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ICP4D" elementType="Argument">
            <stringProp name="Argument.name">ICP4D</stringProp>
            <stringProp name="Argument.value">${__P(icp4d,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="scenarioGroupInfo" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="scenarioGroupName" elementType="Argument">
            <stringProp name="Argument.name">scenarioGroupName</stringProp>
            <stringProp name="Argument.value">${__P(scenario,1widget_bubble_chart_csv_1000rows100cols_2tabs)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scenarioGroupFile" elementType="Argument">
            <stringProp name="Argument.name">scenarioGroupFile</stringProp>
            <stringProp name="Argument.value">${__P(scenarioFile,test-jmeter-base/testPlans/scenarios.json)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1507127150000</longProp>
        <longProp name="ThreadGroup.end_time">1507127150000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="get test details" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set test mode (duration_mode or iteration_mode)" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;iteration_mode&quot;, &quot;false&quot;);
vars.put(&quot;duration_mode&quot;, &quot;false&quot;);

// iteration or duration supplied by commandline controls execution mode (iteration_mode or duration_mode)
if (vars.get(&quot;iteration_supplied_in_cmdline&quot;) != &quot;false&quot;) vars.put(&quot;iteration_mode&quot;, &quot;true&quot;);
if (vars.get(&quot;duration_supplied_in_cmdline&quot;) != &quot;false&quot;) vars.put(&quot;duration_mode&quot;, &quot;true&quot;);

// if iteration and duration were not supplied by commandline, then use the User Defined Variables to choose mode
if (vars.get(&quot;iteration_mode&quot;) != &quot;true&quot; || vars.get(&quot;duration_mode&quot;) != &quot;true&quot;) {
	if (vars.get(&quot;ITERATION&quot;) != &quot;0&quot;) {
		props.put(&quot;iteration_mode&quot;, &quot;true&quot;);
	} else {
		// defaults to duration_mode
		props.put(&quot;duration_mode&quot;, &quot;true&quot;);
	}
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ read scenarioGroup from file: ${scenarioGroupFile}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">file</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${scenarioGroupFile}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get scenarioGroup" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">scenarioGroup</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.scenarioGroups[?(@.scenarioGroup==&quot;${scenarioGroupName}&quot;)]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">SCENARIO_GROUP_NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get scenarios" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">scenarios</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.scenarios[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">scenarioGroup</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="does scenarioGroup=${scenarioGroupName} exists in ${scenarioGroupFile}?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1761248839">SCENARIO_GROUP_NOT_FOUND</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">scenarioGroup</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="${USERS} is not enough users. Need at least ${scenarios_matchNr}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">if (Integer.parseInt(&quot;${scenarios_matchNr}&quot;) &gt; Integer.parseInt(&quot;${USERS}&quot;)) {
	AssertionResult.setError(true)
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;${USERS} is not enough users. Need at least ${scenarios_matchNr}&quot;)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="stop the test now on failure" enabled="true">
              <intProp name="OnError.action">3</intProp>
            </ResultAction>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get scenario from scenarios" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">return vars.get(&quot;scenarioGroup&quot;);</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="is there a dashboard or story or explore to run-har-recording for?" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">run-har-recording</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.scenarios[*].items[?(@.type=~/dashboard|story|explore/)].type</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="set run-har-recording" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">if (vars.get(&quot;run-har-recording&quot;) == &quot;false&quot;) {
	props.put(&quot;run-har-recording&quot;, &quot;false&quot;)
} else {
	props.put(&quot;run-har-recording&quot;, &quot;true&quot;)
}
log.debug(Label + &quot; -- set run-har-recording=&quot; + props.get(&quot;run-har-recording&quot;))
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ populate global properties" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">varsToPopulate = [&quot;scenarioGroup&quot;]
for (varToPopulate in varsToPopulate) {
	props.put(varToPopulate, vars.get(varToPopulate))
}

props.put(&quot;scenarioCount&quot;, vars.get(&quot;scenarios_matchNr&quot;))
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set driver" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.lang.System
osFamilyName = System.getProperty(&quot;os.name&quot;).toLowerCase()
chromedriver = props.get(&quot;chromedriver&quot;)

if (vars.get(&quot;recordingEnabled&quot;)) {
	if (chromedriver != null &amp;&amp; new File(chromedriver).exists()) {
		// assume value provided is correct
	} else {
		// guess which chromedriver we need
		if (osFamilyName.contains(&quot;linux&quot;)) {
			chromedriverFileName = &quot;chromedriver.linux&quot;
		} else if (osFamilyName.contains(&quot;osx&quot;)) {
			chromedriverFileName =  &quot;chromedriver.osx&quot;
		} else {
			chromedriverFileName =  &quot;chromedriver.exe&quot;
		}
		// first look relative to root
		rootDriverLocation = &quot;test-jmeter-base/engine/default/lib/&quot;
		chromedriver = rootDriverLocation + chromedriverFileName
		if (!new File(chromedriver).exists()) {
			// assume we are launching from bin
			chromedriverAltPath = &quot;../lib/&quot; + chromedriverFileName
			if (!new File(chromedriverAltPath).exists()) {
				// can&apos;t find chromedriver
				SampleResult.setSuccessful(false)
				SampleResult.setResponseMessage(&quot;chromedriver not found: &quot; + chromedriverAltPath)
			} else {
				// use the alternate path
				chromedriver = chromedriverAltPath
			}
		}
		props.put(&quot;chromedriver&quot;, chromedriver)
	}
	if (!new File(chromedriver).exists()){
		SampleResult.setSuccessful(false)
		SampleResult.setResponseMessage(&quot;chromedriver not set or does not exist: &quot; + chromedriver)
	}
}
log.info(&quot;chromedriver=&quot;+chromedriver)</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="[Setup - Record] Open dashboards to get querySpecs" enabled="true">
        <stringProp name="TestPlan.comments">This must be executed sequentially (before launch, after setUp) so that chrome driver config can read the dynamically generated proxy file created by setup</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${recordingEnabled}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set local run-har-recording" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">vars.put(&quot;run-har-recording&quot;, props.get(&quot;run-har-recording&quot;))
log.debug(Label + &quot; -- run-har-recording=&quot; + vars.get(&quot;run-har-recording&quot;))</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ${run-har-recording}" enabled="true">
          <stringProp name="IfController.condition">&quot;${run-har-recording}&quot;==&quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Baseline last modified dates of files in queryspec dir" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.File;

File folder = new File(vars.get(&quot;data_dir&quot;));
File[] listOfFiles = folder.listFiles();

for(File f : listOfFiles){
	vars.put(f.getName(), String.valueOf(f.lastModified()));
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include common/recorder.jmx" enabled="true">
            <stringProp name="IncludeController.includepath">common/recorder.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ Compare new or changed files to queryspec file baselines" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.File;

File folder = new File(vars.get(&quot;data_dir&quot;));
File[] listOfFiles = folder.listFiles();
boolean pass = false;

for(File f : listOfFiles){
	//consider any new files a pass
	if(vars.get(f.getName()) == null){
		pass = true;
	}
	//consider any modified queryspec files a pass	
	 if(vars.get(f.getName()) != String.valueOf(f.lastModified())){
		pass = true;
	}
}

if(!pass){
	log.warn(&quot;HAR generation step was run but no changes were noticed in the queryspec directory&quot;);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="launch objects" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${USERS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${USERS}/5</stringProp>
        <longProp name="ThreadGroup.start_time">1453146790000</longProp>
        <longProp name="ThreadGroup.end_time">1453146790000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="get test details once only" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="get test details" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get scenarioGroup" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return props.get(&quot;scenarioGroup&quot;)</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set scenario_user_index" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//scenarios_matchNr is ???
// ???This sampler selects a scenario if multiple are listed to distribute the load evenly amoung dashboards???
// ???Ie, if 9 user load and 3 scenarios (dashboards), 3 threads (users) should each run 1 of the 3 dashboards???
// ???If 3 user load and 2 scenarios, the first scenario gets run twice, but this effect should even out over large userloads???

vars.put(&quot;scenario_user_index&quot;, String.valueOf(
							ctx.getThreadNum()
							% 
							Integer.parseInt(props.get(&quot;scenarioCount&quot;))
							)
						);
log.debug(Label + &quot; -- scenario_user_index = &quot; + vars.get(&quot;scenario_user_index&quot;))</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get scenario" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">scenario</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.scenarios[${scenario_user_index}]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ get items from scenario" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">return vars.get(&quot;scenario&quot;); //this is a bit awkward since the scenarios element being returned makes sense to be called scenario, but there is an object in the scenarios array called scenario</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get scenarioName" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">scenarioName</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.scenario</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get navigation" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">navigation</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.navigation</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get items" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">items</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.items[*]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="isLoggedOn" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="loggedOn" elementType="Argument">
                  <stringProp name="Argument.name">loggedOn</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If logged on already then log off" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${loggedOn}&quot;==&quot;true&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If advanced viewer" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${type}&quot;==&quot;report&quot; &amp;&amp; &quot;${advanced_viewer}&quot;==&quot;true&quot; &amp;&amp; (&quot;${report_output_format}&quot;==&quot;HTML&quot; || &quot;${report_output_format}&quot;==&quot;PDF&quot; || &quot;${report_output_format}&quot;==&quot;EXCEL&quot;))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="soap release" enabled="true">
              <stringProp name="IncludeController.includepath">authoring/runReport/fullInteractivity/soap_release.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If classic viewer" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${type}&quot;==&quot;report&quot; &amp;&amp; &quot;${advanced_viewer}&quot;==&quot;false&quot; &amp;&amp; (&quot;${report_output_format}&quot;==&quot;interactiveReport&quot; || !&quot;${report_output_format}&quot;.contains(&quot;savedOutput&quot;) ))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="classic release" enabled="true">
              <stringProp name="IncludeController.includepath">authoring/runReport/classicViewer/release.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="logoff" enabled="true">
            <stringProp name="IncludeController.includepath">common/bi_logoff.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="login" enabled="true">
          <stringProp name="IncludeController.includepath">common/bi_login.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="nav" enabled="true">
          <stringProp name="IncludeController.includepath">common/bi_navigate.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ set durationStartTime and threadIterationCount if not set" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">durationStartTime = vars.get(&quot;durationStartTime&quot;)
if (durationStartTime == null) {
	vars.put(&quot;durationStartTime&quot;, Long.toString(System.currentTimeMillis()))
	log.info(&quot;initiated durationStartTime as &quot; + vars.get(&quot;durationStartTime&quot;))
}

threadIterationCount = vars.get(&quot;threadIterationCount&quot;)
if (threadIterationCount == null) {
	vars.put(&quot;threadIterationCount&quot;, &quot;0&quot;)
	log.info(&quot;initiated threadIterationCount as 0&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="main loop" enabled="true">
          <stringProp name="WhileController.condition">${__groovy((&quot;${__P(duration_mode)}&quot;==&quot;true&quot; &amp;&amp; (System.currentTimeMillis() - Long.parseLong(vars.get(&quot;durationStartTime&quot;)) &lt; Long.parseLong(vars.get(&quot;DURATION&quot;)) * 1000 )) || (&quot;${__P(iteration_mode)}&quot;==&quot;true&quot; &amp;&amp; (Long.parseLong(vars.get(&quot;threadIterationCount&quot;)) &lt; Long.parseLong(vars.get(&quot;ITERATION&quot;)))) )}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/ increase threadIterationCount" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">threadIterationCount = Long.parseLong(vars.get(&quot;threadIterationCount&quot;))
vars.put(&quot;threadIterationCount&quot;, Long.toString(threadIterationCount + 1))</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="launch" enabled="true">
            <stringProp name="IncludeController.includepath">launch.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="final logoff" enabled="true"/>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="logoff" enabled="true">
            <stringProp name="IncludeController.includepath">common/bi_logoff.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="apply xsrf-token" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${XSRF-TOKEN}</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;

currentSampler = ctx.getCurrentSampler();

if (currentSampler instanceof HTTPSamplerBase &amp;&amp; args.length &gt; 0) {
	xsrfToken = args[0];
	if (!xsrfToken.contains(&quot;XSRF-TOKEN&quot;) &amp;&amp; !&quot;&quot;.equals(xsrfToken)) {
		log.debug(&quot;new xsrf-token &quot; + xsrfToken);
		headerManager = currentSampler.getHeaderManager();
		headerManager.removeHeaderNamed(&quot;X-XSRF-TOKEN&quot;);
		headerManager.add(new Header(&quot;X-XSRF-TOKEN&quot;, xsrfToken));
	}
}</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
          <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">8</stringProp>
          <stringProp name="HTTPSampler.embedded_url_re">nothingshouldmatchthis</stringProp>
          <stringProp name="HTTPSampler.proxyHost">${PROXY_HOST}</stringProp>
          <stringProp name="HTTPSampler.proxyPort">${PROXY_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="User-Agent&#x9;Mozilla/5.0 (Windows NT 6.1; WOW64; rv" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - Errors" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${__P(responseErrorFile,errors.xml)}</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.reporters.AutoStop guiclass="kg.apc.jmeter.reporters.AutoStopGui" testclass="kg.apc.jmeter.reporters.AutoStop" testname="autostop if error rate &gt;10% for 10s" enabled="true">
        <stringProp name="avg_response_time">1000000</stringProp>
        <stringProp name="avg_response_time_length">10</stringProp>
        <stringProp name="error_rate">10</stringProp>
        <stringProp name="error_rate_length">10</stringProp>
        <stringProp name="avg_response_latency">500000</stringProp>
        <stringProp name="avg_response_latency_length">10</stringProp>
      </kg.apc.jmeter.reporters.AutoStop>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
